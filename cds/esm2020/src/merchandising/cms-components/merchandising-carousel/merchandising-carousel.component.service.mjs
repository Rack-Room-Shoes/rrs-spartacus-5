/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { EMPTY } from 'rxjs';
import { filter, map, tap } from 'rxjs/operators';
import { MerchandisingCarouselClickedEvent, MerchandisingCarouselViewedEvent, } from './model';
import * as i0 from "@angular/core";
import * as i1 from "../../facade";
import * as i2 from "@spartacus/core";
import * as i3 from "../../../profiletag";
import * as i4 from "../../../config";
const DEFAULT_CAROUSEL_VIEWPORT_THRESHOLD = 80;
export class MerchandisingCarouselComponentService {
    constructor(cdsMerchandisingProductService, productService, profileTagEventService, cdsConfig) {
        this.cdsMerchandisingProductService = cdsMerchandisingProductService;
        this.productService = productService;
        this.profileTagEventService = profileTagEventService;
        this.cdsConfig = cdsConfig;
        this.PRODUCT_SCOPE = 'details';
    }
    getMerchandisingCaourselViewportThreshold(cmsComponent) {
        const viewportPercentage = cmsComponent.viewportPercentage ??
            this.cdsConfig?.cds?.merchandising?.defaultCarouselViewportThreshold ??
            DEFAULT_CAROUSEL_VIEWPORT_THRESHOLD;
        return viewportPercentage / 100;
    }
    getMerchandisingCarouselModel(cmsComponent) {
        return this.cdsMerchandisingProductService
            .loadProductsForStrategy(cmsComponent.strategy, cmsComponent.numberToDisplay)
            .pipe(map((strategy) => {
            const metadata = this.getCarouselMetadata(strategy.products, cmsComponent);
            const items$ = this.mapStrategyProductsToCarouselItems(strategy.products);
            const productIds = this.mapStrategyProductsToProductIds(strategy.products);
            const id = this.getMerchandisingCarouselModelId(cmsComponent, strategy.request);
            return {
                id,
                items$,
                productIds,
                metadata,
                title: cmsComponent.title,
                backgroundColor: cmsComponent.backgroundColour,
                textColor: cmsComponent.textColour,
            };
        }));
    }
    sendCarouselViewEvent(lastSendModelId, merchandisingCarouselModel$) {
        return merchandisingCarouselModel$.pipe(filter((model) => model.id !== lastSendModelId), tap((merchandisingCarouselModel) => {
            const carouselEvent = this.getCarouselEventFromCarouselModel(merchandisingCarouselModel);
            this.profileTagEventService.notifyProfileTagOfEventOccurence(new MerchandisingCarouselViewedEvent(carouselEvent, merchandisingCarouselModel.productIds));
        }));
    }
    sendCarouselItemClickedEvent(merchandisingCarouselModel, clickedProduct) {
        const carouselEvent = this.getCarouselEventFromCarouselModel(merchandisingCarouselModel);
        carouselEvent.metadata = {
            ...carouselEvent.metadata,
            ...clickedProduct.metadata,
        };
        this.profileTagEventService.notifyProfileTagOfEventOccurence(new MerchandisingCarouselClickedEvent(carouselEvent, clickedProduct.metadata.slot, clickedProduct.code, clickedProduct.images?.PRIMARY['product']?.url));
    }
    getCarouselMetadata(strategyProducts, componentData) {
        const metadata = strategyProducts.metadata ?? {};
        if (strategyProducts.products && strategyProducts.products.length) {
            metadata.slots = strategyProducts.products.length;
        }
        metadata.title = componentData.title;
        metadata.name = componentData.name;
        metadata.strategyid = componentData.strategy;
        metadata.id = componentData.uid;
        return metadata;
    }
    mapStrategyProductsToCarouselItems(strategyProducts) {
        return strategyProducts && strategyProducts.products
            ? strategyProducts.products.map((strategyProduct, index) => this.productService.get(strategyProduct.id, this.PRODUCT_SCOPE).pipe(map((product) => ({
                ...product,
                metadata: this.getCarouselItemMetadata(strategyProduct, index + 1),
            }))))
            : [EMPTY];
    }
    mapStrategyProductsToProductIds(strategyProducts) {
        return strategyProducts && strategyProducts.products
            ? strategyProducts.products.map((strategyProduct) => strategyProduct.id)
            : [];
    }
    getMerchandisingCarouselModelId(cmsComponent, request) {
        return (cmsComponent.uid +
            '_' +
            cmsComponent.strategy +
            '_' +
            JSON.stringify(request.queryParams));
    }
    getCarouselItemMetadata(strategyProduct, index) {
        const metadata = strategyProduct.metadata ?? {};
        metadata.slot = index;
        metadata.id = strategyProduct.id;
        return metadata;
    }
    getCarouselEventFromCarouselModel(carouselModel) {
        return {
            carouselId: carouselModel.metadata.id,
            carouselName: carouselModel.metadata.name,
            strategyId: carouselModel.metadata.strategyid,
            metadata: carouselModel.metadata,
        };
    }
}
MerchandisingCarouselComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: MerchandisingCarouselComponentService, deps: [{ token: i1.CdsMerchandisingProductService }, { token: i2.ProductService }, { token: i3.ProfileTagEventService }, { token: i4.CdsConfig }], target: i0.ɵɵFactoryTarget.Injectable });
MerchandisingCarouselComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: MerchandisingCarouselComponentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: MerchandisingCarouselComponentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.CdsMerchandisingProductService }, { type: i2.ProductService }, { type: i3.ProfileTagEventService }, { type: i4.CdsConfig }]; } });
//# sourceMappingURL=data:application/json;base64,