{"version":3,"file":"spartacus-epd-visualization-core.mjs","sources":["../../../integration-libs/epd-visualization/core/connectors/scene/converters.ts","../../../integration-libs/epd-visualization/core/connectors/scene/nodes-response.ts","../../../integration-libs/epd-visualization/core/connectors/scene/scene.adapter.ts","../../../integration-libs/epd-visualization/core/connectors/scene/scene.connector.ts","../../../integration-libs/epd-visualization/core/connectors/scene/index.ts","../../../integration-libs/epd-visualization/core/connectors/visualization/converters.ts","../../../integration-libs/epd-visualization/core/connectors/visualization/lookup-visualizations-response.ts","../../../integration-libs/epd-visualization/core/connectors/visualization/visualization.adapter.ts","../../../integration-libs/epd-visualization/core/connectors/visualization/visualization.connector.ts","../../../integration-libs/epd-visualization/core/connectors/visualization/index.ts","../../../integration-libs/epd-visualization/core/connectors/index.ts","../../../integration-libs/epd-visualization/core/services/scene-node-to-product-lookup/scene-node-to-product-lookup.service.ts","../../../integration-libs/epd-visualization/core/services/scene-node-to-product-lookup/index.ts","../../../integration-libs/epd-visualization/core/services/visualization-lookup/visualization-lookup.service.ts","../../../integration-libs/epd-visualization/core/services/visualization-lookup/index.ts","../../../integration-libs/epd-visualization/core/services/index.ts","../../../integration-libs/epd-visualization/core/epd-visualization-core.module.ts","../../../integration-libs/epd-visualization/core/public_api.ts","../../../integration-libs/epd-visualization/core/spartacus-epd-visualization-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { NodesResponse } from './nodes-response';\n\nexport const NODES_RESPONSE_NORMALIZER = new InjectionToken<\n  Converter<any, NodesResponse>\n>('NodesResponseNormalizer');\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport interface NodesResponse {\n  nodes?: TreeNode[];\n}\n\nexport interface TreeNode {\n  sid: string;\n  metadata?: Metadatum[];\n}\n\nexport enum MetadatumValueType {\n  string = 'string',\n  integer = 'integer',\n  float = 'float',\n  date = 'date',\n  blob = 'blob',\n  string_array = 'string_array',\n}\n\nexport interface Metadatum {\n  source: string;\n  category: string;\n  tag: string;\n  value: string;\n  valueType: MetadatumValueType;\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Observable } from 'rxjs';\nimport { NodesResponse } from './nodes-response';\n\nexport abstract class SceneAdapter {\n  /**\n   * Used for invoking the EPD Visualization API for retrieving scene node information.\n   * @param sceneId The scene id to use as the sceneId path parameter.\n   * @param nodeIds An array of scene node ids to pass in id query parameters.\n   * @param $expand A set of strings to combine to form the $expand query parameter.\n   * @param $filter A set of strings to combine to form the $filter query parameter.\n   * @param contentType The contentType query parameter.\n   * @returns An Observable producing a NodesResponse which contains an array of objects describing scene nodes.\n   */\n  abstract getNodes(\n    sceneId: string,\n    nodeIds?: string[],\n    $expand?: string[],\n    $filter?: string[],\n    contentType?: string\n  ): Observable<NodesResponse>;\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { NodesResponse } from './nodes-response';\nimport { SceneAdapter } from './scene.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SceneConnector {\n  constructor(protected sceneAdapter: SceneAdapter) {}\n\n  /**\n   * Used for invoking the EPD Visualization API for retrieving scene node information.\n   * @param sceneId The scene id to use as the sceneId path parameter.\n   * @param nodeIds An array of scene node ids to pass in id query parameters.\n   * @param $expand A set of strings to combine to form the $expand query parameter.\n   * @param $filter A set of strings to combine to form the $filter query parameter.\n   * @param contentType The contentType query parameter.\n   * @returns An Observable producing a NodesResponse which contains an array of objects describing scene nodes.\n   */\n  getNodes(\n    sceneId: string,\n    nodeIds?: string[],\n    $expand?: string[],\n    $filter?: string[],\n    contentType?: string\n  ): Observable<NodesResponse> {\n    return this.sceneAdapter.getNodes(\n      sceneId,\n      nodeIds,\n      $expand,\n      $filter,\n      contentType\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './converters';\nexport * from './nodes-response';\nexport * from './scene.adapter';\nexport * from './scene.connector';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { LookupVisualizationsResponse } from './lookup-visualizations-response';\n\nexport const LOOKUP_VISUALIZATIONS_RESPONSE_NORMALIZER = new InjectionToken<\n  Converter<any, LookupVisualizationsResponse>\n>('LookupVisualizationsResponseNormalizer');\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { VisualizationInfo } from '@spartacus/epd-visualization/root';\n\nexport interface LookupVisualizationsResponse {\n  visualizations?: VisualizationInfo[];\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { UsageId } from '@spartacus/epd-visualization/root';\nimport { Observable } from 'rxjs';\nimport { LookupVisualizationsResponse } from './lookup-visualizations-response';\n\nexport abstract class VisualizationAdapter {\n  /**\n   * Used for finding a visualization by Usage ID that has anonymous (unauthenticated) read access enabled.\n   * The search is performed in the SAP EPD Visualization service instance associated with the SaaS subscription for the SAP EPD tenant.\n   * @param visualizationUsageId The SAP EPD Visualization usage ID value identifying visualizations to match.\n   * Only visualizations that have the specified usage ID value will be returned.\n   * @param folderUsageId The SAP EPD Visualization usage ID identifying folders to search for visualizations.\n   * Only folders that are tagged with the specified usage ID value that have anonymous access enabled will be searched.\n   * @returns An Observable producing a LookupVisualizationsResponse which contains an array of objects describing matched visualizations.\n   */\n  abstract lookupVisualization(\n    visualizationUsageId: UsageId,\n    folderUsageId: UsageId\n  ): Observable<LookupVisualizationsResponse>;\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { UsageId } from '@spartacus/epd-visualization/root';\nimport { Observable } from 'rxjs';\nimport { LookupVisualizationsResponse } from './lookup-visualizations-response';\nimport { VisualizationAdapter } from './visualization.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VisualizationConnector {\n  constructor(protected visualizationAdapter: VisualizationAdapter) {}\n\n  /**\n   * Used for finding a visualization by Usage ID that has anonymous (unauthenticated) read access enabled.\n   * The search is performed in the SAP EPD Visualization service instance associated with the SaaS subscription for the SAP EPD tenant.\n   * @param visualizationUsageId The SAP EPD Visualization usage ID value identifying visualizations to match.\n   * Only visualizations that have the specified usage ID value will be returned.\n   * @param folderUsageId The SAP EPD Visualization usage ID identifying folders to search for visualizations.\n   * Only folders that are tagged with the specified usage ID value that have anonymous access enabled will be searched.\n   * @returns An Observable producing a LookupVisualizationsResponse which contains an array of objects describing matched visualizations.\n   */\n  lookupVisualization(\n    visualizationUsageId: UsageId,\n    folderUsageId: UsageId\n  ): Observable<LookupVisualizationsResponse> {\n    return this.visualizationAdapter.lookupVisualization(\n      visualizationUsageId,\n      folderUsageId\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './converters';\nexport * from './lookup-visualizations-response';\nexport * from './visualization.adapter';\nexport * from './visualization.connector';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './scene/index';\nexport * from './visualization/index';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  EpdVisualizationConfig,\n  EpdVisualizationInnerConfig,\n  UsageIdConfig,\n} from '@spartacus/epd-visualization/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport {\n  Metadatum,\n  NodesResponse,\n  TreeNode,\n} from '../../connectors/scene/nodes-response';\nimport { SceneConnector } from '../../connectors/scene/scene.connector';\n\nexport interface NodeIdProductCodes {\n  nodeId: string;\n  productCodes: string[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SceneNodeToProductLookupService {\n  constructor(\n    protected epdVisualizationConfig: EpdVisualizationConfig,\n    protected sceneConnector: SceneConnector\n  ) {\n    const epdVisualization = this.epdVisualizationConfig\n      .epdVisualization as EpdVisualizationInnerConfig;\n    const usageIdConfig = epdVisualization.usageIds as UsageIdConfig;\n    this.usageId = usageIdConfig.productUsageId;\n  }\n\n  private usageId;\n\n  /**\n   * Called to populate the maps with the data for the given scene.\n   * This can be done before the scene has been loaded since this just involves a storage service API call\n   * @param sceneId The scene id of the loaded scene.\n   */\n  public populateMapsForScene(sceneId: string): void {\n    this.getNodeIdProductCodesForScene(sceneId)\n      .pipe(first())\n      .subscribe((nodeIdProductCodes: NodeIdProductCodes[]) => {\n        this.productCodesByNodeIdMap$.next(\n          this.getProductCodesByNodeIdMap(nodeIdProductCodes)\n        );\n        this.nodeIdsByProductCodeMap$.next(\n          this.getNodeIdsByProductCodeMap(nodeIdProductCodes)\n        );\n      });\n  }\n\n  private productCodesByNodeIdMap$ = new BehaviorSubject<Map<string, string[]>>(\n    new Map()\n  );\n  private nodeIdsByProductCodeMap$ = new BehaviorSubject<Map<string, string[]>>(\n    new Map()\n  );\n\n  private getNodeIdProductCodesForScene(\n    sceneId: string\n  ): Observable<NodeIdProductCodes[]> {\n    return this.sceneConnector\n      .getNodes(\n        sceneId,\n        undefined,\n        [\n          'hotspot',\n          `metadata[${this.usageId.source}].${this.usageId.category}.${this.usageId.keyName}`,\n        ],\n        [\n          `metadata[${this.usageId.source}].${this.usageId.category}.${this.usageId.keyName}`,\n        ],\n        '*'\n      )\n      .pipe(\n        map((data: NodesResponse) => {\n          return (data.nodes as TreeNode[])\n            .filter((node: TreeNode) => node.metadata && node.metadata.length)\n            .map((node: TreeNode) => {\n              return <NodeIdProductCodes>{\n                nodeId: node.sid,\n                productCodes: (node.metadata as Metadatum[]).map(\n                  (metadata: any) => metadata.value\n                ),\n              };\n            });\n        })\n      );\n  }\n\n  private getProductCodesByNodeIdMap(\n    nodeIdProductCodes: NodeIdProductCodes[]\n  ): Map<string, string[]> {\n    return nodeIdProductCodes.reduce(\n      (\n        productCodeByNodeIdMap: Map<string, string[]>,\n        nodeIdProductCodeTuple: NodeIdProductCodes\n      ) => {\n        productCodeByNodeIdMap.set(\n          nodeIdProductCodeTuple.nodeId,\n          nodeIdProductCodeTuple.productCodes\n        );\n        return productCodeByNodeIdMap;\n      },\n      new Map<string, string[]>()\n    );\n  }\n\n  private getNodeIdsByProductCodeMap(\n    nodeIdProductCodes: NodeIdProductCodes[]\n  ): Map<string, string[]> {\n    return nodeIdProductCodes.reduce(\n      (\n        nodeIdByProductCodeMap: Map<string, string[]>,\n        nodeIdProductCodeTuple: NodeIdProductCodes\n      ) => {\n        nodeIdProductCodeTuple.productCodes.forEach((productCode) => {\n          const nodeIds = nodeIdByProductCodeMap.get(productCode);\n          if (nodeIds !== undefined) {\n            nodeIds.push(nodeIdProductCodeTuple.nodeId);\n          } else {\n            nodeIdByProductCodeMap.set(productCode, [\n              nodeIdProductCodeTuple.nodeId,\n            ]);\n          }\n        });\n        return nodeIdByProductCodeMap;\n      },\n      new Map<string, string[]>()\n    );\n  }\n\n  /**\n   * Get distinct values while retaining ordering.\n   */\n  private distinct(values: string[]) {\n    const uniqueArray: string[] = [];\n    const valueSet = new Set();\n    values.forEach((value) => {\n      if (!valueSet.has(value)) {\n        valueSet.add(value);\n        uniqueArray.push(value);\n      }\n    });\n    return uniqueArray;\n  }\n\n  private _lookupProductCodes(\n    productCodesByNodeIdMap: Map<string, string[]>,\n    nodeIds: string[]\n  ): string[] {\n    return this.distinct(\n      nodeIds.flatMap((nodeId) => productCodesByNodeIdMap.get(nodeId) || [])\n    );\n  }\n\n  /**\n   * Returns an Observable producing an array of product codes corresponding to the specified scene node ids in the currently loaded scene.\n   * @param nodeIds The scene node ids.\n   * @returns An Observable producing an array of product codes corresponding to the specified scene node ids in the currently loaded scene.\n   */\n  public lookupProductCodes(nodeIds: string[]): Observable<string[]> {\n    return this.productCodesByNodeIdMap$.pipe(\n      first(),\n      map((productCodesByNodeIdMap) =>\n        this._lookupProductCodes(productCodesByNodeIdMap, nodeIds)\n      )\n    );\n  }\n\n  /**\n   * Returns an array of product codes corresponding to the specified scene node ids in the currently loaded scene.\n   * Returns an empty array if the map of product codes by node id has not yet been populated.\n   * For cases where the code must execute synchronously.\n   * @param nodeIds The scene node ids.\n   * @returns An array of product codes corresponding to the specified scene node ids in the currently loaded scene.\n   */\n  public syncLookupProductCodes(nodeIds: string[]): string[] {\n    return this._lookupProductCodes(\n      this.productCodesByNodeIdMap$.getValue(),\n      nodeIds\n    );\n  }\n\n  private _lookupNodeIds(\n    nodeIdsByProductCodeMap: Map<string, string[]>,\n    productCodes: string[]\n  ): string[] {\n    return this.distinct(\n      productCodes.flatMap(\n        (productCode) => nodeIdsByProductCodeMap.get(productCode) || []\n      )\n    );\n  }\n\n  /**\n   * Returns an Observable producing an array of scene node ids corresponding to the specified product codes in the currently loaded scene.\n   * @param productCodes The product codes.\n   * @returns An Observable producing an array of scene node ids corresponding to the specified product codes in the currently loaded scene.\n   */\n  public lookupNodeIds(productCodes: string[]): Observable<string[]> {\n    return this.nodeIdsByProductCodeMap$.pipe(\n      map((nodeIdsByProductCodeMap) =>\n        this._lookupNodeIds(nodeIdsByProductCodeMap, productCodes)\n      )\n    );\n  }\n\n  /**\n   * Returns an array of scene node ids corresponding to the specified product codes in the currently loaded scene.\n   * Returns an empty array if the map of node ids by product code has not yet been populated.\n   * For cases where the code must execute synchronously.\n   * @param productCodes The product codes.\n   * @returns An array of scene node ids corresponding to the specified product codes in the currently loaded scene.\n   */\n  public syncLookupNodeIds(productCodes: string[]): string[] {\n    return this._lookupNodeIds(\n      this.nodeIdsByProductCodeMap$.getValue(),\n      productCodes\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './scene-node-to-product-lookup.service';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  ContentType,\n  EpdVisualizationConfig,\n  EpdVisualizationInnerConfig,\n  UsageId,\n  UsageIdConfig,\n  VisualizationInfo,\n} from '@spartacus/epd-visualization/root';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LookupVisualizationsResponse } from '../../connectors/visualization/lookup-visualizations-response';\nimport { VisualizationConnector } from '../../connectors/visualization/visualization.connector';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VisualizationLookupService {\n  constructor(\n    protected epdVisualizationConfig: EpdVisualizationConfig,\n    protected visualizationConnector: VisualizationConnector\n  ) {}\n\n  /**\n   * Finds visualizations by usage id containing product code values.\n   * The search space is limited to folders with a configured usage id value.\n   * @param productCode The product code value to search for.\n   * @returns An Observable producing an VisualizationInfo array containing the set of matching visualizations.\n   */\n  public findMatchingVisualizations(\n    productCode: String\n  ): Observable<VisualizationInfo[]> {\n    const epdVisualization = this.epdVisualizationConfig\n      .epdVisualization as EpdVisualizationInnerConfig;\n    const usageIdConfig = epdVisualization.usageIds as UsageIdConfig;\n    const productUsageId = usageIdConfig.productUsageId;\n    const folderUsageId = usageIdConfig.folderUsageId;\n\n    const usage: UsageId = {\n      name: productUsageId.name as string,\n      keys: [\n        {\n          name: productUsageId.keyName as string,\n          value: productCode,\n        },\n      ],\n    };\n\n    return this.visualizationConnector\n      .lookupVisualization(usage, folderUsageId)\n      .pipe(\n        map((data: LookupVisualizationsResponse) =>\n          (data.visualizations as VisualizationInfo[]).filter(\n            (item: any) =>\n              item.contentType === ContentType.Model3D ||\n              item.contentType === ContentType.Drawing2D\n          )\n        )\n      );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './visualization-lookup.service';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './scene-node-to-product-lookup/index';\nexport * from './visualization-lookup/index';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { SceneConnector, VisualizationConnector } from './connectors';\nimport { SceneNodeToProductLookupService } from './services/scene-node-to-product-lookup/scene-node-to-product-lookup.service';\nimport { VisualizationLookupService } from './services/visualization-lookup/visualization-lookup.service';\n\n@NgModule({\n  providers: [\n    SceneConnector,\n    VisualizationConnector,\n    SceneNodeToProductLookupService,\n    VisualizationLookupService,\n  ],\n})\nexport class EpdVisualizationCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './connectors/index';\nexport * from './services/index';\nexport * from './epd-visualization-core.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.SceneAdapter","i1.VisualizationAdapter","i2.SceneConnector","i2.VisualizationConnector"],"mappings":"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"}