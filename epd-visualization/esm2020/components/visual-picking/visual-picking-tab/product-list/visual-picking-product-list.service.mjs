/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { EventEmitter, Injectable } from '@angular/core';
import { combineLatest, Subject } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay, switchMap, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/core";
import * as i3 from "../product-filter/visual-picking-product-filter.service";
import * as i4 from "@spartacus/epd-visualization/root";
export class VisualPickingProductListService {
    constructor(currentProductService, productReferenceService, visualPickingProductFilterService, epdVisualizationConfig) {
        this.currentProductService = currentProductService;
        this.productReferenceService = productReferenceService;
        this.visualPickingProductFilterService = visualPickingProductFilterService;
        this.epdVisualizationConfig = epdVisualizationConfig;
        this.DEFAULT_ITEMS_PER_SLIDE = 7;
        this.currentProduct$ = this.currentProductService
            .getProduct()
            .pipe(filter((product) => !!product && !!product.code), map((product) => product), distinctUntilChanged((p1, p2) => p1.code === p2.code));
        this.productReferences$ = new Subject();
        this.activeSlideStartIndex = 0;
        this.itemsPerSlide = this.DEFAULT_ITEMS_PER_SLIDE;
        this.selectedProductCodesChange = new EventEmitter();
        this.filteredItems$ = this.getVisualPickingProductListItems(this.getFilteredProductReferences(), this.selectedProductCodesChange).pipe(shareReplay());
    }
    /**
     * Initializes the service.
     */
    initialize() {
        this.getFilteredProductReferencesSubscription =
            this.getFilteredProductReferences().subscribe(() => {
                this.activeSlideStartIndex = 0;
            });
        this.filteredItemsSubscription = this.filteredItems$.subscribe((items) => {
            const firstSelectedItemIndex = items.findIndex((item) => item.selected);
            if (firstSelectedItemIndex !== -1) {
                this.activeSlideStartIndex =
                    firstSelectedItemIndex -
                        (firstSelectedItemIndex % this.itemsPerSlide);
            }
        });
        this.selectedProductCodes = [];
        this.productReferencesSubscription = this._getProductReferences().subscribe(this.productReferences$);
    }
    ngOnDestroy() {
        this.getFilteredProductReferencesSubscription?.unsubscribe();
        this.filteredItemsSubscription?.unsubscribe();
        this.productReferencesSubscription?.unsubscribe();
    }
    get productReferenceType() {
        const epdVisualization = this.epdVisualizationConfig
            .epdVisualization;
        const visualPickingConfig = epdVisualization.visualPicking;
        return visualPickingConfig.productReferenceType;
    }
    /**
     * Returns an Observable that produces the spare part product references for the current product.
     * @returns An Observable that produces the spare part product references for the current product.
     */
    getProductReferences() {
        return this.productReferences$;
    }
    _getProductReferences() {
        return this.currentProduct$.pipe(tap((product) => this.productReferenceService.loadProductReferences(product.code, this.productReferenceType)), switchMap((product) => this.productReferenceService.getProductReferences(product.code, this.productReferenceType)), filter((productReferences) => productReferences !== undefined), distinctUntilChanged((x, y) => JSON.stringify(x) === JSON.stringify(y)));
    }
    /**
     * Returns an Observable that produces a filtered array of spare part product references for the current product.
     * Filtering is performed by the VisualPickingProductFilterService.
     * @returns An Observable that produces a filtered array of spare part product references for the current product.
     */
    getFilteredProductReferences() {
        return this.visualPickingProductFilterService
            .getFilteredProducts(this.getProductReferences())
            .pipe(shareReplay());
    }
    set selectedProductCodes(selectedProductCodes) {
        this._selectedProductCodes = selectedProductCodes;
        this.selectedProductCodesChange.next(selectedProductCodes);
    }
    get selectedProductCodes() {
        return this._selectedProductCodes;
    }
    /**
     * Used to create the list item model data for the visual picking product list.
     * Returns an observable containing an array of VisualPickingProductListItem objects created by combining the latest values from
     * an Observable producing an array of product references and
     * an Observable producing an array of selected product codes.
     * The VisualPickingProductListItem model object combines a ProductReference for a spare part and the selected state of the list item.
     * @param productReferences$ An Observable producing the array of ProductReference values to map.
     * @param selectedProductCodes$ An Observable producing the array of selected product codes.
     * @returns An Observable producing an array of VisualPickingProductListItem values.
     */
    getVisualPickingProductListItems(productReferences$, selectedProductCodes$) {
        return combineLatest([productReferences$, selectedProductCodes$]).pipe(filter(([productReferences, selectedProductCodes]) => !!productReferences && !!selectedProductCodes), map(([productReferences, selectedProductCodes]) => {
            return productReferences
                .filter((productReference) => !!productReference.target && !!productReference.target.code)
                .map((productReference) => {
                const product = productReference.target;
                const productCode = product.code;
                const selected = selectedProductCodes.indexOf(productCode) !== -1;
                return {
                    product,
                    selected,
                };
            });
        }));
    }
}
VisualPickingProductListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: VisualPickingProductListService, deps: [{ token: i1.CurrentProductService }, { token: i2.ProductReferenceService }, { token: i3.VisualPickingProductFilterService }, { token: i4.EpdVisualizationConfig }], target: i0.ɵɵFactoryTarget.Injectable });
VisualPickingProductListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: VisualPickingProductListService, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: VisualPickingProductListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'any',
                }]
        }], ctorParameters: function () { return [{ type: i1.CurrentProductService }, { type: i2.ProductReferenceService }, { type: i3.VisualPickingProductFilterService }, { type: i4.EpdVisualizationConfig }]; } });
//# sourceMappingURL=data:application/json;base64,