/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { ICON_TYPE } from '@spartacus/storefront';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@spartacus/storefront";
/**
 * Generic in-memory paged list component that can be used to render arbitrary items in
 * a vertical orientation.
 * Previous/next buttons as well as indicator-buttons can used to navigate the slides (pages).
 *
 * To allow for flexible rendering of items, the rendering is delegated to the
 * given `template` and `headerTemplate`.
 */
export class PagedListComponent {
    constructor(el) {
        this.el = el;
        /**
         * The maximum number of items per slide
         */
        this.itemsPerSlide = 10;
        /**
         * Indicates whether the visual indicators are used.
         */
        this.hideIndicators = false;
        this.indicatorIcon = ICON_TYPE.CIRCLE;
        this.previousIcon = ICON_TYPE.CARET_LEFT;
        this.nextIcon = ICON_TYPE.CARET_RIGHT;
        this.activeSlideStartIndex = 0;
        this.activeSlideStartIndexChange = new EventEmitter();
    }
    setActiveSlideStartIndex(activeSlideStartIndex) {
        this.activeSlideStartIndex = activeSlideStartIndex;
        this.activeSlideStartIndexChange.emit(activeSlideStartIndex);
    }
    ngOnInit() {
        if (!this.headerTemplate) {
            console.error('No template reference provided to render the header for the `cx-epd-visualization-paged-list`');
            return;
        }
        if (!this.template) {
            console.error('No template reference provided to render the items for the `cx-epd-visualization-paged-list`');
            return;
        }
    }
}
PagedListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: PagedListComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
PagedListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: PagedListComponent, selector: "cx-epd-visualization-paged-list", inputs: { title: "title", items: "items", headerTemplate: "headerTemplate", template: "template", itemsPerSlide: "itemsPerSlide", hideIndicators: "hideIndicators", indicatorIcon: "indicatorIcon", previousIcon: "previousIcon", nextIcon: "nextIcon", activeSlideStartIndex: "activeSlideStartIndex" }, outputs: { activeSlideStartIndexChange: "activeSlideStartIndexChange" }, ngImport: i0, template: "<ng-container *ngIf=\"items?.length > 0 && itemsPerSlide\">\n  <h3 *ngIf=\"title\">{{ title }}</h3>\n\n  <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n\n  <div class=\"list-panel\">\n    <div class=\"slides\">\n      <ng-container *ngFor=\"let _ of items; let i = index\">\n        <div\n          class=\"slide\"\n          *ngIf=\"i % itemsPerSlide === 0\"\n          [class.active]=\"i === activeSlideStartIndex\"\n        >\n          <ng-container\n            *ngFor=\"\n              let item of items | slice: i:i + itemsPerSlide;\n              let j = index\n            \"\n          >\n            <div\n              *ngIf=\"item as data\"\n              class=\"item\"\n              [class.active]=\"i === activeSlideStartIndex\"\n            >\n              <ng-container\n                *ngTemplateOutlet=\"\n                  template;\n                  context: {\n                    item: data,\n                    active: i === activeSlideStartIndex\n                  }\n                \"\n              ></ng-container>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <div\n    *ngIf=\"!hideIndicators && itemsPerSlide < items.length\"\n    class=\"indicators\"\n  >\n    <button\n      *ngIf=\"itemsPerSlide < items.length\"\n      class=\"previous\"\n      (click)=\"setActiveSlideStartIndex(activeSlideStartIndex - itemsPerSlide)\"\n      [disabled]=\"activeSlideStartIndex === 0\"\n    >\n      <cx-icon [type]=\"previousIcon\"></cx-icon>\n    </button>\n\n    <ng-container *ngFor=\"let _ of items; let i = index\">\n      <button\n        *ngIf=\"i % itemsPerSlide === 0\"\n        (click)=\"setActiveSlideStartIndex(i)\"\n        [disabled]=\"i === activeSlideStartIndex\"\n        class=\"slide-indicator\"\n      >\n        <cx-icon [type]=\"indicatorIcon\"></cx-icon>\n      </button>\n    </ng-container>\n\n    <button\n      *ngIf=\"itemsPerSlide < items.length\"\n      class=\"next\"\n      (click)=\"setActiveSlideStartIndex(activeSlideStartIndex + itemsPerSlide)\"\n      [disabled]=\"activeSlideStartIndex > items.length - itemsPerSlide - 1\"\n    >\n      <cx-icon [type]=\"nextIcon\"></cx-icon>\n    </button>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "pipe", type: i1.SlicePipe, name: "slice" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: PagedListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-epd-visualization-paged-list', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"items?.length > 0 && itemsPerSlide\">\n  <h3 *ngIf=\"title\">{{ title }}</h3>\n\n  <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n\n  <div class=\"list-panel\">\n    <div class=\"slides\">\n      <ng-container *ngFor=\"let _ of items; let i = index\">\n        <div\n          class=\"slide\"\n          *ngIf=\"i % itemsPerSlide === 0\"\n          [class.active]=\"i === activeSlideStartIndex\"\n        >\n          <ng-container\n            *ngFor=\"\n              let item of items | slice: i:i + itemsPerSlide;\n              let j = index\n            \"\n          >\n            <div\n              *ngIf=\"item as data\"\n              class=\"item\"\n              [class.active]=\"i === activeSlideStartIndex\"\n            >\n              <ng-container\n                *ngTemplateOutlet=\"\n                  template;\n                  context: {\n                    item: data,\n                    active: i === activeSlideStartIndex\n                  }\n                \"\n              ></ng-container>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <div\n    *ngIf=\"!hideIndicators && itemsPerSlide < items.length\"\n    class=\"indicators\"\n  >\n    <button\n      *ngIf=\"itemsPerSlide < items.length\"\n      class=\"previous\"\n      (click)=\"setActiveSlideStartIndex(activeSlideStartIndex - itemsPerSlide)\"\n      [disabled]=\"activeSlideStartIndex === 0\"\n    >\n      <cx-icon [type]=\"previousIcon\"></cx-icon>\n    </button>\n\n    <ng-container *ngFor=\"let _ of items; let i = index\">\n      <button\n        *ngIf=\"i % itemsPerSlide === 0\"\n        (click)=\"setActiveSlideStartIndex(i)\"\n        [disabled]=\"i === activeSlideStartIndex\"\n        class=\"slide-indicator\"\n      >\n        <cx-icon [type]=\"indicatorIcon\"></cx-icon>\n      </button>\n    </ng-container>\n\n    <button\n      *ngIf=\"itemsPerSlide < items.length\"\n      class=\"next\"\n      (click)=\"setActiveSlideStartIndex(activeSlideStartIndex + itemsPerSlide)\"\n      [disabled]=\"activeSlideStartIndex > items.length - itemsPerSlide - 1\"\n    >\n      <cx-icon [type]=\"nextIcon\"></cx-icon>\n    </button>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { title: [{
                type: Input
            }], items: [{
                type: Input
            }], headerTemplate: [{
                type: Input
            }], template: [{
                type: Input
            }], itemsPerSlide: [{
                type: Input
            }], hideIndicators: [{
                type: Input
            }], indicatorIcon: [{
                type: Input
            }], previousIcon: [{
                type: Input
            }], nextIcon: [{
                type: Input
            }], activeSlideStartIndex: [{
                type: Input
            }], activeSlideStartIndexChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,