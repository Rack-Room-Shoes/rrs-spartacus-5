import { __decorate } from "tslib";
/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, Effect, ofType } from '@ngrx/effects';
import { merge, of } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import { AuthActions } from '../../../auth/user-auth/store/actions';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { bufferDebounceTime } from '../../../util/rxjs/buffer-debounce-time';
import { withdrawOn } from '../../../util/rxjs/withdraw-on';
import { ProductActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/product/product.connector";
export class ProductEffects {
    constructor(actions$, productConnector) {
        this.actions$ = actions$;
        this.productConnector = productConnector;
        // we want to cancel all ongoing requests when currency or language changes,
        this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));
        this.loadProduct$ = createEffect(() => ({ scheduler, debounce = 0 } = {}) => this.actions$.pipe(ofType(ProductActions.LOAD_PRODUCT), map((action) => ({
            code: action.payload,
            scope: action.meta.scope,
        })), 
        // we are grouping all load actions that happens at the same time
        // to optimize loading and pass them all to productConnector.getMany
        bufferDebounceTime(debounce, scheduler), mergeMap((products) => merge(...this.productConnector
            .getMany(products)
            .map(this.productLoadEffect))), withdrawOn(this.contextChange$)));
        this.clearProductPrice$ = this.actions$.pipe(ofType(AuthActions.LOGOUT, AuthActions.LOGIN), map(() => new ProductActions.ClearProductPrice()));
    }
    productLoadEffect(productLoad) {
        return (productLoad.data$?.pipe(map((data) => new ProductActions.LoadProductSuccess({ code: productLoad.code, ...data }, productLoad.scope)), catchError((error) => {
            return of(new ProductActions.LoadProductFail(productLoad.code, normalizeHttpError(error), productLoad.scope));
        })) ??
            of(new ProductActions.LoadProductFail(productLoad.code, 'Scoped product data does not exist', productLoad.scope)));
    }
}
ProductEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ProductEffects, deps: [{ token: i1.Actions }, { token: i2.ProductConnector }], target: i0.ɵɵFactoryTarget.Injectable });
ProductEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ProductEffects });
__decorate([
    Effect()
], ProductEffects.prototype, "clearProductPrice$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ProductEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.ProductConnector }]; }, propDecorators: { clearProductPrice$: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC5lZmZlY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9wcm9kdWN0L3N0b3JlL2VmZmVjdHMvcHJvZHVjdC5lZmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBVyxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0RSxPQUFPLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDcEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRzVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUdsRCxNQUFNLE9BQU8sY0FBYztJQTBFekIsWUFDVSxRQUFpQixFQUNqQixnQkFBa0M7UUFEbEMsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBM0U1Qyw0RUFBNEU7UUFDcEUsbUJBQWMsR0FBdUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQzdELE1BQU0sQ0FDSixrQkFBa0IsQ0FBQyxlQUFlLEVBQ2xDLGtCQUFrQixDQUFDLGVBQWUsQ0FDbkMsQ0FDRixDQUFDO1FBRUYsaUJBQVksR0FBRyxZQUFZLENBQ3pCLEdBQUcsRUFBRSxDQUNILENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFFL0IsRUFBRSxDQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixNQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxFQUNuQyxHQUFHLENBQUMsQ0FBQyxNQUFrQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTztZQUNwQixLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLO1NBQ3pCLENBQUMsQ0FBQztRQUNILGlFQUFpRTtRQUNqRSxvRUFBb0U7UUFDcEUsa0JBQWtCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxFQUN2QyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUNwQixLQUFLLENBQ0gsR0FBRyxJQUFJLENBQUMsZ0JBQWdCO2FBQ3JCLE9BQU8sQ0FBQyxRQUFRLENBQUM7YUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUMvQixDQUNGLEVBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FDaEMsQ0FDTixDQUFDO1FBcUNGLHVCQUFrQixHQUFpRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDbkYsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUM3QyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxjQUFjLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUNsRCxDQUFDO0lBS0MsQ0FBQztJQTNDSSxpQkFBaUIsQ0FDdkIsV0FBOEI7UUFJOUIsT0FBTyxDQUNMLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUNyQixHQUFHLENBQ0QsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNQLElBQUksY0FBYyxDQUFDLGtCQUFrQixDQUNuQyxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLEVBQ25DLFdBQVcsQ0FBQyxLQUFLLENBQ2xCLENBQ0osRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNuQixPQUFPLEVBQUUsQ0FDUCxJQUFJLGNBQWMsQ0FBQyxlQUFlLENBQ2hDLFdBQVcsQ0FBQyxJQUFJLEVBQ2hCLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxFQUN6QixXQUFXLENBQUMsS0FBSyxDQUNsQixDQUNGLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSDtZQUNELEVBQUUsQ0FDQSxJQUFJLGNBQWMsQ0FBQyxlQUFlLENBQ2hDLFdBQVcsQ0FBQyxJQUFJLEVBQ2hCLG9DQUFvQyxFQUNwQyxXQUFXLENBQUMsS0FBSyxDQUNsQixDQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7OzJHQWxFVSxjQUFjOytHQUFkLGNBQWM7QUFxRXpCO0lBREMsTUFBTSxFQUFFOzBEQUlQOzJGQXhFUyxjQUFjO2tCQUQxQixVQUFVOzZIQXNFVCxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMiBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25zLCBjcmVhdGVFZmZlY3QsIEVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBdXRoQWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2F1dGgvdXNlci1hdXRoL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHsgU2l0ZUNvbnRleHRBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vc2l0ZS1jb250ZXh0L3N0b3JlL2FjdGlvbnMvaW5kZXgnO1xuaW1wb3J0IHsgbm9ybWFsaXplSHR0cEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9ub3JtYWxpemUtaHR0cC1lcnJvcic7XG5pbXBvcnQgeyBidWZmZXJEZWJvdW5jZVRpbWUgfSBmcm9tICcuLi8uLi8uLi91dGlsL3J4anMvYnVmZmVyLWRlYm91bmNlLXRpbWUnO1xuaW1wb3J0IHsgd2l0aGRyYXdPbiB9IGZyb20gJy4uLy4uLy4uL3V0aWwvcnhqcy93aXRoZHJhdy1vbic7XG5pbXBvcnQgeyBQcm9kdWN0Q29ubmVjdG9yIH0gZnJvbSAnLi4vLi4vY29ubmVjdG9ycy9wcm9kdWN0L3Byb2R1Y3QuY29ubmVjdG9yJztcbmltcG9ydCB7IFNjb3BlZFByb2R1Y3REYXRhIH0gZnJvbSAnLi4vLi4vY29ubmVjdG9ycy9wcm9kdWN0L3Njb3BlZC1wcm9kdWN0LWRhdGEnO1xuaW1wb3J0IHsgUHJvZHVjdEFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByb2R1Y3RFZmZlY3RzIHtcbiAgLy8gd2Ugd2FudCB0byBjYW5jZWwgYWxsIG9uZ29pbmcgcmVxdWVzdHMgd2hlbiBjdXJyZW5jeSBvciBsYW5ndWFnZSBjaGFuZ2VzLFxuICBwcml2YXRlIGNvbnRleHRDaGFuZ2UkOiBPYnNlcnZhYmxlPEFjdGlvbj4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXG4gICAgb2ZUeXBlKFxuICAgICAgU2l0ZUNvbnRleHRBY3Rpb25zLkNVUlJFTkNZX0NIQU5HRSxcbiAgICAgIFNpdGVDb250ZXh0QWN0aW9ucy5MQU5HVUFHRV9DSEFOR0VcbiAgICApXG4gICk7XG5cbiAgbG9hZFByb2R1Y3QkID0gY3JlYXRlRWZmZWN0KFxuICAgICgpID0+XG4gICAgICAoeyBzY2hlZHVsZXIsIGRlYm91bmNlID0gMCB9ID0ge30pOiBPYnNlcnZhYmxlPFxuICAgICAgICBQcm9kdWN0QWN0aW9ucy5Mb2FkUHJvZHVjdFN1Y2Nlc3MgfCBQcm9kdWN0QWN0aW9ucy5Mb2FkUHJvZHVjdEZhaWxcbiAgICAgID4gPT5cbiAgICAgICAgdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgICAgICAgIG9mVHlwZShQcm9kdWN0QWN0aW9ucy5MT0FEX1BST0RVQ1QpLFxuICAgICAgICAgIG1hcCgoYWN0aW9uOiBQcm9kdWN0QWN0aW9ucy5Mb2FkUHJvZHVjdCkgPT4gKHtcbiAgICAgICAgICAgIGNvZGU6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgc2NvcGU6IGFjdGlvbi5tZXRhLnNjb3BlLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgICAvLyB3ZSBhcmUgZ3JvdXBpbmcgYWxsIGxvYWQgYWN0aW9ucyB0aGF0IGhhcHBlbnMgYXQgdGhlIHNhbWUgdGltZVxuICAgICAgICAgIC8vIHRvIG9wdGltaXplIGxvYWRpbmcgYW5kIHBhc3MgdGhlbSBhbGwgdG8gcHJvZHVjdENvbm5lY3Rvci5nZXRNYW55XG4gICAgICAgICAgYnVmZmVyRGVib3VuY2VUaW1lKGRlYm91bmNlLCBzY2hlZHVsZXIpLFxuICAgICAgICAgIG1lcmdlTWFwKChwcm9kdWN0cykgPT5cbiAgICAgICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgICAuLi50aGlzLnByb2R1Y3RDb25uZWN0b3JcbiAgICAgICAgICAgICAgICAuZ2V0TWFueShwcm9kdWN0cylcbiAgICAgICAgICAgICAgICAubWFwKHRoaXMucHJvZHVjdExvYWRFZmZlY3QpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3aXRoZHJhd09uKHRoaXMuY29udGV4dENoYW5nZSQpXG4gICAgICAgIClcbiAgKTtcblxuICBwcml2YXRlIHByb2R1Y3RMb2FkRWZmZWN0KFxuICAgIHByb2R1Y3RMb2FkOiBTY29wZWRQcm9kdWN0RGF0YVxuICApOiBPYnNlcnZhYmxlPFxuICAgIFByb2R1Y3RBY3Rpb25zLkxvYWRQcm9kdWN0U3VjY2VzcyB8IFByb2R1Y3RBY3Rpb25zLkxvYWRQcm9kdWN0RmFpbFxuICA+IHtcbiAgICByZXR1cm4gKFxuICAgICAgcHJvZHVjdExvYWQuZGF0YSQ/LnBpcGUoXG4gICAgICAgIG1hcChcbiAgICAgICAgICAoZGF0YSkgPT5cbiAgICAgICAgICAgIG5ldyBQcm9kdWN0QWN0aW9ucy5Mb2FkUHJvZHVjdFN1Y2Nlc3MoXG4gICAgICAgICAgICAgIHsgY29kZTogcHJvZHVjdExvYWQuY29kZSwgLi4uZGF0YSB9LFxuICAgICAgICAgICAgICBwcm9kdWN0TG9hZC5zY29wZVxuICAgICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgIHJldHVybiBvZihcbiAgICAgICAgICAgIG5ldyBQcm9kdWN0QWN0aW9ucy5Mb2FkUHJvZHVjdEZhaWwoXG4gICAgICAgICAgICAgIHByb2R1Y3RMb2FkLmNvZGUsXG4gICAgICAgICAgICAgIG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvciksXG4gICAgICAgICAgICAgIHByb2R1Y3RMb2FkLnNjb3BlXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICkgPz9cbiAgICAgIG9mKFxuICAgICAgICBuZXcgUHJvZHVjdEFjdGlvbnMuTG9hZFByb2R1Y3RGYWlsKFxuICAgICAgICAgIHByb2R1Y3RMb2FkLmNvZGUsXG4gICAgICAgICAgJ1Njb3BlZCBwcm9kdWN0IGRhdGEgZG9lcyBub3QgZXhpc3QnLFxuICAgICAgICAgIHByb2R1Y3RMb2FkLnNjb3BlXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgQEVmZmVjdCgpXG4gIGNsZWFyUHJvZHVjdFByaWNlJDogT2JzZXJ2YWJsZTxQcm9kdWN0QWN0aW9ucy5DbGVhclByb2R1Y3RQcmljZT4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXG4gICAgb2ZUeXBlKEF1dGhBY3Rpb25zLkxPR09VVCwgQXV0aEFjdGlvbnMuTE9HSU4pLFxuICAgIG1hcCgoKSA9PiBuZXcgUHJvZHVjdEFjdGlvbnMuQ2xlYXJQcm9kdWN0UHJpY2UoKSlcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxuICAgIHByaXZhdGUgcHJvZHVjdENvbm5lY3RvcjogUHJvZHVjdENvbm5lY3RvclxuICApIHt9XG59XG4iXX0=