{"version":3,"file":"spartacus-asm-root.mjs","sources":["../../../feature-libs/asm/root/asm-constants.ts","../../../feature-libs/asm/root/services/asm-enabler.service.ts","../../../feature-libs/asm/root/asm-loader.module.ts","../../../feature-libs/asm/root/services/asm-auth-storage.service.ts","../../../feature-libs/asm/root/services/csagent-auth.service.ts","../../../feature-libs/asm/root/services/asm-auth-http-header.service.ts","../../../feature-libs/asm/root/services/asm-auth.service.ts","../../../feature-libs/asm/root/asm-root.module.ts","../../../feature-libs/asm/root/feature-name.ts","../../../feature-libs/asm/root/services/index.ts","../../../feature-libs/asm/root/public_api.ts","../../../feature-libs/asm/root/spartacus-asm-root.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FeatureModulesService, WindowRef } from '@spartacus/core';\nimport { LaunchDialogService, LAUNCH_CALLER } from '@spartacus/storefront';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService,\n    protected featureModules: FeatureModulesService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return !!params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    if (this.winRef.localStorage) {\n      return (\n        this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) ===\n        'true'\n      );\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.featureModules\n      .resolveFeature('asm')\n      .subscribe(() => this.launchDialogService.launch(LAUNCH_CALLER.ASM));\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '@spartacus/storefront';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { AuthStorageService, AuthToken } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Indicates if auth token is for regular user or CS Agent.\n */\nexport enum TokenTarget {\n  CSAgent = 'CSAgent',\n  User = 'User',\n}\n\n/**\n * With AsmAuthStorageService apart from storing the token we also need to store\n * information for which user is the token (regular user or CS Agent).\n *\n * Overrides `AuthStorageService`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthStorageService extends AuthStorageService {\n  protected _tokenTarget$: Observable<TokenTarget> =\n    new BehaviorSubject<TokenTarget>(TokenTarget.User);\n\n  /**\n   * When CS Agent logs in during regular user session we store the regular\n   * user token to restore the session after CS Agent logout.\n   *\n   * This supports in-store use case when CS Agent want's to quickly help\n   * customer and then give an option to customer to continue the process.\n   */\n  protected emulatedUserToken?: AuthToken;\n\n  /**\n   * Get target user for current auth token.\n   *\n   * @return observable with TokenTarget\n   */\n  getTokenTarget(): Observable<TokenTarget> {\n    return this._tokenTarget$;\n  }\n\n  /**\n   * Set new token target.\n   *\n   * @param tokenTarget\n   */\n  setTokenTarget(tokenTarget: TokenTarget): void {\n    (this._tokenTarget$ as BehaviorSubject<TokenTarget>).next(tokenTarget);\n  }\n\n  /**\n   * Get token for previously user session, when it was interrupted by CS agent login.\n   *\n   * @return previously logged in user token.\n   */\n  getEmulatedUserToken(): AuthToken | undefined {\n    return this.emulatedUserToken;\n  }\n\n  /**\n   * Save user token on CS agent login.\n   *\n   * @param token\n   */\n  setEmulatedUserToken(token: AuthToken): void {\n    this.emulatedUserToken = token;\n  }\n\n  /**\n   * Change token target to CS Agent.\n   */\n  switchTokenTargetToCSAgent(): void {\n    (this._tokenTarget$ as BehaviorSubject<TokenTarget>).next(\n      TokenTarget.CSAgent\n    );\n  }\n\n  /**\n   * Change token target to user.\n   */\n  switchTokenTargetToUser(): void {\n    (this._tokenTarget$ as BehaviorSubject<TokenTarget>).next(TokenTarget.User);\n  }\n\n  /**\n   * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.\n   * Only available solution is to drop session we could restore, to avoid account hijack.\n   */\n  clearEmulatedUserToken(): void {\n    this.emulatedUserToken = undefined;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  AuthActions,\n  AuthService,\n  AuthToken,\n  OAuthLibWrapperService,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n  UserIdService,\n} from '@spartacus/core';\n\nimport { UserProfileFacade } from '@spartacus/user/profile/root';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AsmAuthStorageService, TokenTarget } from './asm-auth-storage.service';\n\n/**\n * Auth service for CS agent. Useful to login/logout agent, start emulation\n * or get information about the status of emulation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CsAgentAuthService {\n  constructor(\n    protected authService: AuthService,\n    protected authStorageService: AsmAuthStorageService,\n    protected userIdService: UserIdService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected store: Store,\n    protected userProfileFacade: UserProfileFacade\n  ) {}\n\n  /**\n   * Loads access token for a customer support agent.\n   * @param userId\n   * @param password\n   */\n  async authorizeCustomerSupportAgent(\n    userId: string,\n    password: string\n  ): Promise<void> {\n    let userToken: AuthToken | undefined;\n    this.authStorageService\n      .getToken()\n      .subscribe((token) => (userToken = token))\n      .unsubscribe();\n\n    this.authStorageService.switchTokenTargetToCSAgent();\n    try {\n      await this.oAuthLibWrapperService.authorizeWithPasswordFlow(\n        userId,\n        password\n      );\n      // Start emulation for currently logged in user\n      let customerId: string | undefined;\n      this.userProfileFacade\n        .get()\n        .subscribe((user) => (customerId = user?.customerId))\n        .unsubscribe();\n      this.store.dispatch(new AuthActions.Logout());\n\n      if (customerId !== undefined && userToken !== undefined) {\n        // OCC specific user id handling. Customize when implementing different backend\n        this.userIdService.setUserId(customerId);\n        this.authStorageService.setEmulatedUserToken(userToken);\n        this.store.dispatch(new AuthActions.Login());\n      } else {\n        // When we can't get the customerId just end all current sessions\n        this.userIdService.setUserId(OCC_USER_ID_ANONYMOUS);\n        this.authStorageService.clearEmulatedUserToken();\n      }\n    } catch {\n      this.authStorageService.switchTokenTargetToUser();\n    }\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stopped by calling logout().\n   * @param customerId\n   */\n  public startCustomerEmulationSession(customerId: string): void {\n    this.authStorageService.clearEmulatedUserToken();\n\n    // OCC specific user id handling. Customize when implementing different backend\n    this.store.dispatch(new AuthActions.Logout());\n    this.userIdService.setUserId(customerId);\n    this.store.dispatch(new AuthActions.Login());\n  }\n\n  /**\n   * Check if CS agent is currently logged in.\n   *\n   * @returns observable emitting true when CS agent is logged in or false when not.\n   */\n  public isCustomerSupportAgentLoggedIn(): Observable<boolean> {\n    return combineLatest([\n      this.authStorageService.getToken(),\n      this.authStorageService.getTokenTarget(),\n    ]).pipe(\n      map(([token, tokenTarget]) =>\n        Boolean(token?.access_token && tokenTarget === TokenTarget.CSAgent)\n      )\n    );\n  }\n\n  /**\n   * Utility function to determine if customer is emulated.\n   *\n   * @returns observable emitting true when there is active emulation session or false when not.\n   */\n  public isCustomerEmulated(): Observable<boolean> {\n    return this.userIdService.isEmulated();\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  public getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    // TODO(#8248): Create new loading state outside of store\n    return of(false);\n  }\n\n  /**\n   * Logout a customer support agent.\n   */\n  async logoutCustomerSupportAgent(): Promise<void> {\n    const emulatedToken = this.authStorageService.getEmulatedUserToken();\n\n    let isCustomerEmulated;\n    this.userIdService\n      .isEmulated()\n      .subscribe((emulated) => (isCustomerEmulated = emulated))\n      .unsubscribe();\n\n    await this.oAuthLibWrapperService.revokeAndLogout();\n\n    this.store.dispatch({ type: '[Auth] Logout Customer Support Agent' });\n    this.authStorageService.setTokenTarget(TokenTarget.User);\n\n    if (isCustomerEmulated && emulatedToken) {\n      this.store.dispatch(new AuthActions.Logout());\n      this.authStorageService.setToken(emulatedToken);\n      this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n      this.authStorageService.clearEmulatedUserToken();\n      this.store.dispatch(new AuthActions.Login());\n    } else {\n      this.authService.logout();\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  AuthHttpHeaderService,\n  AuthRedirectService,\n  AuthService,\n  AuthStorageService,\n  AuthToken,\n  GlobalMessageService,\n  GlobalMessageType,\n  InterceptorUtil,\n  OAuthLibWrapperService,\n  OccEndpointsService,\n  RoutingService,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '@spartacus/core';\nimport { take } from 'rxjs/operators';\nimport { CsAgentAuthService } from './csagent-auth.service';\n\n/**\n * Overrides `AuthHttpHeaderService` to handle asm calls as well (not only OCC)\n * in cases of normal user session and on customer emulation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthHttpHeaderService extends AuthHttpHeaderService {\n  constructor(\n    protected authService: AuthService,\n    protected authStorageService: AuthStorageService,\n    protected csAgentAuthService: CsAgentAuthService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService,\n    protected occEndpointsService: OccEndpointsService,\n    protected authRedirectService: AuthRedirectService\n  ) {\n    super(\n      authService,\n      authStorageService,\n      oAuthLibWrapperService,\n      routingService,\n      occEndpointsService,\n      globalMessageService,\n      authRedirectService\n    );\n  }\n\n  /**\n   * Checks if the authorization header should be added to the request\n   *\n   *  @override\n   */\n  public shouldAddAuthorizationHeader(request: HttpRequest<any>): boolean {\n    return (\n      super.shouldAddAuthorizationHeader(request) ||\n      this.isCSAgentTokenRequest(request)\n    );\n  }\n\n  /**\n   * @override\n   *\n   * Checks if particular request should be handled by this service.\n   */\n  public shouldCatchError(request: HttpRequest<any>): boolean {\n    return (\n      super.shouldCatchError(request) || this.isCSAgentTokenRequest(request)\n    );\n  }\n\n  /**\n   * @override\n   *\n   * Adds `Authorization` header to occ and CS agent requests.\n   * For CS agent requests also removes the `cx-use-csagent-token` header (to avoid problems with CORS).\n   */\n  public alterRequest(\n    request: HttpRequest<any>,\n    token?: AuthToken\n  ): HttpRequest<any> {\n    const hasAuthorizationHeader = !!this.getAuthorizationHeader(request);\n    const isCSAgentRequest = this.isCSAgentTokenRequest(request);\n\n    let req = super.alterRequest(request, token);\n\n    if (!hasAuthorizationHeader && isCSAgentRequest) {\n      req = request.clone({\n        setHeaders: {\n          ...this.createAuthorizationHeader(token),\n        },\n      });\n      return InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        req\n      );\n    }\n    return req;\n  }\n\n  protected isCSAgentTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestWithCSAgentToken = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestWithCSAgentToken);\n  }\n\n  /**\n   * @override\n   *\n   * On backend errors indicating expired `refresh_token` we need to logout\n   * currently logged in user and CS agent.\n   */\n  public handleExpiredRefreshToken(): void {\n    this.csAgentAuthService\n      .isCustomerSupportAgentLoggedIn()\n      .pipe(take(1))\n      .subscribe((csAgentLoggedIn) => {\n        if (csAgentLoggedIn) {\n          this.authService.setLogoutProgress(true);\n          this.csAgentAuthService.logoutCustomerSupportAgent();\n          this.globalMessageService.add(\n            {\n              key: 'asm.csagentTokenExpired',\n            },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        } else {\n          super.handleExpiredRefreshToken();\n        }\n      });\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  AuthActions,\n  AuthRedirectService,\n  AuthService,\n  AuthToken,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthLibWrapperService,\n  RoutingService,\n  StateWithClientAuth,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, from, Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmAuthStorageService, TokenTarget } from './asm-auth-storage.service';\n\n/**\n * Version of AuthService that is working for both user na CS agent.\n * Overrides AuthService when ASM module is enabled.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService extends AuthService {\n  constructor(\n    protected store: Store<StateWithClientAuth>,\n    protected userIdService: UserIdService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected authStorageService: AsmAuthStorageService,\n    protected authRedirectService: AuthRedirectService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {\n    super(\n      store,\n      userIdService,\n      oAuthLibWrapperService,\n      authStorageService,\n      authRedirectService,\n      routingService\n    );\n  }\n\n  protected canUserLogin(): boolean {\n    let tokenTarget: TokenTarget | undefined;\n    let token: AuthToken | undefined;\n\n    this.authStorageService\n      .getToken()\n      .subscribe((tok) => (token = tok))\n      .unsubscribe();\n    this.authStorageService\n      .getTokenTarget()\n      .subscribe((tokTarget) => (tokenTarget = tokTarget))\n      .unsubscribe();\n    return !(\n      Boolean(token?.access_token) && tokenTarget === TokenTarget.CSAgent\n    );\n  }\n\n  protected warnAboutLoggedCSAgent(): void {\n    this.globalMessageService.add(\n      {\n        key: 'asm.auth.agentLoggedInError',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  /**\n   * Loads a new user token with Resource Owner Password Flow when CS agent is not logged in.\n   * @param userId\n   * @param password\n   */\n  async loginWithCredentials(userId: string, password: string): Promise<void> {\n    if (this.canUserLogin()) {\n      await super.loginWithCredentials(userId, password);\n    } else {\n      this.warnAboutLoggedCSAgent();\n    }\n  }\n\n  /**\n   * Initialize Implicit/Authorization Code flow by redirecting to OAuth server when CS agent is not logged in.\n   */\n  loginWithRedirect(): boolean {\n    if (this.canUserLogin()) {\n      super.loginWithRedirect();\n      return true;\n    } else {\n      this.warnAboutLoggedCSAgent();\n      return false;\n    }\n  }\n\n  /**\n   * Revokes tokens and clears state for logged user (tokens, userId).\n   * To perform logout it is best to use `logout` method. Use this method with caution.\n   */\n  coreLogout(): Promise<any> {\n    return this.userIdService\n      .isEmulated()\n      .pipe(\n        take(1),\n        switchMap((isEmulated) => {\n          if (isEmulated) {\n            this.authStorageService.clearEmulatedUserToken();\n            this.userIdService.clearUserId();\n            this.store.dispatch(new AuthActions.Logout());\n            return of(true);\n          } else {\n            return from(super.coreLogout());\n          }\n        })\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns `true` if user is logged in or being emulated.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return combineLatest([\n      this.authStorageService.getToken(),\n      this.userIdService.isEmulated(),\n      this.authStorageService.getTokenTarget(),\n    ]).pipe(\n      map(\n        ([token, isEmulated, tokenTarget]) =>\n          Boolean(token?.access_token) &&\n          (tokenTarget === TokenTarget.User ||\n            (tokenTarget === TokenTarget.CSAgent && isEmulated))\n      )\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n  AuthHttpHeaderService,\n  AuthService,\n  AuthStorageService,\n} from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmAuthHttpHeaderService } from './services/asm-auth-http-header.service';\nimport { AsmAuthStorageService } from './services/asm-auth-storage.service';\nimport { AsmAuthService } from './services/asm-auth.service';\n\n@NgModule({\n  imports: [AsmLoaderModule],\n  providers: [\n    {\n      provide: AuthStorageService,\n      useExisting: AsmAuthStorageService,\n    },\n    {\n      provide: AuthService,\n      useExisting: AsmAuthService,\n    },\n    {\n      provide: AuthHttpHeaderService,\n      useExisting: AsmAuthHttpHeaderService,\n    },\n  ],\n})\nexport class AsmRootModule {}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const ASM_FEATURE = 'asm';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './asm-auth-http-header.service';\nexport * from './asm-auth-storage.service';\nexport * from './asm-auth.service';\nexport * from './asm-enabler.service';\nexport * from './csagent-auth.service';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './asm-constants';\nexport * from './asm-loader.module';\nexport * from './asm-root.module';\nexport * from './feature-name';\nexport * from './services/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i2","i1","i2.AsmAuthStorageService","i3","i2.CsAgentAuthService","i3.AsmAuthStorageService"],"mappings":"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"}