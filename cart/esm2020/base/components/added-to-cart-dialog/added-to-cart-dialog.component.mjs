/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, HostListener, } from '@angular/core';
import { UntypedFormControl, UntypedFormGroup } from '@angular/forms';
import { PromotionLocation, } from '@spartacus/cart/base/root';
import { ICON_TYPE, } from '@spartacus/storefront';
import { Subscription } from 'rxjs';
import { filter, map, shareReplay, startWith, switchMap, switchMapTo, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/cart/base/root";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@spartacus/core";
import * as i4 from "@angular/common";
import * as i5 from "../cart-shared/cart-item/cart-item.component";
import * as i6 from "@angular/router";
export class AddedToCartDialogComponent {
    constructor(activeCartFacade, launchDialogService, routingService, el) {
        this.activeCartFacade = activeCartFacade;
        this.launchDialogService = launchDialogService;
        this.routingService = routingService;
        this.el = el;
        this.iconTypes = ICON_TYPE;
        this.cart$ = this.activeCartFacade.getActive();
        this.loaded$ = this.activeCartFacade.isStable();
        this.promotionLocation = PromotionLocation.ActiveCart;
        this.quantity = 0;
        this.form = new UntypedFormGroup({});
        this.focusConfig = {
            trap: true,
            block: true,
            autofocus: 'button',
            focusOnEscape: true,
        };
        this.subscription = new Subscription();
    }
    handleClick(event) {
        if (event.target.tagName === this.el.nativeElement.tagName) {
            this.dismissModal('Cross click');
        }
    }
    ngOnInit() {
        this.subscription.add(this.launchDialogService.data$.subscribe((dialogData) => {
            this.init(dialogData.productCode, dialogData.quantity, dialogData.numberOfEntriesBeforeAdd);
        }));
        this.subscription.add(this.routingService
            .getRouterState()
            .pipe(filter((state) => !!state.nextState))
            .subscribe(() => this.dismissModal('dismiss')));
    }
    /**
     * Returns an observable formControl with the quantity of the cartEntry,
     * but also updates the entry in case of a changed value.
     * The quantity can be set to zero in order to remove the entry.
     */
    getQuantityControl() {
        if (!this.quantityControl$) {
            this.quantityControl$ = this.entry$.pipe(filter((e) => !!e), map((entry) => this.getQuantityFormControl(entry)), switchMap(() => this.form.valueChanges.pipe(
            // eslint-disable-next-line import/no-deprecated
            startWith(null), tap((valueChange) => {
                if (valueChange) {
                    this.activeCartFacade.updateEntry(valueChange.entryNumber, valueChange.quantity);
                    if (valueChange.quantity === 0) {
                        this.dismissModal('Removed');
                    }
                }
                else {
                    this.form.markAsPristine();
                }
            }))), map(() => this.form.get('quantity')), shareReplay({ bufferSize: 1, refCount: true }));
        }
        return this.quantityControl$;
    }
    init(productCode, quantity, numberOfEntriesBeforeAdd) {
        // Display last entry for new product code. This always corresponds to
        // our new item, independently of whether merging occured or not
        this.entry$ = this.activeCartFacade.getLastEntry(productCode);
        this.quantity = quantity;
        this.addedEntryWasMerged$ = this.getAddedEntryWasMerged(numberOfEntriesBeforeAdd);
    }
    getAddedEntryWasMerged(numberOfEntriesBeforeAdd) {
        return this.loaded$.pipe(filter((loaded) => loaded), switchMapTo(this.activeCartFacade.getEntries()), map((entries) => entries.length === numberOfEntriesBeforeAdd));
    }
    /**
     * Adds quantity and entryNumber form controls to the FormGroup.
     * Returns quantity form control.
     */
    getQuantityFormControl(entry) {
        if (!this.form.get('quantity')) {
            const quantity = new UntypedFormControl(entry?.quantity, {
                updateOn: 'blur',
            });
            this.form.addControl('quantity', quantity);
            const entryNumber = new UntypedFormControl(entry?.entryNumber);
            this.form.addControl('entryNumber', entryNumber);
        }
        else {
            // set the real quantity added to cart
            this.form.get('quantity')?.setValue(entry?.quantity);
        }
        return this.form.get('quantity');
    }
    dismissModal(reason) {
        this.launchDialogService.closeDialog(reason);
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
}
AddedToCartDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: AddedToCartDialogComponent, deps: [{ token: i1.ActiveCartFacade }, { token: i2.LaunchDialogService }, { token: i3.RoutingService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
AddedToCartDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: AddedToCartDialogComponent, selector: "cx-added-to-cart-dialog", host: { listeners: { "click": "handleClick($event)" } }, ngImport: i0, template: "<div\n  class=\"cx-modal-container\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"dismissModal('Escape pressed')\"\n>\n  <div class=\"cx-modal-content\">\n    <!-- Modal Header -->\n    <ng-container *ngIf=\"loaded$ | async; else loading\">\n      <div class=\"cx-dialog-header modal-header\">\n        <div class=\"cx-dialog-title modal-title\">\n          {{\n            (addedEntryWasMerged$ | async)\n              ? ('addToCart.itemsIncrementedInYourCart' | cxTranslate)\n              : ('addToCart.itemsAddedToYourCart' | cxTranslate)\n          }}\n        </div>\n        <button\n          type=\"button\"\n          class=\"close\"\n          attr.aria-label=\"{{ 'addToCart.closeModal' | cxTranslate }}\"\n          (click)=\"dismissModal('Cross click')\"\n        >\n          <span aria-hidden=\"true\">\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n          </span>\n        </button>\n      </div>\n\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body modal-body\" *ngIf=\"entry$ | async as entry\">\n        <div class=\"cx-dialog-row\">\n          <div class=\"cx-dialog-item col-sm-12 col-md-6\">\n            <cx-cart-item\n              [item]=\"entry\"\n              [compact]=\"true\"\n              [quantityControl]=\"getQuantityControl() | async\"\n              [promotionLocation]=\"promotionLocation\"\n            ></cx-cart-item>\n          </div>\n          <!-- Separator -->\n          <div\n            class=\"\n              cx-dialog-separator\n              col-sm-12\n              d-xs-block d-sm-block d-md-none\n            \"\n          ></div>\n          <!-- Total container -->\n          <div\n            class=\"cx-dialog-actions col-sm-12 col-md-6\"\n            *ngIf=\"cart$ | async as cart\"\n          >\n            <div class=\"cx-dialog-total\">\n              <div>\n                {{\n                  'cartItems.cartTotal'\n                    | cxTranslate: { count: cart.deliveryItemsQuantity }\n                }}\n              </div>\n\n              <div>{{ cart.subTotal?.formattedValue }}</div>\n            </div>\n\n            <!-- Promotions -->\n            <div class=\"cx-dialog-promotions\">\n              <cx-promotions\n                [promotions]=\"\n                  (cart.appliedOrderPromotions || []).concat(\n                    cart.potentialOrderPromotions || []\n                  )\n                \"\n              ></cx-promotions>\n            </div>\n\n            <!-- Actions -->\n            <div class=\"cx-dialog-buttons\">\n              <a\n                [class.disabled]=\"form.dirty\"\n                [routerLink]=\"{ cxRoute: 'cart' } | cxUrl\"\n                (click)=\"dismissModal('View Cart click')\"\n                class=\"btn btn-primary\"\n                autofocus\n                >{{ 'addToCart.viewCart' | cxTranslate }}</a\n              >\n              <a\n                [class.disabled]=\"form.dirty\"\n                [routerLink]=\"{ cxRoute: 'checkout' } | cxUrl\"\n                (click)=\"dismissModal('Proceed To Checkout click')\"\n                class=\"btn btn-secondary\"\n                >{{ 'addToCart.proceedToCheckout' | cxTranslate }}</a\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #loading>\n      <div class=\"cx-dialog-header modal-header\">\n        <div class=\"cx-dialog-title modal-title\">\n          {{ 'addToCart.updatingCart' | cxTranslate }}\n        </div>\n        <button\n          type=\"button\"\n          class=\"close\"\n          [attr.aria-label]=\"'common.close' | cxTranslate\"\n          (click)=\"dismissModal('Cross click')\"\n        >\n          <span aria-hidden=\"true\">\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n          </span>\n        </button>\n      </div>\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body modal-body\">\n        <div class=\"cx-dialog-row\">\n          <div class=\"col-sm-12\"><cx-spinner></cx-spinner></div>\n        </div>\n      </div>\n    </ng-template>\n\n    <!-- For screen reader purposes (not visual)-->\n    <div class=\"cx-visually-hidden\" aria-live=\"polite\" aria-atomic=\"true\">\n      {{\n        (addedEntryWasMerged$ | async)\n          ? ('addToCart.itemsIncrementedInYourCart' | cxTranslate)\n          : ('addToCart.itemsAddedToYourCart' | cxTranslate)\n      }}\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.CartItemComponent, selector: "cx-cart-item", inputs: ["compact", "item", "readonly", "quantityControl", "promotionLocation", "options"] }, { kind: "directive", type: i6.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i2.SpinnerComponent, selector: "cx-spinner" }, { kind: "component", type: i2.PromotionsComponent, selector: "cx-promotions", inputs: ["promotions"] }, { kind: "component", type: i2.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i2.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.UrlPipe, name: "cxUrl" }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: AddedToCartDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-added-to-cart-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  class=\"cx-modal-container\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"dismissModal('Escape pressed')\"\n>\n  <div class=\"cx-modal-content\">\n    <!-- Modal Header -->\n    <ng-container *ngIf=\"loaded$ | async; else loading\">\n      <div class=\"cx-dialog-header modal-header\">\n        <div class=\"cx-dialog-title modal-title\">\n          {{\n            (addedEntryWasMerged$ | async)\n              ? ('addToCart.itemsIncrementedInYourCart' | cxTranslate)\n              : ('addToCart.itemsAddedToYourCart' | cxTranslate)\n          }}\n        </div>\n        <button\n          type=\"button\"\n          class=\"close\"\n          attr.aria-label=\"{{ 'addToCart.closeModal' | cxTranslate }}\"\n          (click)=\"dismissModal('Cross click')\"\n        >\n          <span aria-hidden=\"true\">\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n          </span>\n        </button>\n      </div>\n\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body modal-body\" *ngIf=\"entry$ | async as entry\">\n        <div class=\"cx-dialog-row\">\n          <div class=\"cx-dialog-item col-sm-12 col-md-6\">\n            <cx-cart-item\n              [item]=\"entry\"\n              [compact]=\"true\"\n              [quantityControl]=\"getQuantityControl() | async\"\n              [promotionLocation]=\"promotionLocation\"\n            ></cx-cart-item>\n          </div>\n          <!-- Separator -->\n          <div\n            class=\"\n              cx-dialog-separator\n              col-sm-12\n              d-xs-block d-sm-block d-md-none\n            \"\n          ></div>\n          <!-- Total container -->\n          <div\n            class=\"cx-dialog-actions col-sm-12 col-md-6\"\n            *ngIf=\"cart$ | async as cart\"\n          >\n            <div class=\"cx-dialog-total\">\n              <div>\n                {{\n                  'cartItems.cartTotal'\n                    | cxTranslate: { count: cart.deliveryItemsQuantity }\n                }}\n              </div>\n\n              <div>{{ cart.subTotal?.formattedValue }}</div>\n            </div>\n\n            <!-- Promotions -->\n            <div class=\"cx-dialog-promotions\">\n              <cx-promotions\n                [promotions]=\"\n                  (cart.appliedOrderPromotions || []).concat(\n                    cart.potentialOrderPromotions || []\n                  )\n                \"\n              ></cx-promotions>\n            </div>\n\n            <!-- Actions -->\n            <div class=\"cx-dialog-buttons\">\n              <a\n                [class.disabled]=\"form.dirty\"\n                [routerLink]=\"{ cxRoute: 'cart' } | cxUrl\"\n                (click)=\"dismissModal('View Cart click')\"\n                class=\"btn btn-primary\"\n                autofocus\n                >{{ 'addToCart.viewCart' | cxTranslate }}</a\n              >\n              <a\n                [class.disabled]=\"form.dirty\"\n                [routerLink]=\"{ cxRoute: 'checkout' } | cxUrl\"\n                (click)=\"dismissModal('Proceed To Checkout click')\"\n                class=\"btn btn-secondary\"\n                >{{ 'addToCart.proceedToCheckout' | cxTranslate }}</a\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #loading>\n      <div class=\"cx-dialog-header modal-header\">\n        <div class=\"cx-dialog-title modal-title\">\n          {{ 'addToCart.updatingCart' | cxTranslate }}\n        </div>\n        <button\n          type=\"button\"\n          class=\"close\"\n          [attr.aria-label]=\"'common.close' | cxTranslate\"\n          (click)=\"dismissModal('Cross click')\"\n        >\n          <span aria-hidden=\"true\">\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n          </span>\n        </button>\n      </div>\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body modal-body\">\n        <div class=\"cx-dialog-row\">\n          <div class=\"col-sm-12\"><cx-spinner></cx-spinner></div>\n        </div>\n      </div>\n    </ng-template>\n\n    <!-- For screen reader purposes (not visual)-->\n    <div class=\"cx-visually-hidden\" aria-live=\"polite\" aria-atomic=\"true\">\n      {{\n        (addedEntryWasMerged$ | async)\n          ? ('addToCart.itemsIncrementedInYourCart' | cxTranslate)\n          : ('addToCart.itemsAddedToYourCart' | cxTranslate)\n      }}\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ActiveCartFacade }, { type: i2.LaunchDialogService }, { type: i3.RoutingService }, { type: i0.ElementRef }]; }, propDecorators: { handleClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,