import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { CartActions } from '@spartacus/cart/base/core';
import { GlobalMessageType, normalizeHttpError, } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, map, switchMap, withLatestFrom } from 'rxjs/operators';
import { SavedCartActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/saved-cart.connector";
import * as i3 from "@spartacus/cart/base/root";
import * as i4 from "@spartacus/core";
import * as i5 from "@spartacus/cart/base/core";
export class SavedCartEffects {
    constructor(actions$, savedCartConnector, activeCartService, globalMessageService, cartConnector) {
        this.actions$ = actions$;
        this.savedCartConnector = savedCartConnector;
        this.activeCartService = activeCartService;
        this.globalMessageService = globalMessageService;
        this.cartConnector = cartConnector;
        this.loadSavedCart$ = createEffect(() => this.actions$.pipe(ofType(SavedCartActions.LOAD_SAVED_CART), map((action) => action.payload), switchMap(({ userId, cartId }) => this.savedCartConnector.get(userId, cartId).pipe(switchMap((savedCart) => {
            return [
                new CartActions.LoadCartSuccess({
                    userId,
                    cartId,
                    cart: savedCart,
                }),
                new SavedCartActions.LoadSavedCartSuccess({ userId, cartId }),
            ];
        }), catchError((error) => of(new SavedCartActions.LoadSavedCartFail({
            userId,
            cartId,
            error: normalizeHttpError(error),
        })))))));
        this.loadSavedCarts$ = createEffect(() => this.actions$.pipe(ofType(SavedCartActions.LOAD_SAVED_CARTS), map((action) => action.payload), switchMap(({ userId }) => this.savedCartConnector.getList(userId).pipe(switchMap((savedCarts) => {
            return [
                new CartActions.LoadCartsSuccess(savedCarts),
                new SavedCartActions.LoadSavedCartsSuccess({ userId }),
            ];
        }), catchError((error) => of(new SavedCartActions.LoadSavedCartsFail({
            userId,
            error: normalizeHttpError(error),
        })))))));
        this.restoreSavedCart$ = createEffect(() => this.actions$.pipe(ofType(SavedCartActions.RESTORE_SAVED_CART), map((action) => action.payload), withLatestFrom(this.activeCartService.getActive()), switchMap(([{ userId, cartId }, activeCart]) => {
            const actions = [];
            if ((activeCart?.entries ?? []).length > 0) {
                if (activeCart.code) {
                    /**
                     * Instead of calling the SaveCartAction, we are calling the edit saved cart
                     * because we do not want to clear the state when we swap carts between active and saved cart
                     */
                    actions.push(new SavedCartActions.EditSavedCart({
                        userId,
                        cartId: activeCart.code,
                        saveCartName: '',
                        saveCartDescription: '',
                    }));
                }
            }
            return this.savedCartConnector.restoreSavedCart(userId, cartId).pipe(switchMap((savedCart) => {
                this.globalMessageService.add({
                    key: (activeCart?.entries ?? []).length > 0
                        ? 'savedCartList.swapCartWithActiveCart'
                        : 'savedCartList.swapCartNoActiveCart',
                    params: {
                        cartName: cartId,
                        previousCartName: activeCart.code,
                    },
                }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
                return [
                    ...actions,
                    new CartActions.SetActiveCartId(cartId),
                    new CartActions.LoadCartSuccess({
                        userId,
                        cartId,
                        cart: savedCart,
                    }),
                    new SavedCartActions.RestoreSavedCartSuccess({ userId, cartId }),
                ];
            }), catchError((error) => of(new SavedCartActions.RestoreSavedCartFail({
                userId,
                cartId,
                error: normalizeHttpError(error),
            }))));
        })));
        this.saveCart$ = createEffect(() => this.actions$.pipe(ofType(SavedCartActions.SAVE_CART), map((action) => action.payload), switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {
            return this.cartConnector
                .save(userId, cartId, saveCartName, saveCartDescription)
                .pipe(switchMap((savedCart) => {
                return [
                    new CartActions.ClearCartState(),
                    new CartActions.LoadCartSuccess({
                        userId,
                        cartId,
                        cart: savedCart,
                    }),
                    new SavedCartActions.SaveCartSuccess({
                        userId,
                        cartId,
                        saveCartName,
                        saveCartDescription,
                    }),
                ];
            }), catchError((error) => of(new SavedCartActions.SaveCartFail({
                userId,
                cartId,
                saveCartName,
                saveCartDescription,
                error: normalizeHttpError(error),
            }))));
        })));
        this.editSavedCart$ = createEffect(() => this.actions$.pipe(ofType(SavedCartActions.EDIT_SAVED_CART), map((action) => action.payload), switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {
            return this.cartConnector
                .save(userId, cartId, saveCartName, saveCartDescription)
                .pipe(switchMap((savedCart) => {
                return [
                    new CartActions.LoadCartSuccess({
                        userId,
                        cartId,
                        cart: savedCart,
                    }),
                    new SavedCartActions.EditSavedCartSuccess({
                        userId,
                        cartId,
                        saveCartName,
                        saveCartDescription,
                    }),
                ];
            }), catchError((error) => of(new SavedCartActions.EditSavedCartFail({
                userId,
                cartId,
                saveCartName,
                saveCartDescription,
                error: normalizeHttpError(error),
            }))));
        })));
        this.cloneSavedCart$ = createEffect(() => this.actions$.pipe(ofType(SavedCartActions.CLONE_SAVED_CART), map((action) => action.payload), switchMap(({ userId, cartId, saveCartName }) => {
            return this.savedCartConnector
                .cloneSavedCart(userId, cartId, saveCartName)
                .pipe(switchMap((_) => {
                return [
                    new SavedCartActions.CloneSavedCartSuccess({
                        userId,
                        cartId,
                        saveCartName,
                    }),
                    new SavedCartActions.RestoreSavedCart({
                        userId,
                        cartId,
                    }),
                    new SavedCartActions.LoadSavedCarts({ userId }),
                ];
            }), catchError((error) => of(new SavedCartActions.CloneSavedCartFail({
                userId,
                cartId,
                saveCartName,
                error: normalizeHttpError(error),
            }))));
        })));
    }
}
SavedCartEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SavedCartEffects, deps: [{ token: i1.Actions }, { token: i2.SavedCartConnector }, { token: i3.ActiveCartFacade }, { token: i4.GlobalMessageService }, { token: i5.CartConnector }], target: i0.ɵɵFactoryTarget.Injectable });
SavedCartEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SavedCartEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SavedCartEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.SavedCartConnector }, { type: i3.ActiveCartFacade }, { type: i4.GlobalMessageService }, { type: i5.CartConnector }]; } });
//# sourceMappingURL=data:application/json;base64,