/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { PROCESS_FEATURE, StateUtils, } from '@spartacus/core';
import { ORDER_APPROVAL_ENTITIES, ORDER_APPROVAL_LIST, ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID, } from '../order-approval-state';
export const LOAD_ORDER_APPROVAL = '[OrderApproval] Load OrderApproval Data';
export const LOAD_ORDER_APPROVAL_FAIL = '[OrderApproval] Load OrderApproval Data Fail';
export const LOAD_ORDER_APPROVAL_SUCCESS = '[OrderApproval] Load OrderApproval Data Success';
export const LOAD_ORDER_APPROVALS = '[OrderApproval] Load OrderApprovals';
export const LOAD_ORDER_APPROVALS_FAIL = '[OrderApproval] Load OrderApprovals Fail';
export const LOAD_ORDER_APPROVALS_SUCCESS = '[OrderApproval] Load OrderApprovals Success';
export const MAKE_DECISION = '[OrderApproval] Make OrderApproval Decision';
export const MAKE_DECISION_FAIL = '[OrderApproval] Make OrderApproval Decision Fail';
export const MAKE_DECISION_SUCCESS = '[OrderApproval] Make OrderApproval Decision Success';
export const MAKE_DECISION_RESET = '[OrderApproval] Make OrderApproval Decision Reset';
export class LoadOrderApproval extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORDER_APPROVAL_ENTITIES, payload.orderApprovalCode);
        this.payload = payload;
        this.type = LOAD_ORDER_APPROVAL;
    }
}
export class LoadOrderApprovalFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORDER_APPROVAL_ENTITIES, payload.orderApprovalCode, payload.error);
        this.payload = payload;
        this.type = LOAD_ORDER_APPROVAL_FAIL;
    }
}
export class LoadOrderApprovalSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORDER_APPROVAL_ENTITIES, Array.isArray(payload)
            ? payload.map((orderApproval) => orderApproval.code ?? '')
            : payload.code ?? '');
        this.payload = payload;
        this.type = LOAD_ORDER_APPROVAL_SUCCESS;
    }
}
export class LoadOrderApprovals extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORDER_APPROVAL_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_ORDER_APPROVALS;
    }
}
export class LoadOrderApprovalsFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORDER_APPROVAL_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);
        this.payload = payload;
        this.type = LOAD_ORDER_APPROVALS_FAIL;
    }
}
export class LoadOrderApprovalsSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORDER_APPROVAL_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_ORDER_APPROVALS_SUCCESS;
    }
}
export class MakeDecision extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID);
        this.payload = payload;
        this.type = MAKE_DECISION;
    }
}
export class MakeDecisionFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID, payload);
        this.payload = payload;
        this.type = MAKE_DECISION_FAIL;
    }
}
export class MakeDecisionSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID);
        this.payload = payload;
        this.type = MAKE_DECISION_SUCCESS;
    }
}
export class MakeDecisionReset extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID);
        this.type = MAKE_DECISION_RESET;
    }
}
//# sourceMappingURL=data:application/json;base64,