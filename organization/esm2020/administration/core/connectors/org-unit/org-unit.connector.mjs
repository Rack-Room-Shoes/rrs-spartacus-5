/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./org-unit.adapter";
export class OrgUnitConnector {
    constructor(adapter) {
        this.adapter = adapter;
    }
    get(userId, orgUnitId) {
        return this.adapter.load(userId, orgUnitId);
    }
    create(userId, orgUnit) {
        return this.adapter.create(userId, orgUnit);
    }
    update(userId, orgUnitId, orgUnit) {
        return this.adapter.update(userId, orgUnitId, orgUnit);
    }
    getList(userId) {
        return this.adapter.loadList(userId);
    }
    getApprovalProcesses(userId) {
        return this.adapter.loadApprovalProcesses(userId);
    }
    getTree(userId) {
        return this.adapter.loadTree(userId);
    }
    getUsers(userId, orgUnitId, roleId, params) {
        return this.adapter.loadUsers(userId, orgUnitId, roleId, params);
    }
    assignRole(userId, orgCustomerId, roleId) {
        return this.adapter.assignRole(userId, orgCustomerId, roleId);
    }
    unassignRole(userId, orgCustomerId, roleId) {
        return this.adapter.unassignRole(userId, orgCustomerId, roleId);
    }
    assignApprover(userId, orgUnitId, orgCustomerId, roleId) {
        return this.adapter.assignApprover(userId, orgUnitId, orgCustomerId, roleId);
    }
    unassignApprover(userId, orgUnitId, orgCustomerId, roleId) {
        return this.adapter.unassignApprover(userId, orgUnitId, orgCustomerId, roleId);
    }
    getAddresses(userId, orgUnitId) {
        return this.adapter.loadAddresses(userId, orgUnitId);
    }
    createAddress(userId, orgUnitId, address) {
        return this.adapter.createAddress(userId, orgUnitId, address);
    }
    updateAddress(userId, orgUnitId, addressId, address) {
        return this.adapter.updateAddress(userId, orgUnitId, addressId, address);
    }
    deleteAddress(userId, orgUnitId, addressId) {
        return this.adapter.deleteAddress(userId, orgUnitId, addressId);
    }
}
OrgUnitConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OrgUnitConnector, deps: [{ token: i1.OrgUnitAdapter }], target: i0.ɵɵFactoryTarget.Injectable });
OrgUnitConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OrgUnitConnector, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OrgUnitConnector, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.OrgUnitAdapter }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnLXVuaXQuY29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlL2Nvbm5lY3RvcnMvb3JnLXVuaXQvb3JnLXVuaXQuY29ubmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFnQjNDLE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsWUFBc0IsT0FBdUI7UUFBdkIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7SUFBRyxDQUFDO0lBRWpELEdBQUcsQ0FBQyxNQUFjLEVBQUUsU0FBaUI7UUFDbkMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFjLEVBQUUsT0FBZ0I7UUFDckMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FDSixNQUFjLEVBQ2QsU0FBaUIsRUFDakIsT0FBZ0I7UUFFaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxPQUFPLENBQUMsTUFBYztRQUNwQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxNQUFjO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsT0FBTyxDQUFDLE1BQWM7UUFDcEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsUUFBUSxDQUNOLE1BQWMsRUFDZCxTQUFpQixFQUNqQixNQUFjLEVBQ2QsTUFBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsVUFBVSxDQUNSLE1BQWMsRUFDZCxhQUFxQixFQUNyQixNQUFjO1FBRWQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxZQUFZLENBQ1YsTUFBYyxFQUNkLGFBQXFCLEVBQ3JCLE1BQWM7UUFFZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELGNBQWMsQ0FDWixNQUFjLEVBQ2QsU0FBaUIsRUFDakIsYUFBcUIsRUFDckIsTUFBYztRQUVkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQ2hDLE1BQU0sRUFDTixTQUFTLEVBQ1QsYUFBYSxFQUNiLE1BQU0sQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQixDQUNkLE1BQWMsRUFDZCxTQUFpQixFQUNqQixhQUFxQixFQUNyQixNQUFjO1FBRWQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUNsQyxNQUFNLEVBQ04sU0FBUyxFQUNULGFBQWEsRUFDYixNQUFNLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFFRCxZQUFZLENBQ1YsTUFBYyxFQUNkLFNBQWlCO1FBRWpCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxhQUFhLENBQ1gsTUFBYyxFQUNkLFNBQWlCLEVBQ2pCLE9BQWdCO1FBRWhCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsYUFBYSxDQUNYLE1BQWMsRUFDZCxTQUFpQixFQUNqQixTQUFpQixFQUNqQixPQUFnQjtRQUVoQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxhQUFhLENBQ1gsTUFBYyxFQUNkLFNBQWlCLEVBQ2pCLFNBQWlCO1FBRWpCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs2R0FsSFUsZ0JBQWdCO2lIQUFoQixnQkFBZ0IsY0FGZixNQUFNOzJGQUVQLGdCQUFnQjtrQkFINUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMiBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBZGRyZXNzLFxuICBCMkJBcHByb3ZhbFByb2Nlc3MsXG4gIEIyQlVuaXQsXG4gIEIyQlVzZXIsXG4gIEVudGl0aWVzTW9kZWwsXG4gIFNlYXJjaENvbmZpZyxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEIyQlVuaXROb2RlIH0gZnJvbSAnLi4vLi4vbW9kZWwvdW5pdC1ub2RlLm1vZGVsJztcbmltcG9ydCB7IE9yZ1VuaXRBZGFwdGVyIH0gZnJvbSAnLi9vcmctdW5pdC5hZGFwdGVyJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE9yZ1VuaXRDb25uZWN0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgYWRhcHRlcjogT3JnVW5pdEFkYXB0ZXIpIHt9XG5cbiAgZ2V0KHVzZXJJZDogc3RyaW5nLCBvcmdVbml0SWQ6IHN0cmluZyk6IE9ic2VydmFibGU8QjJCVW5pdD4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZCh1c2VySWQsIG9yZ1VuaXRJZCk7XG4gIH1cblxuICBjcmVhdGUodXNlcklkOiBzdHJpbmcsIG9yZ1VuaXQ6IEIyQlVuaXQpOiBPYnNlcnZhYmxlPEIyQlVuaXQ+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmNyZWF0ZSh1c2VySWQsIG9yZ1VuaXQpO1xuICB9XG5cbiAgdXBkYXRlKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ1VuaXRJZDogc3RyaW5nLFxuICAgIG9yZ1VuaXQ6IEIyQlVuaXRcbiAgKTogT2JzZXJ2YWJsZTxCMkJVbml0PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci51cGRhdGUodXNlcklkLCBvcmdVbml0SWQsIG9yZ1VuaXQpO1xuICB9XG5cbiAgZ2V0TGlzdCh1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8QjJCVW5pdE5vZGVbXT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZExpc3QodXNlcklkKTtcbiAgfVxuXG4gIGdldEFwcHJvdmFsUHJvY2Vzc2VzKHVzZXJJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCMkJBcHByb3ZhbFByb2Nlc3NbXT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZEFwcHJvdmFsUHJvY2Vzc2VzKHVzZXJJZCk7XG4gIH1cblxuICBnZXRUcmVlKHVzZXJJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCMkJVbml0Tm9kZT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZFRyZWUodXNlcklkKTtcbiAgfVxuXG4gIGdldFVzZXJzKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ1VuaXRJZDogc3RyaW5nLFxuICAgIHJvbGVJZDogc3RyaW5nLFxuICAgIHBhcmFtcz86IFNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8QjJCVXNlcj4+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmxvYWRVc2Vycyh1c2VySWQsIG9yZ1VuaXRJZCwgcm9sZUlkLCBwYXJhbXMpO1xuICB9XG5cbiAgYXNzaWduUm9sZShcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdDdXN0b21lcklkOiBzdHJpbmcsXG4gICAgcm9sZUlkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmFzc2lnblJvbGUodXNlcklkLCBvcmdDdXN0b21lcklkLCByb2xlSWQpO1xuICB9XG5cbiAgdW5hc3NpZ25Sb2xlKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ0N1c3RvbWVySWQ6IHN0cmluZyxcbiAgICByb2xlSWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIudW5hc3NpZ25Sb2xlKHVzZXJJZCwgb3JnQ3VzdG9tZXJJZCwgcm9sZUlkKTtcbiAgfVxuXG4gIGFzc2lnbkFwcHJvdmVyKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ1VuaXRJZDogc3RyaW5nLFxuICAgIG9yZ0N1c3RvbWVySWQ6IHN0cmluZyxcbiAgICByb2xlSWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuYXNzaWduQXBwcm92ZXIoXG4gICAgICB1c2VySWQsXG4gICAgICBvcmdVbml0SWQsXG4gICAgICBvcmdDdXN0b21lcklkLFxuICAgICAgcm9sZUlkXG4gICAgKTtcbiAgfVxuXG4gIHVuYXNzaWduQXBwcm92ZXIoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nLFxuICAgIHJvbGVJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci51bmFzc2lnbkFwcHJvdmVyKFxuICAgICAgdXNlcklkLFxuICAgICAgb3JnVW5pdElkLFxuICAgICAgb3JnQ3VzdG9tZXJJZCxcbiAgICAgIHJvbGVJZFxuICAgICk7XG4gIH1cblxuICBnZXRBZGRyZXNzZXMoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdElkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxFbnRpdGllc01vZGVsPEFkZHJlc3M+PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkQWRkcmVzc2VzKHVzZXJJZCwgb3JnVW5pdElkKTtcbiAgfVxuXG4gIGNyZWF0ZUFkZHJlc3MoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgYWRkcmVzczogQWRkcmVzc1xuICApOiBPYnNlcnZhYmxlPEFkZHJlc3M+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmNyZWF0ZUFkZHJlc3ModXNlcklkLCBvcmdVbml0SWQsIGFkZHJlc3MpO1xuICB9XG5cbiAgdXBkYXRlQWRkcmVzcyhcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdVbml0SWQ6IHN0cmluZyxcbiAgICBhZGRyZXNzSWQ6IHN0cmluZyxcbiAgICBhZGRyZXNzOiBBZGRyZXNzXG4gICk6IE9ic2VydmFibGU8QWRkcmVzcz4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIudXBkYXRlQWRkcmVzcyh1c2VySWQsIG9yZ1VuaXRJZCwgYWRkcmVzc0lkLCBhZGRyZXNzKTtcbiAgfVxuXG4gIGRlbGV0ZUFkZHJlc3MoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgYWRkcmVzc0lkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmRlbGV0ZUFkZHJlc3ModXNlcklkLCBvcmdVbml0SWQsIGFkZHJlc3NJZCk7XG4gIH1cbn1cbiJdfQ==