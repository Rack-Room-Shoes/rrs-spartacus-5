/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { StateUtils, } from '@spartacus/core';
import { BUDGET_ENTITIES, COST_CENTER_ASSIGNED_BUDGETS, COST_CENTER_ENTITIES, COST_CENTER_LIST, } from '../organization-state';
export const LOAD_COST_CENTER = '[CostCenter] Load CostCenter Data';
export const LOAD_COST_CENTER_FAIL = '[CostCenter] Load CostCenter Data Fail';
export const LOAD_COST_CENTER_SUCCESS = '[CostCenter] Load CostCenter Data Success';
export const LOAD_COST_CENTERS = '[CostCenter] Load CostCenters';
export const LOAD_COST_CENTERS_FAIL = '[CostCenter] Load CostCenters Fail';
export const LOAD_COST_CENTERS_SUCCESS = '[CostCenter] Load CostCenters Success';
export const CREATE_COST_CENTER = '[CostCenter] Create CostCenter';
export const CREATE_COST_CENTER_FAIL = '[CostCenter] Create CostCenter Fail';
export const CREATE_COST_CENTER_SUCCESS = '[CostCenter] Create CostCenter Success';
export const UPDATE_COST_CENTER = '[CostCenter] Update CostCenter';
export const UPDATE_COST_CENTER_FAIL = '[CostCenter] Update CostCenter Fail';
export const UPDATE_COST_CENTER_SUCCESS = '[CostCenter] Update CostCenter Success';
export const LOAD_ASSIGNED_BUDGETS = '[CostCenter] Load Budgets';
export const LOAD_ASSIGNED_BUDGETS_SUCCESS = '[CostCenter] Load Budgets success';
export const LOAD_ASSIGNED_BUDGETS_FAIL = '[CostCenter] Load Budgets fail';
export const ASSIGN_BUDGET = '[CostCenter] Assign Budget';
export const ASSIGN_BUDGET_SUCCESS = '[CostCenter] Assign Budget success';
export const ASSIGN_BUDGET_FAIL = '[CostCenter] Assign Budget fail';
export const UNASSIGN_BUDGET = '[CostCenter] Unassign Budget';
export const UNASSIGN_BUDGET_SUCCESS = '[CostCenter] Unassign Budget success';
export const UNASSIGN_BUDGET_FAIL = '[CostCenter] Unassign Budget fail';
export class LoadCostCenter extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(COST_CENTER_ENTITIES, payload.costCenterCode);
        this.payload = payload;
        this.type = LOAD_COST_CENTER;
    }
}
export class LoadCostCenterFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(COST_CENTER_ENTITIES, payload.costCenterCode, payload.error);
        this.payload = payload;
        this.type = LOAD_COST_CENTER_FAIL;
    }
}
export class LoadCostCenterSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COST_CENTER_ENTITIES, Array.isArray(payload)
            ? payload.map((costCenter) => costCenter?.code ?? '')
            : payload?.code ?? '');
        this.payload = payload;
        this.type = LOAD_COST_CENTER_SUCCESS;
    }
}
export class LoadCostCenters extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(COST_CENTER_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_COST_CENTERS;
    }
}
export class LoadCostCentersFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(COST_CENTER_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);
        this.payload = payload;
        this.type = LOAD_COST_CENTERS_FAIL;
    }
}
export class LoadCostCentersSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COST_CENTER_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_COST_CENTERS_SUCCESS;
    }
}
export class CreateCostCenter extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(COST_CENTER_ENTITIES, payload.costCenter.code ?? null);
        this.payload = payload;
        this.type = CREATE_COST_CENTER;
    }
}
export class CreateCostCenterFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(COST_CENTER_ENTITIES, payload.costCenterCode, payload.error);
        this.payload = payload;
        this.type = CREATE_COST_CENTER_FAIL;
    }
}
export class CreateCostCenterSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COST_CENTER_ENTITIES, payload.code ?? null, payload);
        this.payload = payload;
        this.type = CREATE_COST_CENTER_SUCCESS;
    }
}
export class UpdateCostCenter extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(COST_CENTER_ENTITIES, payload.costCenter.code ?? '');
        this.payload = payload;
        this.type = UPDATE_COST_CENTER;
    }
}
export class UpdateCostCenterFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(COST_CENTER_ENTITIES, payload.costCenterCode, payload.error);
        this.payload = payload;
        this.type = UPDATE_COST_CENTER_FAIL;
    }
}
export class UpdateCostCenterSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COST_CENTER_ENTITIES, payload.code ?? '', payload);
        this.payload = payload;
        this.type = UPDATE_COST_CENTER_SUCCESS;
    }
}
export class LoadAssignedBudgets extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(COST_CENTER_ASSIGNED_BUDGETS, StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode));
        this.payload = payload;
        this.type = LOAD_ASSIGNED_BUDGETS;
    }
}
export class LoadAssignedBudgetsFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(COST_CENTER_ASSIGNED_BUDGETS, StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode), payload.error);
        this.payload = payload;
        this.type = LOAD_ASSIGNED_BUDGETS_FAIL;
    }
}
export class LoadAssignedBudgetsSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COST_CENTER_ASSIGNED_BUDGETS, StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode));
        this.payload = payload;
        this.type = LOAD_ASSIGNED_BUDGETS_SUCCESS;
    }
}
export class AssignBudget extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budgetCode);
        this.payload = payload;
        this.type = ASSIGN_BUDGET;
    }
}
export class AssignBudgetFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budgetCode, payload.error);
        this.payload = payload;
        this.type = ASSIGN_BUDGET_FAIL;
    }
}
export class AssignBudgetSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.code, payload);
        this.payload = payload;
        this.type = ASSIGN_BUDGET_SUCCESS;
    }
}
export class UnassignBudget extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budgetCode);
        this.payload = payload;
        this.type = UNASSIGN_BUDGET;
    }
}
export class UnassignBudgetFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budgetCode, payload.error);
        this.payload = payload;
        this.type = UNASSIGN_BUDGET_FAIL;
    }
}
export class UnassignBudgetSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.code, payload);
        this.payload = payload;
        this.type = UNASSIGN_BUDGET_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,