/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { StateUtils } from '@spartacus/core';
import { B2B_USER_APPROVERS, B2B_USER_ENTITIES, B2B_USER_PERMISSIONS, B2B_USER_USER_GROUPS, PERMISSION_ENTITIES, USER_GROUP_ENTITIES, USER_LIST, } from '../organization-state';
export const LOAD_B2B_USER = '[B2BUser] Load B2BUser Data';
export const LOAD_B2B_USER_FAIL = '[B2BUser] Load B2BUser Data Fail';
export const LOAD_B2B_USER_SUCCESS = '[B2BUser] Load B2BUser Data Success';
export const CREATE_B2B_USER = '[B2BUser] Create B2BUser Data';
export const CREATE_B2B_USER_FAIL = '[B2BUser] Create B2BUser Data Fail';
export const CREATE_B2B_USER_SUCCESS = '[B2BUser] Create B2BUser Data Success';
export const UPDATE_B2B_USER = '[B2BUser] Update B2BUser Data';
export const UPDATE_B2B_USER_FAIL = '[B2BUser] Update B2BUser Data Fail';
export const UPDATE_B2B_USER_SUCCESS = '[B2BUser] Update B2BUser Data Success';
export const LOAD_B2B_USERS = '[B2BUser] Load B2BUsers';
export const LOAD_B2B_USERS_FAIL = '[B2BUser] Load B2BUsers Fail';
export const LOAD_B2B_USERS_SUCCESS = '[B2BUser] Load B2BUsers Success';
export const LOAD_B2B_USER_APPROVERS = '[B2BUser] Load B2BUser Approvers';
export const LOAD_B2B_USER_APPROVERS_FAIL = '[B2BUser] Load B2BUser Approvers Fail';
export const LOAD_B2B_USER_APPROVERS_SUCCESS = '[B2BUser] Load B2BUser Approvers Success';
export const ASSIGN_B2B_USER_APPROVER = '[B2BUser] Assign B2BUser Approver';
export const ASSIGN_B2B_USER_APPROVER_FAIL = '[B2BUser] Assign B2BUser Approver Fail';
export const ASSIGN_B2B_USER_APPROVER_SUCCESS = '[B2BUser] Assign B2BUser Approver Success';
export const UNASSIGN_B2B_USER_APPROVER = '[B2BUser] Unassign B2BUser Approver';
export const UNASSIGN_B2B_USER_APPROVER_FAIL = '[B2BUser] Unassign B2BUser Approver Fail';
export const UNASSIGN_B2B_USER_APPROVER_SUCCESS = '[B2BUser] Unassign B2BUser Approver Success';
export const LOAD_B2B_USER_PERMISSIONS = '[B2BUser] Load B2BUser Permissions';
export const LOAD_B2B_USER_PERMISSIONS_FAIL = '[B2BUser] Load B2BUser Permissions Fail';
export const LOAD_B2B_USER_PERMISSIONS_SUCCESS = '[B2BUser] Load B2BUser Permissions Success';
export const ASSIGN_B2B_USER_PERMISSION = '[B2BUser] Assign B2BUser Permission';
export const ASSIGN_B2B_USER_PERMISSION_FAIL = '[B2BUser] Assign B2BUser Permission Fail';
export const ASSIGN_B2B_USER_PERMISSION_SUCCESS = '[B2BUser] Assign B2BUser Permission Success';
export const UNASSIGN_B2B_USER_PERMISSION = '[B2BUser] Unassign B2BUser Permission';
export const UNASSIGN_B2B_USER_PERMISSION_FAIL = '[B2BUser] Unassign B2BUser Permission Fail';
export const UNASSIGN_B2B_USER_PERMISSION_SUCCESS = '[B2BUser] Unassign B2BUser Permission Success';
export const LOAD_B2B_USER_USER_GROUPS = '[B2BUser] Load B2BUser User Groups';
export const LOAD_B2B_USER_USER_GROUPS_FAIL = '[B2BUser] Load B2BUser User Groups Fail';
export const LOAD_B2B_USER_USER_GROUPS_SUCCESS = '[B2BUser] Load B2BUser User Groups Success';
export const ASSIGN_B2B_USER_USER_GROUP = '[B2BUser] Assign B2BUser User Group';
export const ASSIGN_B2B_USER_USER_GROUP_FAIL = '[B2BUser] Assign B2BUser User Group Fail';
export const ASSIGN_B2B_USER_USER_GROUP_SUCCESS = '[B2BUser] Assign B2BUser User Group Success';
export const UNASSIGN_B2B_USER_USER_GROUP = '[B2BUser] Unassign B2BUser User Group';
export const UNASSIGN_B2B_USER_USER_GROUP_FAIL = '[B2BUser] Unassign B2BUser User Group Fail';
export const UNASSIGN_B2B_USER_USER_GROUP_SUCCESS = '[B2BUser] Unassign B2BUser User Group Success';
export class LoadB2BUser extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId);
        this.payload = payload;
        this.type = LOAD_B2B_USER;
    }
}
export class LoadB2BUserFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = LOAD_B2B_USER_FAIL;
    }
}
export class LoadB2BUserSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, Array.isArray(payload)
            ? payload.map((orgUnitCustomer) => orgUnitCustomer?.customerId ?? '')
            : payload?.customerId ?? '');
        this.payload = payload;
        this.type = LOAD_B2B_USER_SUCCESS;
    }
}
export class CreateB2BUser extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomer.customerId ?? null);
        this.payload = payload;
        this.type = CREATE_B2B_USER;
    }
}
export class CreateB2BUserFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = CREATE_B2B_USER_FAIL;
    }
}
export class CreateB2BUserSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.customerId ?? null, payload);
        this.payload = payload;
        this.type = CREATE_B2B_USER_SUCCESS;
    }
}
export class UpdateB2BUser extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomer.customerId ?? '');
        this.payload = payload;
        this.type = UPDATE_B2B_USER;
    }
}
export class UpdateB2BUserFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = UPDATE_B2B_USER_FAIL;
    }
}
export class UpdateB2BUserSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.customerId ?? '', payload);
        this.payload = payload;
        this.type = UPDATE_B2B_USER_SUCCESS;
    }
}
export class LoadB2BUsers extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_B2B_USERS;
    }
}
export class LoadB2BUsersFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);
        this.payload = payload;
        this.type = LOAD_B2B_USERS_FAIL;
    }
}
export class LoadB2BUsersSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_B2B_USERS_SUCCESS;
    }
}
export class LoadB2BUserApprovers extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_APPROVERS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));
        this.payload = payload;
        this.type = LOAD_B2B_USER_APPROVERS;
    }
}
export class LoadB2BUserApproversFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_APPROVERS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId), payload.error);
        this.payload = payload;
        this.type = LOAD_B2B_USER_APPROVERS_FAIL;
    }
}
export class LoadB2BUserApproversSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_APPROVERS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));
        this.payload = payload;
        this.type = LOAD_B2B_USER_APPROVERS_SUCCESS;
    }
}
export class AssignB2BUserApprover extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.approverId);
        this.payload = payload;
        this.type = ASSIGN_B2B_USER_APPROVER;
    }
}
export class AssignB2BUserApproverFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.approverId);
        this.payload = payload;
        this.type = ASSIGN_B2B_USER_APPROVER_FAIL;
    }
}
export class AssignB2BUserApproverSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.approverId, payload);
        this.payload = payload;
        this.type = ASSIGN_B2B_USER_APPROVER_SUCCESS;
    }
}
export class UnassignB2BUserApprover extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.approverId);
        this.payload = payload;
        this.type = UNASSIGN_B2B_USER_APPROVER;
    }
}
export class UnassignB2BUserApproverFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.approverId);
        this.payload = payload;
        this.type = UNASSIGN_B2B_USER_APPROVER_FAIL;
    }
}
export class UnassignB2BUserApproverSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.approverId, payload);
        this.payload = payload;
        this.type = UNASSIGN_B2B_USER_APPROVER_SUCCESS;
    }
}
export class LoadB2BUserPermissions extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));
        this.payload = payload;
        this.type = LOAD_B2B_USER_PERMISSIONS;
    }
}
export class LoadB2BUserPermissionsFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_PERMISSIONS, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = LOAD_B2B_USER_PERMISSIONS_FAIL;
    }
}
export class LoadB2BUserPermissionsSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));
        this.payload = payload;
        this.type = LOAD_B2B_USER_PERMISSIONS_SUCCESS;
    }
}
export class AssignB2BUserPermission extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionId);
        this.payload = payload;
        this.type = ASSIGN_B2B_USER_PERMISSION;
    }
}
export class AssignB2BUserPermissionFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionId, payload.error);
        this.payload = payload;
        this.type = ASSIGN_B2B_USER_PERMISSION_FAIL;
    }
}
export class AssignB2BUserPermissionSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionId, payload);
        this.payload = payload;
        this.type = ASSIGN_B2B_USER_PERMISSION_SUCCESS;
    }
}
export class UnassignB2BUserPermission extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionId);
        this.payload = payload;
        this.type = UNASSIGN_B2B_USER_PERMISSION;
    }
}
export class UnassignB2BUserPermissionFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionId, payload.error);
        this.payload = payload;
        this.type = UNASSIGN_B2B_USER_PERMISSION_FAIL;
    }
}
export class UnassignB2BUserPermissionSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionId, payload);
        this.payload = payload;
        this.type = UNASSIGN_B2B_USER_PERMISSION_SUCCESS;
    }
}
export class LoadB2BUserUserGroups extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_USER_GROUPS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));
        this.payload = payload;
        this.type = LOAD_B2B_USER_USER_GROUPS;
    }
}
export class LoadB2BUserUserGroupsFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_USER_GROUPS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId), payload.error);
        this.payload = payload;
        this.type = LOAD_B2B_USER_USER_GROUPS_FAIL;
    }
}
export class LoadB2BUserUserGroupsSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_USER_GROUPS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));
        this.payload = payload;
        this.type = LOAD_B2B_USER_USER_GROUPS_SUCCESS;
    }
}
export class AssignB2BUserUserGroup extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId);
        this.payload = payload;
        this.type = ASSIGN_B2B_USER_USER_GROUP;
    }
}
export class AssignB2BUserUserGroupFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);
        this.payload = payload;
        this.type = ASSIGN_B2B_USER_USER_GROUP_FAIL;
    }
}
export class AssignB2BUserUserGroupSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = ASSIGN_B2B_USER_USER_GROUP_SUCCESS;
    }
}
export class UnassignB2BUserUserGroup extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId);
        this.payload = payload;
        this.type = UNASSIGN_B2B_USER_USER_GROUP;
    }
}
export class UnassignB2BUserUserGroupFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);
        this.payload = payload;
        this.type = UNASSIGN_B2B_USER_USER_GROUP_FAIL;
    }
}
export class UnassignB2BUserUserGroupSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = UNASSIGN_B2B_USER_USER_GROUP_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,