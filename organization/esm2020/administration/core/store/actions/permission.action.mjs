/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { StateUtils, } from '@spartacus/core';
import { PERMISSION_ENTITIES, PERMISSION_LIST, PERMISSION_TYPES, PERMISSION_TYPES_LIST, } from '../organization-state';
export const LOAD_PERMISSION = '[Permission] Load Permission Data';
export const LOAD_PERMISSION_FAIL = '[Permission] Load Permission Data Fail';
export const LOAD_PERMISSION_SUCCESS = '[Permission] Load Permission Data Success';
export const LOAD_PERMISSIONS = '[Permission] Load Permissions';
export const LOAD_PERMISSIONS_FAIL = '[Permission] Load Permissions Fail';
export const LOAD_PERMISSIONS_SUCCESS = '[Permission] Load Permissions Success';
export const CREATE_PERMISSION = '[Permission] Create Permission';
export const CREATE_PERMISSION_FAIL = '[Permission] Create Permission Fail';
export const CREATE_PERMISSION_SUCCESS = '[Permission] Create Permission Success';
export const UPDATE_PERMISSION = '[Permission] Update Permission';
export const UPDATE_PERMISSION_FAIL = '[Permission] Update Permission Fail';
export const UPDATE_PERMISSION_SUCCESS = '[Permission] Update Permission Success';
export const LOAD_PERMISSION_TYPES = '[Permission Types] Load Permission Types';
export const LOAD_PERMISSION_TYPES_FAIL = '[Permission Types] Load Permission Types Fail';
export const LOAD_PERMISSION_TYPES_SUCCESS = '[Permission Types] Load Permission Types Success';
export class LoadPermission extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionCode);
        this.payload = payload;
        this.type = LOAD_PERMISSION;
    }
}
export class LoadPermissionFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionCode, payload.error);
        this.payload = payload;
        this.type = LOAD_PERMISSION_FAIL;
    }
}
export class LoadPermissionSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, Array.isArray(payload)
            ? payload.map((permission) => permission?.code ?? '')
            : payload?.code ?? '');
        this.payload = payload;
        this.type = LOAD_PERMISSION_SUCCESS;
    }
}
export class LoadPermissions extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PERMISSION_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_PERMISSIONS;
    }
}
export class LoadPermissionsFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PERMISSION_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);
        this.payload = payload;
        this.type = LOAD_PERMISSIONS_FAIL;
    }
}
export class LoadPermissionsSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PERMISSION_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_PERMISSIONS_SUCCESS;
    }
}
export class CreatePermission extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permission.code ?? null);
        this.payload = payload;
        this.type = CREATE_PERMISSION;
    }
}
export class CreatePermissionFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionCode, payload.error);
        this.payload = payload;
        this.type = CREATE_PERMISSION_FAIL;
    }
}
export class CreatePermissionSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.code ?? null, payload);
        this.payload = payload;
        this.type = CREATE_PERMISSION_SUCCESS;
    }
}
export class UpdatePermission extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permission.code ?? '');
        this.payload = payload;
        this.type = UPDATE_PERMISSION;
    }
}
export class UpdatePermissionFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionCode, payload.error);
        this.payload = payload;
        this.type = UPDATE_PERMISSION_FAIL;
    }
}
export class UpdatePermissionSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.code ?? '', payload);
        this.payload = payload;
        this.type = UPDATE_PERMISSION_SUCCESS;
    }
}
export class LoadPermissionTypes extends StateUtils.EntityLoadAction {
    constructor() {
        super(PERMISSION_TYPES_LIST, PERMISSION_TYPES);
        this.type = LOAD_PERMISSION_TYPES;
    }
}
export class LoadPermissionTypesFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PERMISSION_TYPES_LIST, PERMISSION_TYPES, payload.error);
        this.payload = payload;
        this.type = LOAD_PERMISSION_TYPES_FAIL;
    }
}
export class LoadPermissionTypesSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PERMISSION_TYPES_LIST, PERMISSION_TYPES);
        this.payload = payload;
        this.type = LOAD_PERMISSION_TYPES_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,