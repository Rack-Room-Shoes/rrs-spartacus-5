/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { StateUtils, } from '@spartacus/core';
import { ADDRESS_ENTITIES, ADDRESS_LIST, B2B_USER_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES, ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_ASSIGNED_USERS, ORG_UNIT_ENTITIES, ORG_UNIT_NODES, ORG_UNIT_NODE_LIST, ORG_UNIT_TREE, ORG_UNIT_TREE_ENTITY, } from '../organization-state';
export const LOAD_ORG_UNIT = '[B2BUnit] Load B2BUnit Data';
export const LOAD_ORG_UNIT_FAIL = '[B2BUnit] Load B2BUnit Data Fail';
export const LOAD_ORG_UNIT_SUCCESS = '[B2BUnit] Load B2BUnit Data Success';
export const LOAD_UNIT_NODE = '[B2BUnitNode] Load B2BUnitNode Data';
export const LOAD_UNIT_NODE_FAIL = '[B2BUnitNode] Load B2BUnitNode Data Fail';
export const LOAD_UNIT_NODE_SUCCESS = '[B2BUnitNode] Load B2BUnitNode Data Success';
export const LOAD_UNIT_NODES = '[B2BUnitNode] Load B2BUnitNodes';
export const LOAD_UNIT_NODES_FAIL = '[B2BUnitNode] Load B2BUnitNodes Fail';
export const LOAD_UNIT_NODES_SUCCESS = '[B2BUnitNode] Load B2BUnitNodes Success';
export const CREATE_ORG_UNIT = '[B2BUnit] Create B2BUnitNode';
export const CREATE_ORG_UNIT_FAIL = '[B2BUnit] Create B2BUnitNode Fail';
export const CREATE_ORG_UNIT_SUCCESS = '[B2BUnit] Create B2BUnitNode Success';
export const UPDATE_ORG_UNIT = '[B2BUnit] Update B2BUnitNode';
export const UPDATE_ORG_UNIT_FAIL = '[B2BUnit] Update B2BUnitNode Fail';
export const UPDATE_ORG_UNIT_SUCCESS = '[B2BUnit] Update B2BUnitNode Success';
export const LOAD_UNIT_TREE = '[B2BUnitNode] Load Tree';
export const LOAD_UNIT_TREE_FAIL = '[B2BUnitNode] Load Tree Fail';
export const LOAD_UNIT_TREE_SUCCESS = '[B2BUnitNode] Load Tree Success';
export const LOAD_APPROVAL_PROCESSES = '[B2BApprovalProcess] Load Approval Processes';
export const LOAD_APPROVAL_PROCESSES_FAIL = '[B2BApprovalProcess] Load Approval Processes Fail';
export const LOAD_APPROVAL_PROCESSES_SUCCESS = '[B2BApprovalProcess] Load Approval Processes Success';
export const LOAD_ASSIGNED_USERS = '[B2BUnit] Load Users';
export const LOAD_ASSIGNED_USERS_SUCCESS = '[B2BUnit] Load Users success';
export const LOAD_ASSIGNED_USERS_FAIL = '[B2BUnit] Load Users fail';
export const ASSIGN_ROLE = '[B2BUnit] Assign Role';
export const ASSIGN_ROLE_SUCCESS = '[B2BUnit] Assign Role success';
export const ASSIGN_ROLE_FAIL = '[B2BUnit] Assign Role fail';
export const UNASSIGN_ROLE = '[B2BUnit] Unassign Role';
export const UNASSIGN_ROLE_SUCCESS = '[B2BUnit] Unassign Role success';
export const UNASSIGN_ROLE_FAIL = '[B2BUnit] Unassign Role fail';
export const ASSIGN_APPROVER = '[B2BUnit] Assign Approver';
export const ASSIGN_APPROVER_SUCCESS = '[B2BUnit] Assign Approver success';
export const ASSIGN_APPROVER_FAIL = '[B2BUnit] Assign Approver fail';
export const UNASSIGN_APPROVER = '[B2BUnit] Unassign Approver';
export const UNASSIGN_APPROVER_SUCCESS = '[B2BUnit] Unassign Approver success';
export const UNASSIGN_APPROVER_FAIL = '[B2BUnit] Unassign Approver fail';
export const CREATE_ADDRESS = '[B2BUnit] Create address';
export const CREATE_ADDRESS_SUCCESS = '[B2BUnit] Create address success';
export const CREATE_ADDRESS_FAIL = '[B2BUnit] Create address fail';
export const UPDATE_ADDRESS = '[B2BUnit] Update address';
export const UPDATE_ADDRESS_SUCCESS = '[B2BUnit] Update address success';
export const UPDATE_ADDRESS_FAIL = '[B2BUnit] Update address fail';
export const DELETE_ADDRESS = '[B2BUnit] Delete address';
export const DELETE_ADDRESS_SUCCESS = '[B2BUnit] Delete address success';
export const DELETE_ADDRESS_FAIL = '[B2BUnit] Delete address fail';
export const LOAD_ADDRESS_SUCCESS = '[B2BUnit] Load address success';
export const LOAD_ADDRESSES = '[B2BUnit] Load addresses';
export const LOAD_ADDRESSES_SUCCESS = '[B2BUnit] Load addresses success';
export const LOAD_ADDRESSES_FAIL = '[B2BUnit] Load addresses fail';
export const CLEAR_ASSIGNED_USERS = '[B2BUnit] Clear Assigned Users';
export class LoadOrgUnit extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.orgUnitId);
        this.payload = payload;
        this.type = LOAD_ORG_UNIT;
    }
}
export class LoadOrgUnitFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.orgUnitId, payload.error);
        this.payload = payload;
        this.type = LOAD_ORG_UNIT_FAIL;
    }
}
export class LoadOrgUnitSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, Array.isArray(payload)
            ? payload.map((orgUnit) => orgUnit?.uid ?? '')
            : payload?.uid ?? '');
        this.payload = payload;
        this.type = LOAD_ORG_UNIT_SUCCESS;
    }
}
export class LoadOrgUnitNodes extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES);
        this.payload = payload;
        this.type = LOAD_UNIT_NODES;
    }
}
export class LoadOrgUnitNodesFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES, payload.error);
        this.payload = payload;
        this.type = LOAD_UNIT_NODES_FAIL;
    }
}
export class LoadOrgUnitNodesSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES);
        this.payload = payload;
        this.type = LOAD_UNIT_NODES_SUCCESS;
    }
}
export class CreateUnit extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.unit.uid ?? null);
        this.payload = payload;
        this.type = CREATE_ORG_UNIT;
    }
}
export class CreateUnitFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.unitCode, payload.error);
        this.payload = payload;
        this.type = CREATE_ORG_UNIT_FAIL;
    }
}
export class CreateUnitSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.uid ?? null, payload);
        this.payload = payload;
        this.type = CREATE_ORG_UNIT_SUCCESS;
    }
}
export class UpdateUnit extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.unit.uid ?? '');
        this.payload = payload;
        this.type = UPDATE_ORG_UNIT;
    }
}
export class UpdateUnitFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.unitCode, payload.error);
        this.payload = payload;
        this.type = UPDATE_ORG_UNIT_FAIL;
    }
}
export class UpdateUnitSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.uid ?? '', payload);
        this.payload = payload;
        this.type = UPDATE_ORG_UNIT_SUCCESS;
    }
}
export class LoadTree extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE);
        this.payload = payload;
        this.type = LOAD_UNIT_TREE;
    }
}
export class LoadTreeFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE, payload.error);
        this.payload = payload;
        this.type = LOAD_UNIT_TREE_FAIL;
    }
}
export class LoadTreeSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE);
        this.payload = payload;
        this.type = LOAD_UNIT_TREE_SUCCESS;
    }
}
export class LoadApprovalProcesses extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES);
        this.payload = payload;
        this.type = LOAD_APPROVAL_PROCESSES;
    }
}
export class LoadApprovalProcessesFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES, payload.error);
        this.payload = payload;
        this.type = LOAD_APPROVAL_PROCESSES_FAIL;
    }
}
export class LoadApprovalProcessesSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES);
        this.payload = payload;
        this.type = LOAD_APPROVAL_PROCESSES_SUCCESS;
    }
}
export class LoadAssignedUsers extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`));
        this.payload = payload;
        this.type = LOAD_ASSIGNED_USERS;
    }
}
export class ClearAssignedUsers extends StateUtils.EntityRemoveAction {
    constructor(payload) {
        super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`));
        this.payload = payload;
        this.type = CLEAR_ASSIGNED_USERS;
    }
}
export class LoadAssignedUsersFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`), payload.error);
        this.payload = payload;
        this.type = LOAD_ASSIGNED_USERS_FAIL;
    }
}
export class LoadAssignedUsersSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`));
        this.payload = payload;
        this.type = LOAD_ASSIGNED_USERS_SUCCESS;
    }
}
export class AssignRole extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId);
        this.payload = payload;
        this.type = ASSIGN_ROLE;
    }
}
export class AssignRoleFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = ASSIGN_ROLE_FAIL;
    }
}
export class AssignRoleSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = ASSIGN_ROLE_SUCCESS;
    }
}
export class UnassignRole extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId);
        this.payload = payload;
        this.type = UNASSIGN_ROLE;
    }
}
export class UnassignRoleFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = UNASSIGN_ROLE_FAIL;
    }
}
export class UnassignRoleSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = UNASSIGN_ROLE_SUCCESS;
    }
}
export class AssignApprover extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId);
        this.payload = payload;
        this.type = ASSIGN_APPROVER;
    }
}
export class AssignApproverFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = ASSIGN_APPROVER_FAIL;
    }
}
export class AssignApproverSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = ASSIGN_APPROVER_SUCCESS;
    }
}
export class UnassignApprover extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId);
        this.payload = payload;
        this.type = UNASSIGN_APPROVER;
    }
}
export class UnassignApproverFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = UNASSIGN_APPROVER_FAIL;
    }
}
export class UnassignApproverSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = UNASSIGN_APPROVER_SUCCESS;
    }
}
export class CreateAddress extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.address.id ?? null);
        this.payload = payload;
        this.type = CREATE_ADDRESS;
    }
}
export class CreateAddressFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.addressId, payload.error);
        this.payload = payload;
        this.type = CREATE_ADDRESS_FAIL;
    }
}
export class CreateAddressSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.id ?? null, payload);
        this.payload = payload;
        this.type = CREATE_ADDRESS_SUCCESS;
    }
}
export class UpdateAddress extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.address.id ?? '');
        this.payload = payload;
        this.type = UPDATE_ADDRESS;
    }
}
export class UpdateAddressFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.addressId, payload.error);
        this.payload = payload;
        this.type = UPDATE_ADDRESS_FAIL;
    }
}
export class UpdateAddressSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.id ?? '', payload);
        this.payload = payload;
        this.type = UPDATE_ADDRESS_SUCCESS;
    }
}
export class DeleteAddress extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.addressId);
        this.payload = payload;
        this.type = DELETE_ADDRESS;
    }
}
export class DeleteAddressFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.addressId, payload.error);
        this.payload = payload;
        this.type = DELETE_ADDRESS_FAIL;
    }
}
export class DeleteAddressSuccess extends StateUtils.EntityRemoveAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.id ?? '');
        this.payload = payload;
        this.type = DELETE_ADDRESS_SUCCESS;
    }
}
export class LoadAddressSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, Array.isArray(payload)
            ? payload.map((address) => address?.id ?? '')
            : payload?.id ?? '');
        this.payload = payload;
        this.type = LOAD_ADDRESS_SUCCESS;
    }
}
export class LoadAddresses extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ADDRESS_LIST, payload.orgUnitId);
        this.payload = payload;
        this.type = LOAD_ADDRESSES;
    }
}
export class LoadAddressesFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ADDRESS_LIST, payload.orgUnitId, payload.error);
        this.payload = payload;
        this.type = LOAD_ADDRESSES_FAIL;
    }
}
export class LoadAddressesSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ADDRESS_LIST, payload.orgUnitId);
        this.payload = payload;
        this.type = LOAD_ADDRESSES_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,