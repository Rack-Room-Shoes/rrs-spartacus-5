/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { StateUtils } from '@spartacus/core';
import { BUDGET_ENTITIES, BUDGET_LIST } from '../organization-state';
export const LOAD_BUDGET = '[Budget] Load Budget Data';
export const LOAD_BUDGET_FAIL = '[Budget] Load Budget Data Fail';
export const LOAD_BUDGET_SUCCESS = '[Budget] Load Budget Data Success';
export const LOAD_BUDGETS = '[Budget] Load Budgets';
export const LOAD_BUDGETS_FAIL = '[Budget] Load Budgets Fail';
export const LOAD_BUDGETS_SUCCESS = '[Budget] Load Budgets Success';
export const CREATE_BUDGET = '[Budget] Create Budget';
export const CREATE_BUDGET_FAIL = '[Budget] Create Budget Fail';
export const CREATE_BUDGET_SUCCESS = '[Budget] Create Budget Success';
export const UPDATE_BUDGET = '[Budget] Update Budget';
export const UPDATE_BUDGET_FAIL = '[Budget] Update Budget Fail';
export const UPDATE_BUDGET_SUCCESS = '[Budget] Update Budget Success';
export class LoadBudget extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budgetCode);
        this.payload = payload;
        this.type = LOAD_BUDGET;
    }
}
export class LoadBudgetFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budgetCode, payload.error);
        this.payload = payload;
        this.type = LOAD_BUDGET_FAIL;
    }
}
export class LoadBudgetSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, Array.isArray(payload)
            ? payload.map((budget) => budget?.code ?? '')
            : payload?.code ?? '');
        this.payload = payload;
        this.type = LOAD_BUDGET_SUCCESS;
    }
}
export class LoadBudgets extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(BUDGET_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_BUDGETS;
    }
}
export class LoadBudgetsFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(BUDGET_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);
        this.payload = payload;
        this.type = LOAD_BUDGETS_FAIL;
    }
}
export class LoadBudgetsSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(BUDGET_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_BUDGETS_SUCCESS;
    }
}
export class CreateBudget extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budget.code ?? null);
        this.payload = payload;
        this.type = CREATE_BUDGET;
    }
}
export class CreateBudgetFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budgetCode, payload.error);
        this.payload = payload;
        this.type = CREATE_BUDGET_FAIL;
    }
}
export class CreateBudgetSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.code ?? null, payload);
        this.payload = payload;
        this.type = CREATE_BUDGET_SUCCESS;
    }
}
export class UpdateBudget extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budget.code ?? '');
        this.payload = payload;
        this.type = UPDATE_BUDGET;
    }
}
export class UpdateBudgetFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.budgetCode, payload.error);
        this.payload = payload;
        this.type = UPDATE_BUDGET_FAIL;
    }
}
export class UpdateBudgetSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(BUDGET_ENTITIES, payload.code ?? '', payload);
        this.payload = payload;
        this.type = UPDATE_BUDGET_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,