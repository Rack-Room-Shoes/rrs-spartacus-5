/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { createSelector } from '@ngrx/store';
import { StateUtils, } from '@spartacus/core';
import { B2B_USER_FEATURE, USER_GROUP_FEATURE, } from '../organization-state';
import { getOrganizationState } from './feature.selector';
import { getPermissionsState } from './permission.selector';
export const getB2BUserManagementState = createSelector(getOrganizationState, (state) => state[B2B_USER_FEATURE]);
export const getB2BUsersState = createSelector(getB2BUserManagementState, (state) => state && state.entities);
export const getB2BUserState = (orgCustomerId) => createSelector(getB2BUsersState, (state) => StateUtils.entityLoaderStateSelector(state, orgCustomerId));
export const getB2BUserValue = (orgCustomerId) => {
    return createSelector(getB2BUserState(orgCustomerId), (b2BUserState) => StateUtils.loaderValueSelector(b2BUserState));
};
export const getUserList = (params) => createSelector(getB2BUserManagementState, (state) => StateUtils.denormalizeSearch(state, params));
export const getB2BUserApprovers = (code, params) => createSelector(getB2BUserManagementState, getB2BUsersState, (state, approvers) => StateUtils.denormalizeCustomB2BSearch(state.approvers, approvers, params, code));
export const getB2BUserPermissions = (code, params) => createSelector(getB2BUserManagementState, getPermissionsState, (state, permissions) => StateUtils.denormalizeCustomB2BSearch(state.permissions, permissions, params, code));
// avoid circular dependency
const getUserGroupsState = createSelector(getOrganizationState, (state) => state[USER_GROUP_FEATURE].entities);
export const getB2BUserUserGroups = (code, params) => createSelector(getB2BUserManagementState, getUserGroupsState, (state, userGroups) => StateUtils.denormalizeCustomB2BSearch(state.userGroups, userGroups, params, code));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJiLXVzZXIuc2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUvc3RvcmUvc2VsZWN0b3JzL2IyYi11c2VyLnNlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUMvRCxPQUFPLEVBSUwsVUFBVSxHQUNYLE1BQU0saUJBQWlCLENBQUM7QUFHekIsT0FBTyxFQUVMLGdCQUFnQixFQUdoQixrQkFBa0IsR0FDbkIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUU1RCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FHbEMsY0FBYyxDQUNoQixvQkFBb0IsRUFDcEIsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FDdEQsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUd6QixjQUFjLENBQ2hCLHlCQUF5QixFQUN6QixDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxDQUN0RCxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzdCLGFBQXFCLEVBQ3FELEVBQUUsQ0FDNUUsY0FBYyxDQUNaLGdCQUFnQixFQUNoQixDQUFDLEtBQTRDLEVBQUUsRUFBRSxDQUMvQyxVQUFVLENBQUMseUJBQXlCLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUM3RCxDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzdCLGFBQXFCLEVBQzZCLEVBQUU7SUFDcEQsT0FBTyxjQUFjLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FDckUsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUM3QyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQ3pCLE1BQW9CLEVBSXBCLEVBQUUsQ0FDRixjQUFjLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FDckUsVUFBVSxDQUFDLGlCQUFpQixDQUFVLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDckQsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQ2pDLElBQVksRUFDWixNQUFvQixFQUlwQixFQUFFLENBQ0YsY0FBYyxDQUNaLHlCQUF5QixFQUN6QixnQkFBZ0IsRUFDaEIsQ0FDRSxLQUF3QixFQUN4QixTQUFnRCxFQUNoRCxFQUFFLENBQ0YsVUFBVSxDQUFDLDBCQUEwQixDQUNuQyxLQUFLLENBQUMsU0FBUyxFQUNmLFNBQVMsRUFDVCxNQUFNLEVBQ04sSUFBSSxDQUNMLENBQ0osQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQ25DLElBQVksRUFDWixNQUFvQixFQUlwQixFQUFFLENBQ0YsY0FBYyxDQUNaLHlCQUF5QixFQUN6QixtQkFBbUIsRUFDbkIsQ0FDRSxLQUF3QixFQUN4QixXQUFxRCxFQUNyRCxFQUFFLENBQ0YsVUFBVSxDQUFDLDBCQUEwQixDQUNuQyxLQUFLLENBQUMsV0FBVyxFQUNqQixXQUFXLEVBQ1gsTUFBTSxFQUNOLElBQUksQ0FDTCxDQUNKLENBQUM7QUFFSiw0QkFBNEI7QUFDNUIsTUFBTSxrQkFBa0IsR0FHcEIsY0FBYyxDQUNoQixvQkFBb0IsRUFDcEIsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxRQUFRLENBQ2pFLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUNsQyxJQUFZLEVBQ1osTUFBb0IsRUFJcEIsRUFBRSxDQUNGLGNBQWMsQ0FDWix5QkFBeUIsRUFDekIsa0JBQWtCLEVBQ2xCLENBQ0UsS0FBd0IsRUFDeEIsVUFBbUQsRUFDbkQsRUFBRSxDQUNGLFVBQVUsQ0FBQywwQkFBMEIsQ0FDbkMsS0FBSyxDQUFDLFVBQVUsRUFDaEIsVUFBVSxFQUNWLE1BQU0sRUFDTixJQUFJLENBQ0wsQ0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjIgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQge1xuICBCMkJVc2VyLFxuICBFbnRpdGllc01vZGVsLFxuICBTZWFyY2hDb25maWcsXG4gIFN0YXRlVXRpbHMsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBQZXJtaXNzaW9uIH0gZnJvbSAnLi4vLi4vbW9kZWwvcGVybWlzc2lvbi5tb2RlbCc7XG5pbXBvcnQgeyBVc2VyR3JvdXAgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyLWdyb3VwLm1vZGVsJztcbmltcG9ydCB7XG4gIEIyQlVzZXJNYW5hZ2VtZW50LFxuICBCMkJfVVNFUl9GRUFUVVJFLFxuICBPcmdhbml6YXRpb25TdGF0ZSxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBVU0VSX0dST1VQX0ZFQVRVUkUsXG59IGZyb20gJy4uL29yZ2FuaXphdGlvbi1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRPcmdhbml6YXRpb25TdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XG5pbXBvcnQgeyBnZXRQZXJtaXNzaW9uc1N0YXRlIH0gZnJvbSAnLi9wZXJtaXNzaW9uLnNlbGVjdG9yJztcblxuZXhwb3J0IGNvbnN0IGdldEIyQlVzZXJNYW5hZ2VtZW50U3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgQjJCVXNlck1hbmFnZW1lbnRcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JnYW5pemF0aW9uU3RhdGUsXG4gIChzdGF0ZTogT3JnYW5pemF0aW9uU3RhdGUpID0+IHN0YXRlW0IyQl9VU0VSX0ZFQVRVUkVdXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0QjJCVXNlcnNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPEIyQlVzZXI+XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEIyQlVzZXJNYW5hZ2VtZW50U3RhdGUsXG4gIChzdGF0ZTogQjJCVXNlck1hbmFnZW1lbnQpID0+IHN0YXRlICYmIHN0YXRlLmVudGl0aWVzXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0QjJCVXNlclN0YXRlID0gKFxuICBvcmdDdXN0b21lcklkOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoT3JnYW5pemF0aW9uLCBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEIyQlVzZXI+PiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRCMkJVc2Vyc1N0YXRlLFxuICAgIChzdGF0ZTogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxCMkJVc2VyPikgPT5cbiAgICAgIFN0YXRlVXRpbHMuZW50aXR5TG9hZGVyU3RhdGVTZWxlY3RvcihzdGF0ZSwgb3JnQ3VzdG9tZXJJZClcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldEIyQlVzZXJWYWx1ZSA9IChcbiAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE9yZ2FuaXphdGlvbiwgQjJCVXNlcj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoZ2V0QjJCVXNlclN0YXRlKG9yZ0N1c3RvbWVySWQpLCAoYjJCVXNlclN0YXRlKSA9PlxuICAgIFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcihiMkJVc2VyU3RhdGUpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VXNlckxpc3QgPSAoXG4gIHBhcmFtczogU2VhcmNoQ29uZmlnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxCMkJVc2VyPj5cbj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoZ2V0QjJCVXNlck1hbmFnZW1lbnRTdGF0ZSwgKHN0YXRlOiBCMkJVc2VyTWFuYWdlbWVudCkgPT5cbiAgICBTdGF0ZVV0aWxzLmRlbm9ybWFsaXplU2VhcmNoPEIyQlVzZXI+KHN0YXRlLCBwYXJhbXMpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRCMkJVc2VyQXBwcm92ZXJzID0gKFxuICBjb2RlOiBzdHJpbmcsXG4gIHBhcmFtczogU2VhcmNoQ29uZmlnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxCMkJVc2VyPj5cbj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0QjJCVXNlck1hbmFnZW1lbnRTdGF0ZSxcbiAgICBnZXRCMkJVc2Vyc1N0YXRlLFxuICAgIChcbiAgICAgIHN0YXRlOiBCMkJVc2VyTWFuYWdlbWVudCxcbiAgICAgIGFwcHJvdmVyczogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxCMkJVc2VyPlxuICAgICkgPT5cbiAgICAgIFN0YXRlVXRpbHMuZGVub3JtYWxpemVDdXN0b21CMkJTZWFyY2goXG4gICAgICAgIHN0YXRlLmFwcHJvdmVycyxcbiAgICAgICAgYXBwcm92ZXJzLFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIGNvZGVcbiAgICAgIClcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldEIyQlVzZXJQZXJtaXNzaW9ucyA9IChcbiAgY29kZTogc3RyaW5nLFxuICBwYXJhbXM6IFNlYXJjaENvbmZpZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEVudGl0aWVzTW9kZWw8UGVybWlzc2lvbj4+XG4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldEIyQlVzZXJNYW5hZ2VtZW50U3RhdGUsXG4gICAgZ2V0UGVybWlzc2lvbnNTdGF0ZSxcbiAgICAoXG4gICAgICBzdGF0ZTogQjJCVXNlck1hbmFnZW1lbnQsXG4gICAgICBwZXJtaXNzaW9uczogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxQZXJtaXNzaW9uPlxuICAgICkgPT5cbiAgICAgIFN0YXRlVXRpbHMuZGVub3JtYWxpemVDdXN0b21CMkJTZWFyY2goXG4gICAgICAgIHN0YXRlLnBlcm1pc3Npb25zLFxuICAgICAgICBwZXJtaXNzaW9ucyxcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBjb2RlXG4gICAgICApXG4gICk7XG5cbi8vIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3lcbmNvbnN0IGdldFVzZXJHcm91cHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPFVzZXJHcm91cD5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JnYW5pemF0aW9uU3RhdGUsXG4gIChzdGF0ZTogT3JnYW5pemF0aW9uU3RhdGUpID0+IHN0YXRlW1VTRVJfR1JPVVBfRkVBVFVSRV0uZW50aXRpZXNcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRCMkJVc2VyVXNlckdyb3VwcyA9IChcbiAgY29kZTogc3RyaW5nLFxuICBwYXJhbXM6IFNlYXJjaENvbmZpZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEVudGl0aWVzTW9kZWw8VXNlckdyb3VwPj5cbj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0QjJCVXNlck1hbmFnZW1lbnRTdGF0ZSxcbiAgICBnZXRVc2VyR3JvdXBzU3RhdGUsXG4gICAgKFxuICAgICAgc3RhdGU6IEIyQlVzZXJNYW5hZ2VtZW50LFxuICAgICAgdXNlckdyb3VwczogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxVc2VyR3JvdXA+XG4gICAgKSA9PlxuICAgICAgU3RhdGVVdGlscy5kZW5vcm1hbGl6ZUN1c3RvbUIyQlNlYXJjaChcbiAgICAgICAgc3RhdGUudXNlckdyb3VwcyxcbiAgICAgICAgdXNlckdyb3VwcyxcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBjb2RlXG4gICAgICApXG4gICk7XG4iXX0=