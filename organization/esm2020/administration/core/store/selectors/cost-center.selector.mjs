/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { createSelector } from '@ngrx/store';
import { StateUtils, } from '@spartacus/core';
import { COST_CENTER_FEATURE, } from '../organization-state';
import { getBudgetsState } from './budget.selector';
import { getOrganizationState } from './feature.selector';
export const getCostCenterManagementState = createSelector(getOrganizationState, (state) => state[COST_CENTER_FEATURE]);
export const getCostCentersState = createSelector(getCostCenterManagementState, (state) => state && state.entities);
export const getCostCenter = (costCenterCode) => createSelector(getCostCentersState, (state) => StateUtils.entityLoaderStateSelector(state, costCenterCode));
export const getCostCenterValue = (costCenterCode) => {
    return createSelector(getCostCenter(costCenterCode), (costCenterState) => StateUtils.loaderValueSelector(costCenterState));
};
export const getCostCenterList = (params) => createSelector(getCostCenterManagementState, (state) => StateUtils.denormalizeSearch(state, params));
export const getAssignedBudgets = (code, params) => createSelector(getCostCenterManagementState, getBudgetsState, (state, budgets) => StateUtils.denormalizeCustomB2BSearch(state.budgets, budgets, params, code));
export const getCostCenterState = (code) => createSelector(getCostCentersState, (state) => StateUtils.entityLoaderStateSelector(state, code));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdC1jZW50ZXIuc2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUvc3RvcmUvc2VsZWN0b3JzL2Nvc3QtY2VudGVyLnNlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUMvRCxPQUFPLEVBSUwsVUFBVSxHQUNYLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUVMLG1CQUFtQixHQUdwQixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUxRCxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FHckMsY0FBYyxDQUNoQixvQkFBb0IsRUFDcEIsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FDekQsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUc1QixjQUFjLENBQ2hCLDRCQUE0QixFQUM1QixDQUFDLEtBQTJCLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxDQUN6RCxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQzNCLGNBQXNCLEVBSXRCLEVBQUUsQ0FDRixjQUFjLENBQ1osbUJBQW1CLEVBQ25CLENBQUMsS0FBK0MsRUFBRSxFQUFFLENBQ2xELFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQzlELENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUNoQyxjQUFzQixFQUMyQixFQUFFO0lBQ25ELE9BQU8sY0FBYyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQ3ZFLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsQ0FDaEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQy9CLE1BQW9CLEVBSXBCLEVBQUUsQ0FDRixjQUFjLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxLQUEyQixFQUFFLEVBQUUsQ0FDM0UsVUFBVSxDQUFDLGlCQUFpQixDQUFhLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDeEQsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQ2hDLElBQVksRUFDWixNQUFvQixFQUlwQixFQUFFLENBQ0YsY0FBYyxDQUNaLDRCQUE0QixFQUM1QixlQUFlLEVBQ2YsQ0FDRSxLQUEyQixFQUMzQixPQUE2QyxFQUM3QyxFQUFFLENBQ0YsVUFBVSxDQUFDLDBCQUEwQixDQUNuQyxLQUFLLENBQUMsT0FBTyxFQUNiLE9BQU8sRUFDUCxNQUFNLEVBQ04sSUFBSSxDQUNMLENBQ0osQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQ2hDLElBQVksRUFJWixFQUFFLENBQ0YsY0FBYyxDQUNaLG1CQUFtQixFQUNuQixDQUFDLEtBQStDLEVBQUUsRUFBRSxDQUNsRCxVQUFVLENBQUMseUJBQXlCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjIgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQge1xuICBDb3N0Q2VudGVyLFxuICBFbnRpdGllc01vZGVsLFxuICBTZWFyY2hDb25maWcsXG4gIFN0YXRlVXRpbHMsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBCdWRnZXQgfSBmcm9tICcuLi8uLi9tb2RlbC9idWRnZXQubW9kZWwnO1xuaW1wb3J0IHtcbiAgQ29zdENlbnRlck1hbmFnZW1lbnQsXG4gIENPU1RfQ0VOVEVSX0ZFQVRVUkUsXG4gIE9yZ2FuaXphdGlvblN0YXRlLFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG59IGZyb20gJy4uL29yZ2FuaXphdGlvbi1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRCdWRnZXRzU3RhdGUgfSBmcm9tICcuL2J1ZGdldC5zZWxlY3Rvcic7XG5pbXBvcnQgeyBnZXRPcmdhbml6YXRpb25TdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XG5cbmV4cG9ydCBjb25zdCBnZXRDb3N0Q2VudGVyTWFuYWdlbWVudFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIENvc3RDZW50ZXJNYW5hZ2VtZW50XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldE9yZ2FuaXphdGlvblN0YXRlLFxuICAoc3RhdGU6IE9yZ2FuaXphdGlvblN0YXRlKSA9PiBzdGF0ZVtDT1NUX0NFTlRFUl9GRUFUVVJFXVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldENvc3RDZW50ZXJzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxDb3N0Q2VudGVyPlxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDb3N0Q2VudGVyTWFuYWdlbWVudFN0YXRlLFxuICAoc3RhdGU6IENvc3RDZW50ZXJNYW5hZ2VtZW50KSA9PiBzdGF0ZSAmJiBzdGF0ZS5lbnRpdGllc1xuKTtcblxuZXhwb3J0IGNvbnN0IGdldENvc3RDZW50ZXIgPSAoXG4gIGNvc3RDZW50ZXJDb2RlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxDb3N0Q2VudGVyPlxuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRDb3N0Q2VudGVyc1N0YXRlLFxuICAgIChzdGF0ZTogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxDb3N0Q2VudGVyPikgPT5cbiAgICAgIFN0YXRlVXRpbHMuZW50aXR5TG9hZGVyU3RhdGVTZWxlY3RvcihzdGF0ZSwgY29zdENlbnRlckNvZGUpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRDb3N0Q2VudGVyVmFsdWUgPSAoXG4gIGNvc3RDZW50ZXJDb2RlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoT3JnYW5pemF0aW9uLCBCdWRnZXQ+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldENvc3RDZW50ZXIoY29zdENlbnRlckNvZGUpLCAoY29zdENlbnRlclN0YXRlKSA9PlxuICAgIFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3Rvcihjb3N0Q2VudGVyU3RhdGUpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29zdENlbnRlckxpc3QgPSAoXG4gIHBhcmFtczogU2VhcmNoQ29uZmlnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxDb3N0Q2VudGVyPj5cbj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoZ2V0Q29zdENlbnRlck1hbmFnZW1lbnRTdGF0ZSwgKHN0YXRlOiBDb3N0Q2VudGVyTWFuYWdlbWVudCkgPT5cbiAgICBTdGF0ZVV0aWxzLmRlbm9ybWFsaXplU2VhcmNoPENvc3RDZW50ZXI+KHN0YXRlLCBwYXJhbXMpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRBc3NpZ25lZEJ1ZGdldHMgPSAoXG4gIGNvZGU6IHN0cmluZyxcbiAgcGFyYW1zOiBTZWFyY2hDb25maWdcbik6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxFbnRpdGllc01vZGVsPEJ1ZGdldD4+XG4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldENvc3RDZW50ZXJNYW5hZ2VtZW50U3RhdGUsXG4gICAgZ2V0QnVkZ2V0c1N0YXRlLFxuICAgIChcbiAgICAgIHN0YXRlOiBDb3N0Q2VudGVyTWFuYWdlbWVudCxcbiAgICAgIGJ1ZGdldHM6IFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyU3RhdGU8QnVkZ2V0PlxuICAgICkgPT5cbiAgICAgIFN0YXRlVXRpbHMuZGVub3JtYWxpemVDdXN0b21CMkJTZWFyY2goXG4gICAgICAgIHN0YXRlLmJ1ZGdldHMsXG4gICAgICAgIGJ1ZGdldHMsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgY29kZVxuICAgICAgKVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29zdENlbnRlclN0YXRlID0gKFxuICBjb2RlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxDb3N0Q2VudGVyPlxuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRDb3N0Q2VudGVyc1N0YXRlLFxuICAgIChzdGF0ZTogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxDb3N0Q2VudGVyPikgPT5cbiAgICAgIFN0YXRlVXRpbHMuZW50aXR5TG9hZGVyU3RhdGVTZWxlY3RvcihzdGF0ZSwgY29kZSlcbiAgKTtcbiJdfQ==