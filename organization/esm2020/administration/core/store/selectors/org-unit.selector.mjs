/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { createSelector } from '@ngrx/store';
import { StateUtils, } from '@spartacus/core';
import { ORG_UNIT_APPROVAL_PROCESSES, ORG_UNIT_FEATURE, ORG_UNIT_NODES, ORG_UNIT_TREE, } from '../organization-state';
import { getB2BUsersState } from './b2b-user.selector';
import { getOrganizationState } from './feature.selector';
export const getB2BOrgUnitState = createSelector(getOrganizationState, (state) => state[ORG_UNIT_FEATURE]);
export const getOrgUnitsNodeListState = createSelector(getB2BOrgUnitState, (state) => state && state.availableOrgUnitNodes);
export const getOrgUnitsState = createSelector(getB2BOrgUnitState, (state) => state && state.entities);
export const getOrgUnitsTreeState = createSelector(getB2BOrgUnitState, (state) => state && state.tree);
export const getAddressesState = createSelector(getB2BOrgUnitState, (state) => state && state.addressEntities);
export const getApprovalProcessesState = createSelector(getB2BOrgUnitState, (state) => state && state.approvalProcesses);
export const getOrgUnit = (orgUnitId) => createSelector(getOrgUnitsState, (state) => StateUtils.entityLoaderStateSelector(state, orgUnitId));
export const getOrgUnitValue = (orgUnitId) => {
    return createSelector(getOrgUnit(orgUnitId), (orgUnitState) => StateUtils.loaderValueSelector(orgUnitState));
};
export const getOrgUnitState = (orgUnitId) => createSelector(getOrgUnitsState, (state) => StateUtils.entityLoaderStateSelector(state, orgUnitId));
export const getOrgUnitList = () => createSelector(getOrgUnitsNodeListState, (state) => StateUtils.entityLoaderStateSelector(state, ORG_UNIT_NODES));
export const getOrgUnitTree = () => createSelector(getOrgUnitsTreeState, (state) => StateUtils.entityLoaderStateSelector(state, ORG_UNIT_TREE));
export const getApprovalProcesses = () => createSelector(getApprovalProcessesState, (state) => StateUtils.entityLoaderStateSelector(state, ORG_UNIT_APPROVAL_PROCESSES));
export const getAssignedUsers = (orgUnitId, roleId, params) => createSelector(getB2BOrgUnitState, getB2BUsersState, (state, users) => StateUtils.denormalizeCustomB2BSearch(state.users, users, params, `${orgUnitId},${roleId}`));
export const getB2BAddresses = (orgUnitId, params) => createSelector(getB2BOrgUnitState, (state) => StateUtils.denormalizeCustomB2BSearch(state.addressList, state.addressEntities, params, orgUnitId));
export const getB2BAddress = (addressId) => createSelector(getAddressesState, (state) => StateUtils.entityLoaderStateSelector(state, addressId));
//# sourceMappingURL=data:application/json;base64,