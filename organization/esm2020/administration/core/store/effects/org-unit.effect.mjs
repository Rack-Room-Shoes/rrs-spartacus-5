import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { normalizeHttpError, StateUtils, } from '@spartacus/core';
import { from, of } from 'rxjs';
import { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';
import { B2BUserActions, OrganizationActions, OrgUnitActions, } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/org-unit/org-unit.connector";
export class OrgUnitEffects {
    // @Effect()
    // loadAddress$: Observable<
    //   | OrgUnitActions.LoadAddressSuccess
    //   | OrgUnitActions.LoadAddressesSuccess
    //   | OrgUnitActions.LoadAddressesFail
    // > = this.actions$.pipe(
    //   ofType(OrgUnitActions.LOAD_ADDRESSES),
    //   map((action: OrgUnitActions.LoadAddresses) => action.payload),
    //   switchMap(({ userId, orgUnitId }) => {
    //     return this.orgUnitConnector.getAddresses(userId, orgUnitId).pipe(
    //       switchMap((addresses: EntitiesModel<B2BAddress>) => {
    //         const { values, page } = StateUtils.normalizeListPage(addresses, 'id');
    //         return [
    //           new OrgUnitActions.LoadAddressSuccess(values),
    //           new OrgUnitActions.LoadAddressesSuccess({ page, orgUnitId }),
    //         ];
    //       }),
    //       catchError(error =>
    //         of(
    //           new OrgUnitActions.LoadAddressesFail({
    //             orgUnitId,
    //             error: normalizeHttpError(error),
    //           })
    //         )
    //       )
    //     );
    //   })
    // );
    constructor(actions$, orgUnitConnector) {
        this.actions$ = actions$;
        this.orgUnitConnector = orgUnitConnector;
        this.loadOrgUnit$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.LOAD_ORG_UNIT), map((action) => action.payload), switchMap(({ userId, orgUnitId }) => {
            return this.orgUnitConnector.get(userId, orgUnitId).pipe(switchMap((orgUnit) => {
                const { values, page } = StateUtils.normalizeListPage({ values: orgUnit.addresses ?? [] }, 'id');
                return [
                    new OrgUnitActions.LoadOrgUnitSuccess([orgUnit]),
                    new OrgUnitActions.LoadAddressSuccess(values),
                    new OrgUnitActions.LoadAddressesSuccess({ page, orgUnitId }),
                ];
            }), catchError((error) => of(new OrgUnitActions.LoadOrgUnitFail({
                orgUnitId,
                error: normalizeHttpError(error),
            }))));
        })));
        this.loadAvailableOrgUnits$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.LOAD_UNIT_NODES), map((action) => action.payload), switchMap((payload) => this.orgUnitConnector.getList(payload.userId).pipe(map((orgUnitsList) => new OrgUnitActions.LoadOrgUnitNodesSuccess(orgUnitsList)), catchError((error) => of(new OrgUnitActions.LoadOrgUnitNodesFail({
            error: normalizeHttpError(error),
        })))))));
        this.createUnit$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.CREATE_ORG_UNIT), map((action) => action.payload), switchMap((payload) => this.orgUnitConnector.create(payload.userId, payload.unit).pipe(switchMap((data) => [
            new OrgUnitActions.CreateUnitSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new OrgUnitActions.CreateUnitFail({
                unitCode: payload.unit.uid ?? '',
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.updateUnit$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.UPDATE_ORG_UNIT), map((action) => action.payload), switchMap((payload) => this.orgUnitConnector
            .update(payload.userId, payload.unitCode, payload.unit)
            .pipe(switchMap((_data) => [
            // Workaround for empty response
            new OrgUnitActions.UpdateUnitSuccess(payload.unit),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new OrgUnitActions.UpdateUnitFail({
                unitCode: payload.unit.uid ?? '',
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.loadTree$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.LOAD_UNIT_TREE), map((action) => action.payload), switchMap(({ userId }) => {
            return this.orgUnitConnector.getTree(userId).pipe(map((orgUnit) => new OrgUnitActions.LoadTreeSuccess(orgUnit)), catchError((error) => of(new OrgUnitActions.LoadTreeFail({
                error: normalizeHttpError(error),
            }))));
        })));
        this.loadApprovalProcesses$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.LOAD_APPROVAL_PROCESSES), map((action) => action.payload), switchMap(({ userId }) => {
            return this.orgUnitConnector.getApprovalProcesses(userId).pipe(map((approvalProcesses) => new OrgUnitActions.LoadApprovalProcessesSuccess(approvalProcesses)), catchError((error) => of(new OrgUnitActions.LoadApprovalProcessesFail({
                error: normalizeHttpError(error),
            }))));
        })));
        this.loadUsers$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.LOAD_ASSIGNED_USERS), map((action) => action.payload), groupBy(({ orgUnitId, roleId, params }) => StateUtils.serializeParams([orgUnitId, roleId], params)), mergeMap((group) => group.pipe(switchMap(({ userId, orgUnitId, roleId, params }) => {
            return this.orgUnitConnector
                .getUsers(userId, orgUnitId, roleId, params)
                .pipe(switchMap((users) => {
                const { values, page } = StateUtils.normalizeListPage(users, 'customerId');
                return [
                    new B2BUserActions.LoadB2BUserSuccess(values),
                    new OrgUnitActions.LoadAssignedUsersSuccess({
                        orgUnitId,
                        roleId,
                        page,
                        params,
                    }),
                ];
            }), catchError((error) => of(new OrgUnitActions.LoadAssignedUsersFail({
                orgUnitId,
                roleId,
                params,
                error: normalizeHttpError(error),
            }))));
        })))));
        this.assignRoleToUser = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.ASSIGN_ROLE), map((action) => action.payload), switchMap(({ userId, orgCustomerId, roleId }) => this.orgUnitConnector.assignRole(userId, orgCustomerId, roleId).pipe(map(() => new OrgUnitActions.AssignRoleSuccess({
            uid: orgCustomerId,
            roleId,
            selected: true,
        })), catchError((error) => of(new OrgUnitActions.AssignRoleFail({
            orgCustomerId,
            error: normalizeHttpError(error),
        })))))));
        this.unassignRoleToUser$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.UNASSIGN_ROLE), map((action) => action.payload), switchMap(({ userId, orgCustomerId, roleId }) => this.orgUnitConnector.unassignRole(userId, orgCustomerId, roleId).pipe(map(() => new OrgUnitActions.UnassignRoleSuccess({
            uid: orgCustomerId,
            roleId,
            selected: false,
        })), catchError((error) => of(new OrgUnitActions.UnassignRoleFail({
            orgCustomerId,
            error: normalizeHttpError(error),
        })))))));
        this.assignApprover = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.ASSIGN_APPROVER), map((action) => action.payload), mergeMap(({ userId, orgUnitId, orgCustomerId, roleId }) => this.orgUnitConnector
            .assignApprover(userId, orgUnitId, orgCustomerId, roleId)
            .pipe(switchMap(() => [
            new OrgUnitActions.AssignApproverSuccess({
                uid: orgCustomerId,
                roleId,
                selected: true,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new OrgUnitActions.AssignApproverFail({
                orgCustomerId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.unassignApprover = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.UNASSIGN_APPROVER), map((action) => action.payload), mergeMap(({ userId, orgUnitId, orgCustomerId, roleId }) => this.orgUnitConnector
            .unassignApprover(userId, orgUnitId, orgCustomerId, roleId)
            .pipe(switchMap(() => [
            new OrgUnitActions.UnassignApproverSuccess({
                uid: orgCustomerId,
                roleId,
                selected: false,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new OrgUnitActions.UnassignApproverFail({
                orgCustomerId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.createAddress$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.CREATE_ADDRESS), map((action) => action.payload), switchMap((payload) => this.orgUnitConnector
            .createAddress(payload.userId, payload.orgUnitId, payload.address)
            .pipe(switchMap((data) => [
            new OrgUnitActions.CreateAddressSuccess(data),
            new OrgUnitActions.CreateAddressSuccess({ id: undefined }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new OrgUnitActions.CreateAddressFail({
                addressId: payload.address.id ?? '',
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.updateAddress$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.UPDATE_ADDRESS), map((action) => action.payload), switchMap(({ userId, orgUnitId, addressId, address }) => this.orgUnitConnector
            .updateAddress(userId, orgUnitId, addressId, address)
            .pipe(switchMap(() => [
            // commented out due to no response from backend on PATCH request
            // new OrgUnitActions.UpdateAddressSuccess(data),
            new OrgUnitActions.UpdateAddressSuccess(address),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new OrgUnitActions.UpdateAddressFail({
                addressId: address.id ?? '',
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.deleteAddress$ = createEffect(() => this.actions$.pipe(ofType(OrgUnitActions.DELETE_ADDRESS), map((action) => action.payload), switchMap((payload) => this.orgUnitConnector
            .deleteAddress(payload.userId, payload.orgUnitId, payload.addressId)
            .pipe(switchMap(() => [
            new OrgUnitActions.DeleteAddressSuccess({
                id: payload.addressId,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new OrgUnitActions.DeleteAddressFail({
                addressId: payload.addressId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
    }
}
OrgUnitEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OrgUnitEffects, deps: [{ token: i1.Actions }, { token: i2.OrgUnitConnector }], target: i0.ɵɵFactoryTarget.Injectable });
OrgUnitEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OrgUnitEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OrgUnitEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.OrgUnitConnector }]; } });
//# sourceMappingURL=data:application/json;base64,