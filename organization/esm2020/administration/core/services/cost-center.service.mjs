/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { queueScheduler, using } from 'rxjs';
import { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';
import { CostCenterActions } from '../store/actions/index';
import { getAssignedBudgets, getCostCenter, getCostCenterList, getCostCenterState, getCostCenterValue, } from '../store/selectors/cost-center.selector';
import { getItemStatus } from '../utils/get-item-status';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class CostCenterService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    load(costCenterCode) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.LoadCostCenter({ userId, costCenterCode })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadList(params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.LoadCostCenters({ userId, params })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getCostCenter(costCenterCode) {
        return this.store.select(getCostCenter(costCenterCode));
    }
    getCostCenterValue(costCenterCode) {
        return this.store
            .select(getCostCenterValue(costCenterCode))
            .pipe(filter((costCenter) => Boolean(costCenter)));
    }
    getCostCenterList(params) {
        return this.store.select(getCostCenterList(params));
    }
    getBudgetList(costCenterCode, params) {
        return this.store.select(getAssignedBudgets(costCenterCode, params));
    }
    get(costCenterCode) {
        const loading$ = this.getCostCenter(costCenterCode).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.load(costCenterCode);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getCostCenterValue(costCenterCode));
    }
    getList(params) {
        return this.getCostCenterList(params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadList(params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getCostCenterState(costCenterCode) {
        return this.store.select(getCostCenterState(costCenterCode));
    }
    create(costCenter) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.CreateCostCenter({ userId, costCenter })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    update(costCenterCode, costCenter) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.UpdateCostCenter({
            userId,
            costCenterCode,
            costCenter,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getLoadingStatus(costCenterCode) {
        return getItemStatus(this.getCostCenter(costCenterCode));
    }
    loadBudgets(costCenterCode, params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.LoadAssignedBudgets({
            userId,
            costCenterCode,
            params,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getBudgets(costCenterCode, params) {
        return this.getBudgetList(costCenterCode, params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadBudgets(costCenterCode, params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    assignBudget(costCenterCode, budgetCode) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.AssignBudget({
            userId,
            costCenterCode,
            budgetCode,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    unassignBudget(costCenterCode, budgetCode) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.UnassignBudget({
            userId,
            costCenterCode,
            budgetCode,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getErrorState(costCenterCode) {
        return this.getCostCenterState(costCenterCode).pipe(map((state) => state.error ?? false));
    }
}
CostCenterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CostCenterService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
CostCenterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CostCenterService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CostCenterService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdC1jZW50ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZS9zZXJ2aWNlcy9jb3N0LWNlbnRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUzNDLE9BQU8sRUFBYyxjQUFjLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHeEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFM0QsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixhQUFhLEVBQ2IsaUJBQWlCLEVBQ2pCLGtCQUFrQixFQUNsQixrQkFBa0IsR0FDbkIsTUFBTSx5Q0FBeUMsQ0FBQztBQUNqRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFHekQsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUNZLEtBQW1DLEVBQ25DLGFBQTRCO1FBRDVCLFVBQUssR0FBTCxLQUFLLENBQThCO1FBQ25DLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQ3JDLENBQUM7SUFFSixJQUFJLENBQUMsY0FBc0I7UUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUMzQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQ2pCLElBQUksaUJBQWlCLENBQUMsY0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQ2pFLEVBQ0gsR0FBRyxFQUFF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QyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQzNDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDVCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDakIsSUFBSSxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7WUFDbkMsTUFBTTtZQUNOLGNBQWM7WUFDZCxVQUFVO1NBQ1gsQ0FBQyxDQUNILEVBQ0gsR0FBRyxFQUFFO1lBQ0gsaUVBQWlFO1FBQ25FLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELGFBQWEsQ0FBQyxjQUFzQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQ2pELEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FDckMsQ0FBQztJQUNKLENBQUM7OzhHQXRNVSxpQkFBaUI7a0hBQWpCLGlCQUFpQixjQURKLE1BQU07MkZBQ25CLGlCQUFpQjtrQkFEN0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMiBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7XG4gIENvc3RDZW50ZXIsXG4gIEVudGl0aWVzTW9kZWwsXG4gIFNlYXJjaENvbmZpZyxcbiAgU3RhdGVVdGlscyxcbiAgVXNlcklkU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHF1ZXVlU2NoZWR1bGVyLCB1c2luZyB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgYXVkaXRUaW1lLCBmaWx0ZXIsIG1hcCwgb2JzZXJ2ZU9uLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCdWRnZXQgfSBmcm9tICcuLi9tb2RlbC9idWRnZXQubW9kZWwnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uSXRlbVN0YXR1cyB9IGZyb20gJy4uL21vZGVsL29yZ2FuaXphdGlvbi1pdGVtLXN0YXR1cyc7XG5pbXBvcnQgeyBDb3N0Q2VudGVyQWN0aW9ucyB9IGZyb20gJy4uL3N0b3JlL2FjdGlvbnMvaW5kZXgnO1xuaW1wb3J0IHsgU3RhdGVXaXRoT3JnYW5pemF0aW9uIH0gZnJvbSAnLi4vc3RvcmUvb3JnYW5pemF0aW9uLXN0YXRlJztcbmltcG9ydCB7XG4gIGdldEFzc2lnbmVkQnVkZ2V0cyxcbiAgZ2V0Q29zdENlbnRlcixcbiAgZ2V0Q29zdENlbnRlckxpc3QsXG4gIGdldENvc3RDZW50ZXJTdGF0ZSxcbiAgZ2V0Q29zdENlbnRlclZhbHVlLFxufSBmcm9tICcuLi9zdG9yZS9zZWxlY3RvcnMvY29zdC1jZW50ZXIuc2VsZWN0b3InO1xuaW1wb3J0IHsgZ2V0SXRlbVN0YXR1cyB9IGZyb20gJy4uL3V0aWxzL2dldC1pdGVtLXN0YXR1cyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgQ29zdENlbnRlclNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgc3RvcmU6IFN0b3JlPFN0YXRlV2l0aE9yZ2FuaXphdGlvbj4sXG4gICAgcHJvdGVjdGVkIHVzZXJJZFNlcnZpY2U6IFVzZXJJZFNlcnZpY2VcbiAgKSB7fVxuXG4gIGxvYWQoY29zdENlbnRlckNvZGU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgbmV3IENvc3RDZW50ZXJBY3Rpb25zLkxvYWRDb3N0Q2VudGVyKHsgdXNlcklkLCBjb3N0Q2VudGVyQ29kZSB9KVxuICAgICAgICApLFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBmb3IgZnV0dXJlIHJlbGVhc2VzLCByZWZhY3RvciB0aGlzIHBhcnQgdG8gdGhyb3duIGVycm9yc1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBsb2FkTGlzdChwYXJhbXM6IFNlYXJjaENvbmZpZyk6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgbmV3IENvc3RDZW50ZXJBY3Rpb25zLkxvYWRDb3N0Q2VudGVycyh7IHVzZXJJZCwgcGFyYW1zIH0pXG4gICAgICAgICksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IGZvciBmdXR1cmUgcmVsZWFzZXMsIHJlZmFjdG9yIHRoaXMgcGFydCB0byB0aHJvd24gZXJyb3JzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29zdENlbnRlcihcbiAgICBjb3N0Q2VudGVyQ29kZTogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8U3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxDb3N0Q2VudGVyPj4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnNlbGVjdChnZXRDb3N0Q2VudGVyKGNvc3RDZW50ZXJDb2RlKSk7XG4gIH1cblxuICBwcml2YXRlIGdldENvc3RDZW50ZXJWYWx1ZShjb3N0Q2VudGVyQ29kZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxDb3N0Q2VudGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmVcbiAgICAgIC5zZWxlY3QoZ2V0Q29zdENlbnRlclZhbHVlKGNvc3RDZW50ZXJDb2RlKSlcbiAgICAgIC5waXBlKGZpbHRlcigoY29zdENlbnRlcikgPT4gQm9vbGVhbihjb3N0Q2VudGVyKSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb3N0Q2VudGVyTGlzdChcbiAgICBwYXJhbXM6IFNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxDb3N0Q2VudGVyPj4+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5zZWxlY3QoZ2V0Q29zdENlbnRlckxpc3QocGFyYW1zKSk7XG4gIH1cblxuICBwcml2YXRlIGdldEJ1ZGdldExpc3QoXG4gICAgY29zdENlbnRlckNvZGU6IHN0cmluZyxcbiAgICBwYXJhbXM6IFNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxCdWRnZXQ+Pj4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnNlbGVjdChnZXRBc3NpZ25lZEJ1ZGdldHMoY29zdENlbnRlckNvZGUsIHBhcmFtcykpO1xuICB9XG5cbiAgZ2V0KGNvc3RDZW50ZXJDb2RlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJ1ZGdldD4ge1xuICAgIGNvbnN0IGxvYWRpbmckID0gdGhpcy5nZXRDb3N0Q2VudGVyKGNvc3RDZW50ZXJDb2RlKS5waXBlKFxuICAgICAgYXVkaXRUaW1lKDApLFxuICAgICAgdGFwKChzdGF0ZSkgPT4ge1xuICAgICAgICBpZiAoIShzdGF0ZS5sb2FkaW5nIHx8IHN0YXRlLnN1Y2Nlc3MgfHwgc3RhdGUuZXJyb3IpKSB7XG4gICAgICAgICAgdGhpcy5sb2FkKGNvc3RDZW50ZXJDb2RlKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuXG4gICAgcmV0dXJuIHVzaW5nKFxuICAgICAgKCkgPT4gbG9hZGluZyQuc3Vic2NyaWJlKCksXG4gICAgICAoKSA9PiB0aGlzLmdldENvc3RDZW50ZXJWYWx1ZShjb3N0Q2VudGVyQ29kZSlcbiAgICApO1xuICB9XG5cbiAgZ2V0TGlzdChcbiAgICBwYXJhbXM6IFNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8Q29zdENlbnRlcj4gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRDb3N0Q2VudGVyTGlzdChwYXJhbXMpLnBpcGUoXG4gICAgICBvYnNlcnZlT24ocXVldWVTY2hlZHVsZXIpLFxuICAgICAgdGFwKChwcm9jZXNzOiBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEVudGl0aWVzTW9kZWw8Q29zdENlbnRlcj4+KSA9PiB7XG4gICAgICAgIGlmICghKHByb2Nlc3MubG9hZGluZyB8fCBwcm9jZXNzLnN1Y2Nlc3MgfHwgcHJvY2Vzcy5lcnJvcikpIHtcbiAgICAgICAgICB0aGlzLmxvYWRMaXN0KHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgZmlsdGVyKChwcm9jZXNzOiBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEVudGl0aWVzTW9kZWw8Q29zdENlbnRlcj4+KSA9PlxuICAgICAgICBCb29sZWFuKHByb2Nlc3Muc3VjY2VzcyB8fCBwcm9jZXNzLmVycm9yKVxuICAgICAgKSxcbiAgICAgIG1hcCgocmVzdWx0KSA9PiByZXN1bHQudmFsdWUpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29zdENlbnRlclN0YXRlKFxuICAgIGNvc3RDZW50ZXJDb2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEJ1ZGdldD4+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5zZWxlY3QoZ2V0Q29zdENlbnRlclN0YXRlKGNvc3RDZW50ZXJDb2RlKSk7XG4gIH1cblxuICBjcmVhdGUoY29zdENlbnRlcjogQ29zdENlbnRlcik6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgbmV3IENvc3RDZW50ZXJBY3Rpb25zLkNyZWF0ZUNvc3RDZW50ZXIoeyB1c2VySWQsIGNvc3RDZW50ZXIgfSlcbiAgICAgICAgKSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogZm9yIGZ1dHVyZSByZWxlYXNlcywgcmVmYWN0b3IgdGhpcyBwYXJ0IHRvIHRocm93biBlcnJvcnNcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgdXBkYXRlKGNvc3RDZW50ZXJDb2RlOiBzdHJpbmcsIGNvc3RDZW50ZXI6IENvc3RDZW50ZXIpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJJZFNlcnZpY2UudGFrZVVzZXJJZCh0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAodXNlcklkKSA9PlxuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgIG5ldyBDb3N0Q2VudGVyQWN0aW9ucy5VcGRhdGVDb3N0Q2VudGVyKHtcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIGNvc3RDZW50ZXJDb2RlLFxuICAgICAgICAgICAgY29zdENlbnRlcixcbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBmb3IgZnV0dXJlIHJlbGVhc2VzLCByZWZhY3RvciB0aGlzIHBhcnQgdG8gdGhyb3duIGVycm9yc1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBnZXRMb2FkaW5nU3RhdHVzKFxuICAgIGNvc3RDZW50ZXJDb2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb25JdGVtU3RhdHVzPENvc3RDZW50ZXI+PiB7XG4gICAgcmV0dXJuIGdldEl0ZW1TdGF0dXModGhpcy5nZXRDb3N0Q2VudGVyKGNvc3RDZW50ZXJDb2RlKSk7XG4gIH1cblxuICBsb2FkQnVkZ2V0cyhjb3N0Q2VudGVyQ29kZTogc3RyaW5nLCBwYXJhbXM6IFNlYXJjaENvbmZpZyk6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgbmV3IENvc3RDZW50ZXJBY3Rpb25zLkxvYWRBc3NpZ25lZEJ1ZGdldHMoe1xuICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgY29zdENlbnRlckNvZGUsXG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogZm9yIGZ1dHVyZSByZWxlYXNlcywgcmVmYWN0b3IgdGhpcyBwYXJ0IHRvIHRocm93biBlcnJvcnNcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgZ2V0QnVkZ2V0cyhcbiAgICBjb3N0Q2VudGVyQ29kZTogc3RyaW5nLFxuICAgIHBhcmFtczogU2VhcmNoQ29uZmlnXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxCdWRnZXQ+IHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QnVkZ2V0TGlzdChjb3N0Q2VudGVyQ29kZSwgcGFyYW1zKS5waXBlKFxuICAgICAgb2JzZXJ2ZU9uKHF1ZXVlU2NoZWR1bGVyKSxcbiAgICAgIHRhcCgocHJvY2VzczogU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxFbnRpdGllc01vZGVsPEJ1ZGdldD4+KSA9PiB7XG4gICAgICAgIGlmICghKHByb2Nlc3MubG9hZGluZyB8fCBwcm9jZXNzLnN1Y2Nlc3MgfHwgcHJvY2Vzcy5lcnJvcikpIHtcbiAgICAgICAgICB0aGlzLmxvYWRCdWRnZXRzKGNvc3RDZW50ZXJDb2RlLCBwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGZpbHRlcigocHJvY2VzczogU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxFbnRpdGllc01vZGVsPEJ1ZGdldD4+KSA9PlxuICAgICAgICBCb29sZWFuKHByb2Nlc3Muc3VjY2VzcyB8fCBwcm9jZXNzLmVycm9yKVxuICAgICAgKSxcbiAgICAgIG1hcCgocmVzdWx0KSA9PiByZXN1bHQudmFsdWUpXG4gICAgKTtcbiAgfVxuXG4gIGFzc2lnbkJ1ZGdldChjb3N0Q2VudGVyQ29kZTogc3RyaW5nLCBidWRnZXRDb2RlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJJZFNlcnZpY2UudGFrZVVzZXJJZCh0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAodXNlcklkKSA9PlxuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgIG5ldyBDb3N0Q2VudGVyQWN0aW9ucy5Bc3NpZ25CdWRnZXQoe1xuICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgY29zdENlbnRlckNvZGUsXG4gICAgICAgICAgICBidWRnZXRDb2RlLFxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IGZvciBmdXR1cmUgcmVsZWFzZXMsIHJlZmFjdG9yIHRoaXMgcGFydCB0byB0aHJvd24gZXJyb3JzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHVuYXNzaWduQnVkZ2V0KGNvc3RDZW50ZXJDb2RlOiBzdHJpbmcsIGJ1ZGdldENvZGU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgbmV3IENvc3RDZW50ZXJBY3Rpb25zLlVuYXNzaWduQnVkZ2V0KHtcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIGNvc3RDZW50ZXJDb2RlLFxuICAgICAgICAgICAgYnVkZ2V0Q29kZSxcbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBmb3IgZnV0dXJlIHJlbGVhc2VzLCByZWZhY3RvciB0aGlzIHBhcnQgdG8gdGhyb3duIGVycm9yc1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBnZXRFcnJvclN0YXRlKGNvc3RDZW50ZXJDb2RlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRDb3N0Q2VudGVyU3RhdGUoY29zdENlbnRlckNvZGUpLnBpcGUoXG4gICAgICBtYXAoKHN0YXRlKSA9PiBzdGF0ZS5lcnJvciA/PyBmYWxzZSlcbiAgICApO1xuICB9XG59XG4iXX0=