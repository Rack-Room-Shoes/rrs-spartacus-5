/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { B2BUserRole, } from '@spartacus/core';
import { queueScheduler, using } from 'rxjs';
import { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';
import { B2BUserActions } from '../store/actions/index';
import { getB2BUserApprovers, getB2BUserPermissions, getB2BUserState, getB2BUserUserGroups, getB2BUserValue, getUserList, } from '../store/selectors/b2b-user.selector';
import { getItemStatus } from '../utils/get-item-status';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class B2BUserService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    load(orgCustomerId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.LoadB2BUser({
            userId,
            orgCustomerId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadList(params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.LoadB2BUsers({ userId, params })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getB2BUserValue(orgCustomerId) {
        return this.store
            .select(getB2BUserValue(orgCustomerId))
            .pipe(filter((b2bUser) => Boolean(b2bUser)));
    }
    get(orgCustomerId) {
        const loading$ = this.getB2BUserState(orgCustomerId).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.load(orgCustomerId);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getB2BUserValue(orgCustomerId));
    }
    getList(params) {
        return this.getUserList(params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadList(params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getErrorState(orgCustomerId) {
        return this.getB2BUserState(orgCustomerId).pipe(map((state) => state.error ?? false));
    }
    create(orgCustomer) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.CreateB2BUser({
            userId,
            orgCustomer,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    update(orgCustomerId, orgCustomer) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.UpdateB2BUser({
            userId,
            orgCustomerId,
            orgCustomer,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getLoadingStatus(orgCustomerId) {
        return getItemStatus(this.getB2BUserState(orgCustomerId));
    }
    loadApprovers(orgCustomerId, params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.LoadB2BUserApprovers({
            userId,
            orgCustomerId,
            params,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getApprovers(orgCustomerId, params) {
        return this.getB2BUserApproverList(orgCustomerId, params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadApprovers(orgCustomerId, params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    assignApprover(orgCustomerId, approverId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.AssignB2BUserApprover({
            userId,
            orgCustomerId,
            approverId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    unassignApprover(orgCustomerId, approverId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.UnassignB2BUserApprover({
            userId,
            orgCustomerId,
            approverId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadPermissions(orgCustomerId, params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.LoadB2BUserPermissions({
            userId,
            orgCustomerId,
            params,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getPermissions(orgCustomerId, params) {
        return this.getB2BUserPermissionList(orgCustomerId, params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadPermissions(orgCustomerId, params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    assignPermission(orgCustomerId, permissionId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.AssignB2BUserPermission({
            userId,
            orgCustomerId,
            permissionId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    unassignPermission(orgCustomerId, permissionId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.UnassignB2BUserPermission({
            userId,
            orgCustomerId,
            permissionId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadUserGroups(orgCustomerId, params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.LoadB2BUserUserGroups({
            userId,
            orgCustomerId,
            params,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getUserGroups(orgCustomerId, params) {
        return this.getB2BUserUserGroupList(orgCustomerId, params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadUserGroups(orgCustomerId, params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    assignUserGroup(orgCustomerId, userGroupId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.AssignB2BUserUserGroup({
            userId,
            orgCustomerId,
            userGroupId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    unassignUserGroup(orgCustomerId, userGroupId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new B2BUserActions.UnassignB2BUserUserGroup({
            userId,
            orgCustomerId,
            userGroupId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    /**
     * Get list of all roles for B2BUser sorted by increasing privileges.
     *
     * This list is not driven by the backend (lack of API), but reflects roles
     * from the backend: `b2badmingroup`, `b2bcustomergroup`, `b2bmanagergroup` and `b2bapprovergroup`.
     *
     * If you reconfigure those roles in the backend or extend the list, you should change
     * this implementation accordingly.
     */
    getAllRoles() {
        return [
            B2BUserRole.CUSTOMER,
            B2BUserRole.MANAGER,
            B2BUserRole.APPROVER,
            B2BUserRole.ADMIN,
        ];
    }
    getB2BUserApproverList(orgCustomerId, params) {
        return this.store.select(getB2BUserApprovers(orgCustomerId, params));
    }
    getB2BUserPermissionList(orgCustomerId, params) {
        return this.store.select(getB2BUserPermissions(orgCustomerId, params));
    }
    getB2BUserUserGroupList(orgCustomerId, params) {
        return this.store.select(getB2BUserUserGroups(orgCustomerId, params));
    }
    getB2BUserState(orgCustomerId) {
        return this.store.select(getB2BUserState(orgCustomerId));
    }
    getUserList(params) {
        return this.store.select(getUserList(params));
    }
}
B2BUserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: B2BUserService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
B2BUserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: B2BUserService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: B2BUserService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,