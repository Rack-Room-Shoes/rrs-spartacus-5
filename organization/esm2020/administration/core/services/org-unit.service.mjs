/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { queueScheduler, using } from 'rxjs';
import { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';
import { OrgUnitActions } from '../store/actions/index';
import { getApprovalProcesses, getAssignedUsers, getB2BAddress, getB2BAddresses, getOrgUnit, getOrgUnitList, getOrgUnitState, getOrgUnitTree, getOrgUnitValue, } from '../store/selectors/org-unit.selector';
import { getItemStatus } from '../utils/get-item-status';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class OrgUnitService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    clearAssignedUsersList(orgUnitId, roleId, params) {
        this.store.dispatch(new OrgUnitActions.ClearAssignedUsers({ orgUnitId, roleId, params }));
    }
    load(orgUnitId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.LoadOrgUnit({ userId, orgUnitId })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadList() {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.LoadOrgUnitNodes({ userId })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadTree() {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.LoadTree({ userId })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadApprovalProcesses() {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.LoadApprovalProcesses({ userId })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadUsers(orgUnitId, roleId, params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.LoadAssignedUsers({
            userId,
            orgUnitId,
            roleId,
            params,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadAddresses(orgUnitId) {
        // TODO: replace it after turn on loadAddresses$
        // this.store.dispatch(
        //   new OrgUnitActions.LoadAddresses({ userId, orgUnitId })
        // );
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.LoadOrgUnit({ userId, orgUnitId })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getOrgUnit(orgUnitId) {
        return this.store.select(getOrgUnit(orgUnitId));
    }
    getOrgUnitValue(orgUnitId) {
        return this.store
            .select(getOrgUnitValue(orgUnitId))
            .pipe(filter((orgUnit) => Boolean(orgUnit)));
    }
    getTreeState() {
        return this.store.select(getOrgUnitTree());
    }
    getOrgUnitsList() {
        return this.store.select(getOrgUnitList());
    }
    getAddressesState(orgUnitId) {
        return this.store.select(getB2BAddresses(orgUnitId));
    }
    getAddressState(addressId) {
        return this.store.select(getB2BAddress(addressId));
    }
    getAssignedUsers(orgUnitId, roleId, params) {
        return this.store.select(getAssignedUsers(orgUnitId, roleId, params));
    }
    getApprovalProcessesList() {
        return this.store.select(getApprovalProcesses());
    }
    get(orgUnitId) {
        const loading$ = this.getOrgUnit(orgUnitId).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.load(orgUnitId);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getOrgUnitValue(orgUnitId));
    }
    getCostCenters(orgUnitId) {
        return this.get(orgUnitId).pipe(map((orgUnit) => ({
            values: orgUnit.costCenters ?? [],
        })));
    }
    findUnitChildrenInTree(orginitId, unit) {
        return unit.id === orginitId
            ? unit.children ?? []
            : (unit.children ?? []).flatMap((child) => this.findUnitChildrenInTree(orginitId, child));
    }
    getChildUnits(orgUnitId) {
        return this.getTree().pipe(map((tree) => ({
            values: tree ? this.findUnitChildrenInTree(orgUnitId, tree) : [],
        })));
    }
    getTree() {
        return this.getTreeState().pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadTree();
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getApprovalProcesses() {
        return this.getApprovalProcessesList().pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadApprovalProcesses();
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getList() {
        return this.getOrgUnitsList().pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadList();
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getActiveUnitList() {
        return this.getList().pipe(map((units) => units?.filter((unit) => unit.active)), map((units) => units?.sort(this.sortUnitList)));
    }
    sortUnitList(a, b) {
        return (a.id ?? '').toLowerCase() < (b.id ?? '').toLowerCase()
            ? -1
            : (a.id ?? '').toLowerCase() > (b.id ?? '').toLowerCase()
                ? 1
                : 0;
    }
    getUsers(orgUnitId, roleId, params) {
        return this.getAssignedUsers(orgUnitId, roleId, params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadUsers(orgUnitId, roleId, params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getErrorState(orgCustomerId) {
        return this.getOrgUnitState(orgCustomerId).pipe(map((state) => state.error ?? false));
    }
    create(unit) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.CreateUnit({ userId, unit })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    update(unitCode, unit) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.UpdateUnit({ userId, unitCode, unit })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getLoadingStatus(orgUnitId) {
        return getItemStatus(this.getOrgUnit(orgUnitId));
    }
    assignRole(orgCustomerId, roleId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.AssignRole({
            userId,
            orgCustomerId,
            roleId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    unassignRole(orgCustomerId, roleId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.UnassignRole({
            userId,
            orgCustomerId,
            roleId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    assignApprover(orgUnitId, orgCustomerId, roleId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.AssignApprover({
            orgUnitId,
            userId,
            orgCustomerId,
            roleId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    unassignApprover(orgUnitId, orgCustomerId, roleId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.UnassignApprover({
            orgUnitId,
            userId,
            orgCustomerId,
            roleId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    createAddress(orgUnitId, address) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.CreateAddress({
            userId,
            orgUnitId,
            address,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getAddresses(orgUnitId) {
        return this.getAddressesState(orgUnitId).pipe(observeOn(queueScheduler), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadAddresses(orgUnitId);
            }
        }), filter((state) => Boolean(state.success || state.error)), map((state) => state.value));
    }
    getAddress(orgUnitId, addressId) {
        return this.getAddressState(addressId).pipe(observeOn(queueScheduler), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadAddresses(orgUnitId);
            }
        }), filter((state) => Boolean(state.success || state.error)), map((state) => state.value));
    }
    updateAddress(orgUnitId, addressId, address) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.UpdateAddress({
            userId,
            orgUnitId,
            addressId,
            address,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getAddressLoadingStatus(addressId) {
        return getItemStatus(this.getAddressState(addressId));
    }
    deleteAddress(orgUnitId, addressId) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new OrgUnitActions.DeleteAddress({
            userId,
            orgUnitId,
            addressId,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getOrgUnitState(orgUnitId) {
        return this.store.select(getOrgUnitState(orgUnitId));
    }
}
OrgUnitService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OrgUnitService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
OrgUnitService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OrgUnitService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OrgUnitService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnLXVuaXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZS9zZXJ2aWNlcy9vcmctdW5pdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBYTNDLE9BQU8sRUFBYyxjQUFjLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHeEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXhELE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsZ0JBQWdCLEVBQ2hCLGFBQWEsRUFDYixlQUFlLEVBQ2YsVUFBVSxFQUNWLGNBQWMsRUFDZCxlQUFlLEVBQ2YsY0FBYyxFQUNkLGVBQWUsR0FDaEIsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFHekQsTUFBTSxPQUFPLGNBQWM7SUFDekIsWUFDWSxLQUFtQyxFQUNuQyxhQUE0QjtRQUQ1QixVQUFLLEdBQUwsS0FBSyxDQUE4QjtRQUNuQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUNyQyxDQUFDO0lBRUosc0JBQXNCLENBQ3BCLFNBQWlCLEVBQ2pCLE1BQWMsRUFDZCxNQUFvQjtRQUVwQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDakIsSUFBSSxjQUFjLENBQUMsa0JBQWtCLENBQUMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQ3JFLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxDQUFDLFNBQWlC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akIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDOzsyR0ExY1UsY0FBYzsrR0FBZCxjQUFjLGNBREQsTUFBTTsyRkFDbkIsY0FBYztrQkFEMUIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMiBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7XG4gIEFkZHJlc3MsXG4gIEIyQkFwcHJvdmFsUHJvY2VzcyxcbiAgQjJCVW5pdCxcbiAgQjJCVXNlcixcbiAgQ29zdENlbnRlcixcbiAgRW50aXRpZXNNb2RlbCxcbiAgU2VhcmNoQ29uZmlnLFxuICBTdGF0ZVV0aWxzLFxuICBVc2VySWRTZXJ2aWNlLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgcXVldWVTY2hlZHVsZXIsIHVzaW5nIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBhdWRpdFRpbWUsIGZpbHRlciwgbWFwLCBvYnNlcnZlT24sIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXMgfSBmcm9tICcuLi9tb2RlbC9vcmdhbml6YXRpb24taXRlbS1zdGF0dXMnO1xuaW1wb3J0IHsgQjJCVW5pdE5vZGUgfSBmcm9tICcuLi9tb2RlbC91bml0LW5vZGUubW9kZWwnO1xuaW1wb3J0IHsgT3JnVW5pdEFjdGlvbnMgfSBmcm9tICcuLi9zdG9yZS9hY3Rpb25zL2luZGV4JztcbmltcG9ydCB7IFN0YXRlV2l0aE9yZ2FuaXphdGlvbiB9IGZyb20gJy4uL3N0b3JlL29yZ2FuaXphdGlvbi1zdGF0ZSc7XG5pbXBvcnQge1xuICBnZXRBcHByb3ZhbFByb2Nlc3NlcyxcbiAgZ2V0QXNzaWduZWRVc2VycyxcbiAgZ2V0QjJCQWRkcmVzcyxcbiAgZ2V0QjJCQWRkcmVzc2VzLFxuICBnZXRPcmdVbml0LFxuICBnZXRPcmdVbml0TGlzdCxcbiAgZ2V0T3JnVW5pdFN0YXRlLFxuICBnZXRPcmdVbml0VHJlZSxcbiAgZ2V0T3JnVW5pdFZhbHVlLFxufSBmcm9tICcuLi9zdG9yZS9zZWxlY3RvcnMvb3JnLXVuaXQuc2VsZWN0b3InO1xuaW1wb3J0IHsgZ2V0SXRlbVN0YXR1cyB9IGZyb20gJy4uL3V0aWxzL2dldC1pdGVtLXN0YXR1cyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgT3JnVW5pdFNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgc3RvcmU6IFN0b3JlPFN0YXRlV2l0aE9yZ2FuaXphdGlvbj4sXG4gICAgcHJvdGVjdGVkIHVzZXJJZFNlcnZpY2U6IFVzZXJJZFNlcnZpY2VcbiAgKSB7fVxuXG4gIGNsZWFyQXNzaWduZWRVc2Vyc0xpc3QoXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgcm9sZUlkOiBzdHJpbmcsXG4gICAgcGFyYW1zOiBTZWFyY2hDb25maWdcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaChcbiAgICAgIG5ldyBPcmdVbml0QWN0aW9ucy5DbGVhckFzc2lnbmVkVXNlcnMoeyBvcmdVbml0SWQsIHJvbGVJZCwgcGFyYW1zIH0pXG4gICAgKTtcbiAgfVxuXG4gIGxvYWQob3JnVW5pdElkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJJZFNlcnZpY2UudGFrZVVzZXJJZCh0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAodXNlcklkKSA9PlxuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgIG5ldyBPcmdVbml0QWN0aW9ucy5Mb2FkT3JnVW5pdCh7IHVzZXJJZCwgb3JnVW5pdElkIH0pXG4gICAgICAgICksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IGZvciBmdXR1cmUgcmVsZWFzZXMsIHJlZmFjdG9yIHRoaXMgcGFydCB0byB0aHJvd24gZXJyb3JzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGxvYWRMaXN0KCk6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2gobmV3IE9yZ1VuaXRBY3Rpb25zLkxvYWRPcmdVbml0Tm9kZXMoeyB1c2VySWQgfSkpLFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBmb3IgZnV0dXJlIHJlbGVhc2VzLCByZWZhY3RvciB0aGlzIHBhcnQgdG8gdGhyb3duIGVycm9yc1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBsb2FkVHJlZSgpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJJZFNlcnZpY2UudGFrZVVzZXJJZCh0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAodXNlcklkKSA9PiB0aGlzLnN0b3JlLmRpc3BhdGNoKG5ldyBPcmdVbml0QWN0aW9ucy5Mb2FkVHJlZSh7IHVzZXJJZCB9KSksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IGZvciBmdXR1cmUgcmVsZWFzZXMsIHJlZmFjdG9yIHRoaXMgcGFydCB0byB0aHJvd24gZXJyb3JzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGxvYWRBcHByb3ZhbFByb2Nlc3NlcygpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJJZFNlcnZpY2UudGFrZVVzZXJJZCh0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAodXNlcklkKSA9PlxuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgIG5ldyBPcmdVbml0QWN0aW9ucy5Mb2FkQXBwcm92YWxQcm9jZXNzZXMoeyB1c2VySWQgfSlcbiAgICAgICAgKSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogZm9yIGZ1dHVyZSByZWxlYXNlcywgcmVmYWN0b3IgdGhpcyBwYXJ0IHRvIHRocm93biBlcnJvcnNcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgbG9hZFVzZXJzKG9yZ1VuaXRJZDogc3RyaW5nLCByb2xlSWQ6IHN0cmluZywgcGFyYW1zOiBTZWFyY2hDb25maWcpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJJZFNlcnZpY2UudGFrZVVzZXJJZCh0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAodXNlcklkKSA9PlxuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgIG5ldyBPcmdVbml0QWN0aW9ucy5Mb2FkQXNzaWduZWRVc2Vycyh7XG4gICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICBvcmdVbml0SWQsXG4gICAgICAgICAgICByb2xlSWQsXG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogZm9yIGZ1dHVyZSByZWxlYXNlcywgcmVmYWN0b3IgdGhpcyBwYXJ0IHRvIHRocm93biBlcnJvcnNcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgbG9hZEFkZHJlc3NlcyhvcmdVbml0SWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vIFRPRE86IHJlcGxhY2UgaXQgYWZ0ZXIgdHVybiBvbiBsb2FkQWRkcmVzc2VzJFxuICAgIC8vIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgLy8gICBuZXcgT3JnVW5pdEFjdGlvbnMuTG9hZEFkZHJlc3Nlcyh7IHVzZXJJZCwgb3JnVW5pdElkIH0pXG4gICAgLy8gKTtcbiAgICB0aGlzLnVzZXJJZFNlcnZpY2UudGFrZVVzZXJJZCh0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAodXNlcklkKSA9PlxuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgIG5ldyBPcmdVbml0QWN0aW9ucy5Mb2FkT3JnVW5pdCh7IHVzZXJJZCwgb3JnVW5pdElkIH0pXG4gICAgICAgICksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IGZvciBmdXR1cmUgcmVsZWFzZXMsIHJlZmFjdG9yIHRoaXMgcGFydCB0byB0aHJvd24gZXJyb3JzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3JnVW5pdChcbiAgICBvcmdVbml0SWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8QjJCVW5pdD4+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5zZWxlY3QoZ2V0T3JnVW5pdChvcmdVbml0SWQpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3JnVW5pdFZhbHVlKG9yZ1VuaXRJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCMkJVbml0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmVcbiAgICAgIC5zZWxlY3QoZ2V0T3JnVW5pdFZhbHVlKG9yZ1VuaXRJZCkpXG4gICAgICAucGlwZShmaWx0ZXIoKG9yZ1VuaXQpID0+IEJvb2xlYW4ob3JnVW5pdCkpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VHJlZVN0YXRlKCk6IE9ic2VydmFibGU8U3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxCMkJVbml0Tm9kZT4+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5zZWxlY3QoZ2V0T3JnVW5pdFRyZWUoKSk7XG4gIH1cblxuICBwcml2YXRlIGdldE9yZ1VuaXRzTGlzdCgpOiBPYnNlcnZhYmxlPFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8QjJCVW5pdE5vZGVbXT4+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5zZWxlY3QoZ2V0T3JnVW5pdExpc3QoKSk7XG4gIH1cblxuICBwcml2YXRlIGdldEFkZHJlc3Nlc1N0YXRlKFxuICAgIG9yZ1VuaXRJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8U3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxFbnRpdGllc01vZGVsPEFkZHJlc3M+Pj4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnNlbGVjdChnZXRCMkJBZGRyZXNzZXMob3JnVW5pdElkKSk7XG4gIH1cblxuICBwcml2YXRlIGdldEFkZHJlc3NTdGF0ZShcbiAgICBhZGRyZXNzSWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8QWRkcmVzcz4+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5zZWxlY3QoZ2V0QjJCQWRkcmVzcyhhZGRyZXNzSWQpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QXNzaWduZWRVc2VycyhcbiAgICBvcmdVbml0SWQ6IHN0cmluZyxcbiAgICByb2xlSWQ6IHN0cmluZyxcbiAgICBwYXJhbXM6IFNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxCMkJVc2VyPj4+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5zZWxlY3QoZ2V0QXNzaWduZWRVc2VycyhvcmdVbml0SWQsIHJvbGVJZCwgcGFyYW1zKSk7XG4gIH1cblxuICBwcml2YXRlIGdldEFwcHJvdmFsUHJvY2Vzc2VzTGlzdCgpOiBPYnNlcnZhYmxlPFxuICAgIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8QjJCQXBwcm92YWxQcm9jZXNzW10+XG4gID4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnNlbGVjdChnZXRBcHByb3ZhbFByb2Nlc3NlcygpKTtcbiAgfVxuXG4gIGdldChvcmdVbml0SWQ6IHN0cmluZyk6IE9ic2VydmFibGU8QjJCVW5pdD4ge1xuICAgIGNvbnN0IGxvYWRpbmckID0gdGhpcy5nZXRPcmdVbml0KG9yZ1VuaXRJZCkucGlwZShcbiAgICAgIGF1ZGl0VGltZSgwKSxcbiAgICAgIHRhcCgoc3RhdGUpID0+IHtcbiAgICAgICAgaWYgKCEoc3RhdGUubG9hZGluZyB8fCBzdGF0ZS5zdWNjZXNzIHx8IHN0YXRlLmVycm9yKSkge1xuICAgICAgICAgIHRoaXMubG9hZChvcmdVbml0SWQpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG5cbiAgICByZXR1cm4gdXNpbmcoXG4gICAgICAoKSA9PiBsb2FkaW5nJC5zdWJzY3JpYmUoKSxcbiAgICAgICgpID0+IHRoaXMuZ2V0T3JnVW5pdFZhbHVlKG9yZ1VuaXRJZClcbiAgICApO1xuICB9XG5cbiAgZ2V0Q29zdENlbnRlcnMob3JnVW5pdElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8Q29zdENlbnRlcj4+IHtcbiAgICByZXR1cm4gdGhpcy5nZXQob3JnVW5pdElkKS5waXBlKFxuICAgICAgbWFwKChvcmdVbml0KSA9PiAoe1xuICAgICAgICB2YWx1ZXM6IG9yZ1VuaXQuY29zdENlbnRlcnMgPz8gW10sXG4gICAgICB9KSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGZpbmRVbml0Q2hpbGRyZW5JblRyZWUoXG4gICAgb3JnaW5pdElkOiBzdHJpbmcsXG4gICAgdW5pdDogQjJCVW5pdE5vZGVcbiAgKTogQjJCVW5pdE5vZGVbXSB7XG4gICAgcmV0dXJuIHVuaXQuaWQgPT09IG9yZ2luaXRJZFxuICAgICAgPyB1bml0LmNoaWxkcmVuID8/IFtdXG4gICAgICA6ICh1bml0LmNoaWxkcmVuID8/IFtdKS5mbGF0TWFwKChjaGlsZCkgPT5cbiAgICAgICAgICB0aGlzLmZpbmRVbml0Q2hpbGRyZW5JblRyZWUob3JnaW5pdElkLCBjaGlsZClcbiAgICAgICAgKTtcbiAgfVxuXG4gIGdldENoaWxkVW5pdHMob3JnVW5pdElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8QjJCVW5pdE5vZGU+PiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VHJlZSgpLnBpcGUoXG4gICAgICBtYXAoKHRyZWUpID0+ICh7XG4gICAgICAgIHZhbHVlczogdHJlZSA/IHRoaXMuZmluZFVuaXRDaGlsZHJlbkluVHJlZShvcmdVbml0SWQsIHRyZWUpIDogW10sXG4gICAgICB9KSlcbiAgICApO1xuICB9XG5cbiAgZ2V0VHJlZSgpOiBPYnNlcnZhYmxlPEIyQlVuaXROb2RlIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VHJlZVN0YXRlKCkucGlwZShcbiAgICAgIG9ic2VydmVPbihxdWV1ZVNjaGVkdWxlciksXG4gICAgICB0YXAoKHByb2Nlc3M6IFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8QjJCVW5pdE5vZGU+KSA9PiB7XG4gICAgICAgIGlmICghKHByb2Nlc3MubG9hZGluZyB8fCBwcm9jZXNzLnN1Y2Nlc3MgfHwgcHJvY2Vzcy5lcnJvcikpIHtcbiAgICAgICAgICB0aGlzLmxvYWRUcmVlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgZmlsdGVyKChwcm9jZXNzOiBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEIyQlVuaXROb2RlPikgPT5cbiAgICAgICAgQm9vbGVhbihwcm9jZXNzLnN1Y2Nlc3MgfHwgcHJvY2Vzcy5lcnJvcilcbiAgICAgICksXG4gICAgICBtYXAoKHJlc3VsdCkgPT4gcmVzdWx0LnZhbHVlKVxuICAgICk7XG4gIH1cblxuICBnZXRBcHByb3ZhbFByb2Nlc3NlcygpOiBPYnNlcnZhYmxlPEIyQkFwcHJvdmFsUHJvY2Vzc1tdIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXBwcm92YWxQcm9jZXNzZXNMaXN0KCkucGlwZShcbiAgICAgIG9ic2VydmVPbihxdWV1ZVNjaGVkdWxlciksXG4gICAgICB0YXAoKHByb2Nlc3M6IFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8QjJCQXBwcm92YWxQcm9jZXNzW10+KSA9PiB7XG4gICAgICAgIGlmICghKHByb2Nlc3MubG9hZGluZyB8fCBwcm9jZXNzLnN1Y2Nlc3MgfHwgcHJvY2Vzcy5lcnJvcikpIHtcbiAgICAgICAgICB0aGlzLmxvYWRBcHByb3ZhbFByb2Nlc3NlcygpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGZpbHRlcigocHJvY2VzczogU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxCMkJBcHByb3ZhbFByb2Nlc3NbXT4pID0+XG4gICAgICAgIEJvb2xlYW4ocHJvY2Vzcy5zdWNjZXNzIHx8IHByb2Nlc3MuZXJyb3IpXG4gICAgICApLFxuICAgICAgbWFwKChyZXN1bHQpID0+IHJlc3VsdC52YWx1ZSlcbiAgICApO1xuICB9XG5cbiAgZ2V0TGlzdCgpOiBPYnNlcnZhYmxlPEIyQlVuaXROb2RlW10gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRPcmdVbml0c0xpc3QoKS5waXBlKFxuICAgICAgb2JzZXJ2ZU9uKHF1ZXVlU2NoZWR1bGVyKSxcbiAgICAgIHRhcCgocHJvY2VzczogU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxCMkJVbml0Tm9kZVtdPikgPT4ge1xuICAgICAgICBpZiAoIShwcm9jZXNzLmxvYWRpbmcgfHwgcHJvY2Vzcy5zdWNjZXNzIHx8IHByb2Nlc3MuZXJyb3IpKSB7XG4gICAgICAgICAgdGhpcy5sb2FkTGlzdCgpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGZpbHRlcigocHJvY2VzczogU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxCMkJVbml0Tm9kZVtdPikgPT5cbiAgICAgICAgQm9vbGVhbihwcm9jZXNzLnN1Y2Nlc3MgfHwgcHJvY2Vzcy5lcnJvcilcbiAgICAgICksXG4gICAgICBtYXAoKHJlc3VsdCkgPT4gcmVzdWx0LnZhbHVlKVxuICAgICk7XG4gIH1cblxuICBnZXRBY3RpdmVVbml0TGlzdCgpOiBPYnNlcnZhYmxlPEIyQlVuaXROb2RlW10gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRMaXN0KCkucGlwZShcbiAgICAgIG1hcCgodW5pdHMpID0+IHVuaXRzPy5maWx0ZXIoKHVuaXQpID0+IHVuaXQuYWN0aXZlKSksXG4gICAgICBtYXAoKHVuaXRzKSA9PiB1bml0cz8uc29ydCh0aGlzLnNvcnRVbml0TGlzdCkpXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzb3J0VW5pdExpc3QoYTogQjJCVW5pdE5vZGUsIGI6IEIyQlVuaXROb2RlKSB7XG4gICAgcmV0dXJuIChhLmlkID8/ICcnKS50b0xvd2VyQ2FzZSgpIDwgKGIuaWQgPz8gJycpLnRvTG93ZXJDYXNlKClcbiAgICAgID8gLTFcbiAgICAgIDogKGEuaWQgPz8gJycpLnRvTG93ZXJDYXNlKCkgPiAoYi5pZCA/PyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgPyAxXG4gICAgICA6IDA7XG4gIH1cblxuICBnZXRVc2VycyhcbiAgICBvcmdVbml0SWQ6IHN0cmluZyxcbiAgICByb2xlSWQ6IHN0cmluZyxcbiAgICBwYXJhbXM6IFNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8QjJCVXNlcj4gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRBc3NpZ25lZFVzZXJzKG9yZ1VuaXRJZCwgcm9sZUlkLCBwYXJhbXMpLnBpcGUoXG4gICAgICBvYnNlcnZlT24ocXVldWVTY2hlZHVsZXIpLFxuICAgICAgdGFwKChwcm9jZXNzOiBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEVudGl0aWVzTW9kZWw8QjJCVXNlcj4+KSA9PiB7XG4gICAgICAgIGlmICghKHByb2Nlc3MubG9hZGluZyB8fCBwcm9jZXNzLnN1Y2Nlc3MgfHwgcHJvY2Vzcy5lcnJvcikpIHtcbiAgICAgICAgICB0aGlzLmxvYWRVc2VycyhvcmdVbml0SWQsIHJvbGVJZCwgcGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBmaWx0ZXIoKHByb2Nlc3M6IFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxCMkJVc2VyPj4pID0+XG4gICAgICAgIEJvb2xlYW4ocHJvY2Vzcy5zdWNjZXNzIHx8IHByb2Nlc3MuZXJyb3IpXG4gICAgICApLFxuICAgICAgbWFwKChyZXN1bHQpID0+IHJlc3VsdC52YWx1ZSlcbiAgICApO1xuICB9XG5cbiAgZ2V0RXJyb3JTdGF0ZShvcmdDdXN0b21lcklkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRPcmdVbml0U3RhdGUob3JnQ3VzdG9tZXJJZCkucGlwZShcbiAgICAgIG1hcCgoc3RhdGUpID0+IHN0YXRlLmVycm9yID8/IGZhbHNlKVxuICAgICk7XG4gIH1cblxuICBjcmVhdGUodW5pdDogQjJCVW5pdCk6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2gobmV3IE9yZ1VuaXRBY3Rpb25zLkNyZWF0ZVVuaXQoeyB1c2VySWQsIHVuaXQgfSkpLFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBmb3IgZnV0dXJlIHJlbGVhc2VzLCByZWZhY3RvciB0aGlzIHBhcnQgdG8gdGhyb3duIGVycm9yc1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICB1cGRhdGUodW5pdENvZGU6IHN0cmluZywgdW5pdDogQjJCVW5pdCk6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgbmV3IE9yZ1VuaXRBY3Rpb25zLlVwZGF0ZVVuaXQoeyB1c2VySWQsIHVuaXRDb2RlLCB1bml0IH0pXG4gICAgICAgICksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IGZvciBmdXR1cmUgcmVsZWFzZXMsIHJlZmFjdG9yIHRoaXMgcGFydCB0byB0aHJvd24gZXJyb3JzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGdldExvYWRpbmdTdGF0dXMoXG4gICAgb3JnVW5pdElkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb25JdGVtU3RhdHVzPEIyQlVuaXQ+PiB7XG4gICAgcmV0dXJuIGdldEl0ZW1TdGF0dXModGhpcy5nZXRPcmdVbml0KG9yZ1VuaXRJZCkpO1xuICB9XG5cbiAgYXNzaWduUm9sZShvcmdDdXN0b21lcklkOiBzdHJpbmcsIHJvbGVJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy51c2VySWRTZXJ2aWNlLnRha2VVc2VySWQodHJ1ZSkuc3Vic2NyaWJlKFxuICAgICAgKHVzZXJJZCkgPT5cbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChcbiAgICAgICAgICBuZXcgT3JnVW5pdEFjdGlvbnMuQXNzaWduUm9sZSh7XG4gICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICBvcmdDdXN0b21lcklkLFxuICAgICAgICAgICAgcm9sZUlkLFxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IGZvciBmdXR1cmUgcmVsZWFzZXMsIHJlZmFjdG9yIHRoaXMgcGFydCB0byB0aHJvd24gZXJyb3JzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHVuYXNzaWduUm9sZShvcmdDdXN0b21lcklkOiBzdHJpbmcsIHJvbGVJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy51c2VySWRTZXJ2aWNlLnRha2VVc2VySWQodHJ1ZSkuc3Vic2NyaWJlKFxuICAgICAgKHVzZXJJZCkgPT5cbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChcbiAgICAgICAgICBuZXcgT3JnVW5pdEFjdGlvbnMuVW5hc3NpZ25Sb2xlKHtcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIG9yZ0N1c3RvbWVySWQsXG4gICAgICAgICAgICByb2xlSWQsXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogZm9yIGZ1dHVyZSByZWxlYXNlcywgcmVmYWN0b3IgdGhpcyBwYXJ0IHRvIHRocm93biBlcnJvcnNcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgYXNzaWduQXBwcm92ZXIoXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nLFxuICAgIHJvbGVJZDogc3RyaW5nXG4gICk6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgbmV3IE9yZ1VuaXRBY3Rpb25zLkFzc2lnbkFwcHJvdmVyKHtcbiAgICAgICAgICAgIG9yZ1VuaXRJZCxcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIG9yZ0N1c3RvbWVySWQsXG4gICAgICAgICAgICByb2xlSWQsXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogZm9yIGZ1dHVyZSByZWxlYXNlcywgcmVmYWN0b3IgdGhpcyBwYXJ0IHRvIHRocm93biBlcnJvcnNcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgdW5hc3NpZ25BcHByb3ZlcihcbiAgICBvcmdVbml0SWQ6IHN0cmluZyxcbiAgICBvcmdDdXN0b21lcklkOiBzdHJpbmcsXG4gICAgcm9sZUlkOiBzdHJpbmdcbiAgKTogdm9pZCB7XG4gICAgdGhpcy51c2VySWRTZXJ2aWNlLnRha2VVc2VySWQodHJ1ZSkuc3Vic2NyaWJlKFxuICAgICAgKHVzZXJJZCkgPT5cbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChcbiAgICAgICAgICBuZXcgT3JnVW5pdEFjdGlvbnMuVW5hc3NpZ25BcHByb3Zlcih7XG4gICAgICAgICAgICBvcmdVbml0SWQsXG4gICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICBvcmdDdXN0b21lcklkLFxuICAgICAgICAgICAgcm9sZUlkLFxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IGZvciBmdXR1cmUgcmVsZWFzZXMsIHJlZmFjdG9yIHRoaXMgcGFydCB0byB0aHJvd24gZXJyb3JzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZUFkZHJlc3Mob3JnVW5pdElkOiBzdHJpbmcsIGFkZHJlc3M6IEFkZHJlc3MpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJJZFNlcnZpY2UudGFrZVVzZXJJZCh0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAodXNlcklkKSA9PlxuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgIG5ldyBPcmdVbml0QWN0aW9ucy5DcmVhdGVBZGRyZXNzKHtcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIG9yZ1VuaXRJZCxcbiAgICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogZm9yIGZ1dHVyZSByZWxlYXNlcywgcmVmYWN0b3IgdGhpcyBwYXJ0IHRvIHRocm93biBlcnJvcnNcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgZ2V0QWRkcmVzc2VzKFxuICAgIG9yZ1VuaXRJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxBZGRyZXNzPiB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLmdldEFkZHJlc3Nlc1N0YXRlKG9yZ1VuaXRJZCkucGlwZShcbiAgICAgIG9ic2VydmVPbihxdWV1ZVNjaGVkdWxlciksXG4gICAgICB0YXAoKHN0YXRlKSA9PiB7XG4gICAgICAgIGlmICghKHN0YXRlLmxvYWRpbmcgfHwgc3RhdGUuc3VjY2VzcyB8fCBzdGF0ZS5lcnJvcikpIHtcbiAgICAgICAgICB0aGlzLmxvYWRBZGRyZXNzZXMob3JnVW5pdElkKTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBmaWx0ZXIoKHN0YXRlKSA9PiBCb29sZWFuKHN0YXRlLnN1Y2Nlc3MgfHwgc3RhdGUuZXJyb3IpKSxcbiAgICAgIG1hcCgoc3RhdGUpID0+IHN0YXRlLnZhbHVlKVxuICAgICk7XG4gIH1cblxuICBnZXRBZGRyZXNzKFxuICAgIG9yZ1VuaXRJZDogc3RyaW5nLFxuICAgIGFkZHJlc3NJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8QWRkcmVzcyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLmdldEFkZHJlc3NTdGF0ZShhZGRyZXNzSWQpLnBpcGUoXG4gICAgICBvYnNlcnZlT24ocXVldWVTY2hlZHVsZXIpLFxuICAgICAgdGFwKChzdGF0ZSkgPT4ge1xuICAgICAgICBpZiAoIShzdGF0ZS5sb2FkaW5nIHx8IHN0YXRlLnN1Y2Nlc3MgfHwgc3RhdGUuZXJyb3IpKSB7XG4gICAgICAgICAgdGhpcy5sb2FkQWRkcmVzc2VzKG9yZ1VuaXRJZCk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgZmlsdGVyKChzdGF0ZSkgPT4gQm9vbGVhbihzdGF0ZS5zdWNjZXNzIHx8IHN0YXRlLmVycm9yKSksXG4gICAgICBtYXAoKHN0YXRlKSA9PiBzdGF0ZS52YWx1ZSlcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlQWRkcmVzcyhvcmdVbml0SWQ6IHN0cmluZywgYWRkcmVzc0lkOiBzdHJpbmcsIGFkZHJlc3M6IEFkZHJlc3MpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJJZFNlcnZpY2UudGFrZVVzZXJJZCh0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAodXNlcklkKSA9PlxuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgIG5ldyBPcmdVbml0QWN0aW9ucy5VcGRhdGVBZGRyZXNzKHtcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIG9yZ1VuaXRJZCxcbiAgICAgICAgICAgIGFkZHJlc3NJZCxcbiAgICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogZm9yIGZ1dHVyZSByZWxlYXNlcywgcmVmYWN0b3IgdGhpcyBwYXJ0IHRvIHRocm93biBlcnJvcnNcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgZ2V0QWRkcmVzc0xvYWRpbmdTdGF0dXMoXG4gICAgYWRkcmVzc0lkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb25JdGVtU3RhdHVzPEFkZHJlc3M+PiB7XG4gICAgcmV0dXJuIGdldEl0ZW1TdGF0dXModGhpcy5nZXRBZGRyZXNzU3RhdGUoYWRkcmVzc0lkKSk7XG4gIH1cblxuICBkZWxldGVBZGRyZXNzKG9yZ1VuaXRJZDogc3RyaW5nLCBhZGRyZXNzSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnN1YnNjcmliZShcbiAgICAgICh1c2VySWQpID0+XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgbmV3IE9yZ1VuaXRBY3Rpb25zLkRlbGV0ZUFkZHJlc3Moe1xuICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgb3JnVW5pdElkLFxuICAgICAgICAgICAgYWRkcmVzc0lkLFxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IGZvciBmdXR1cmUgcmVsZWFzZXMsIHJlZmFjdG9yIHRoaXMgcGFydCB0byB0aHJvd24gZXJyb3JzXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3JnVW5pdFN0YXRlKFxuICAgIG9yZ1VuaXRJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8U3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxCMkJVbml0Pj4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnNlbGVjdChnZXRPcmdVbml0U3RhdGUob3JnVW5pdElkKSk7XG4gIH1cbn1cbiJdfQ==