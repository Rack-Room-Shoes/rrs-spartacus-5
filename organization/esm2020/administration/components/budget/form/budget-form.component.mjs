/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { tap } from 'rxjs/operators';
import { CurrentItemService } from '../../shared/current-item.service';
import { ItemService } from '../../shared/item.service';
import { createCodeForEntityName } from '../../shared/utility/entity-code';
import { BudgetItemService } from '../services/budget-item.service';
import { CurrentBudgetService } from '../services/current-budget.service';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "@spartacus/organization/administration/core";
import * as i3 from "@spartacus/core";
import * as i4 from "@angular/common";
import * as i5 from "../../shared/form/form.component";
import * as i6 from "@ng-select/ng-select";
import * as i7 from "@angular/forms";
import * as i8 from "@spartacus/storefront";
export class BudgetFormComponent {
    constructor(itemService, unitService, currencyService) {
        this.itemService = itemService;
        this.unitService = unitService;
        this.currencyService = currencyService;
        this.form = this.itemService.getForm();
        this.units$ = this.unitService
            .getActiveUnitList()
            .pipe(tap((units) => {
            if (units && units.length === 1) {
                this.form?.get('orgUnit.uid')?.setValue(units[0]?.id);
            }
        }));
        this.currencies$ = this.currencyService.getAll().pipe(tap((currency) => {
            if (currency.length === 1) {
                this.form?.get('currency.isocode')?.setValue(currency[0]?.isocode);
            }
        }));
    }
    ngOnInit() {
        this.unitService.loadList();
    }
    createCodeWithName(name, code) {
        createCodeForEntityName(name, code);
    }
}
BudgetFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: BudgetFormComponent, deps: [{ token: i1.ItemService }, { token: i2.OrgUnitService }, { token: i3.CurrencyService }], target: i0.ɵɵFactoryTarget.Component });
BudgetFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: BudgetFormComponent, selector: "cx-org-budget-form", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: BudgetItemService,
        },
        {
            provide: CurrentItemService,
            useExisting: CurrentBudgetService,
        },
    ], ngImport: i0, template: "<cx-org-form i18nRoot=\"orgBudget\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgBudget.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgBudget.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createCodeWithName(form.get('name'), form.get('code'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgBudget.code' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgBudget.code' | cxTranslate }}\"\n        formControlName=\"code\"\n      />\n      <cx-form-errors [control]=\"form.get('code')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{\n        'orgBudget.startDate' | cxTranslate\n      }}</span>\n      <cx-date-picker\n        [control]=\"$any(form.get('startDate'))\"\n        [max]=\"form.get('endDate')?.value\"\n        [required]=\"true\"\n        (update)=\"form.get('endDate')?.updateValueAndValidity()\"\n      ></cx-date-picker>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{ 'orgBudget.endDate' | cxTranslate }}</span>\n      <cx-date-picker\n        [control]=\"$any(form.get('endDate'))\"\n        [min]=\"form.get('startDate')?.value\"\n        [required]=\"true\"\n        (update)=\"form.get('startDate')?.updateValueAndValidity()\"\n      ></cx-date-picker>\n    </label>\n\n    <label [formGroup]=\"$any(form.get('currency'))\">\n      <span class=\"label-content required\">{{\n        'orgBudget.currency' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"isocode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"currencies$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        [class.invalid]=\"form.get('currency.isocode')?.invalid ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgBudget.currency' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('currency.isocode')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{ 'orgBudget.amount' | cxTranslate }}</span>\n      <input\n        required=\"true\"\n        type=\"number\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgBudget.amount' | cxTranslate }}\"\n        formControlName=\"budget\"\n        min=\"0\"\n      />\n      <cx-form-errors [control]=\"form.get('budget')\"></cx-form-errors>\n    </label>\n\n    <label\n      *ngIf=\"units$ | async as units\"\n      [formGroup]=\"$any(form.get('orgUnit'))\"\n    >\n      <span class=\"label-content required\">{{\n        'orgBudget.businessUnits' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('orgUnit.uid')?.disabled ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgBudget.businessUnits' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { kind: "component", type: i6.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i7.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i7.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i7.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i8.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { kind: "component", type: i8.DatePickerComponent, selector: "cx-date-picker", inputs: ["control", "min", "max", "required"], outputs: ["update"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: BudgetFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-org-budget-form', changeDetection: ChangeDetectionStrategy.OnPush, host: { class: 'content-wrapper' }, providers: [
                        {
                            provide: ItemService,
                            useExisting: BudgetItemService,
                        },
                        {
                            provide: CurrentItemService,
                            useExisting: CurrentBudgetService,
                        },
                    ], template: "<cx-org-form i18nRoot=\"orgBudget\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgBudget.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgBudget.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createCodeWithName(form.get('name'), form.get('code'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgBudget.code' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgBudget.code' | cxTranslate }}\"\n        formControlName=\"code\"\n      />\n      <cx-form-errors [control]=\"form.get('code')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{\n        'orgBudget.startDate' | cxTranslate\n      }}</span>\n      <cx-date-picker\n        [control]=\"$any(form.get('startDate'))\"\n        [max]=\"form.get('endDate')?.value\"\n        [required]=\"true\"\n        (update)=\"form.get('endDate')?.updateValueAndValidity()\"\n      ></cx-date-picker>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{ 'orgBudget.endDate' | cxTranslate }}</span>\n      <cx-date-picker\n        [control]=\"$any(form.get('endDate'))\"\n        [min]=\"form.get('startDate')?.value\"\n        [required]=\"true\"\n        (update)=\"form.get('startDate')?.updateValueAndValidity()\"\n      ></cx-date-picker>\n    </label>\n\n    <label [formGroup]=\"$any(form.get('currency'))\">\n      <span class=\"label-content required\">{{\n        'orgBudget.currency' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"isocode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"currencies$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        [class.invalid]=\"form.get('currency.isocode')?.invalid ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgBudget.currency' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('currency.isocode')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{ 'orgBudget.amount' | cxTranslate }}</span>\n      <input\n        required=\"true\"\n        type=\"number\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgBudget.amount' | cxTranslate }}\"\n        formControlName=\"budget\"\n        min=\"0\"\n      />\n      <cx-form-errors [control]=\"form.get('budget')\"></cx-form-errors>\n    </label>\n\n    <label\n      *ngIf=\"units$ | async as units\"\n      [formGroup]=\"$any(form.get('orgUnit'))\"\n    >\n      <span class=\"label-content required\">{{\n        'orgBudget.businessUnits' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('orgUnit.uid')?.disabled ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgBudget.businessUnits' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.OrgUnitService }, { type: i3.CurrencyService }]; } });
//# sourceMappingURL=data:application/json;base64,