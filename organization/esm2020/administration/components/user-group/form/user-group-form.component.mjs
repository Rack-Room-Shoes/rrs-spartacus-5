/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { tap } from 'rxjs/operators';
import { ItemService } from '../../shared/item.service';
import { createCodeForEntityName } from '../../shared/utility/entity-code';
import { UserGroupItemService } from '../services/user-group-item.service';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "@spartacus/organization/administration/core";
import * as i3 from "@angular/common";
import * as i4 from "@ng-select/ng-select";
import * as i5 from "@angular/forms";
import * as i6 from "@spartacus/storefront";
import * as i7 from "../../shared/form/form.component";
import * as i8 from "@spartacus/core";
export class UserGroupFormComponent {
    constructor(itemService, unitService) {
        this.itemService = itemService;
        this.unitService = unitService;
        this.form = this.itemService.getForm();
        // getList ???
        this.units$ = this.unitService
            .getActiveUnitList()
            .pipe(tap((units) => {
            if (units && units.length === 1) {
                this.form?.get('orgUnit.uid')?.setValue(units[0]?.id);
            }
        }));
    }
    ngOnInit() {
        this.unitService.loadList();
    }
    createUidWithName(name, code) {
        createCodeForEntityName(name, code);
    }
}
UserGroupFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: UserGroupFormComponent, deps: [{ token: i1.ItemService }, { token: i2.OrgUnitService }], target: i0.ɵɵFactoryTarget.Component });
UserGroupFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: UserGroupFormComponent, selector: "cx-org-user-group-form", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: UserGroupItemService,
        },
    ], ngImport: i0, template: "<cx-org-form i18nRoot=\"orgUserGroup\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUserGroup.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUserGroup.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createUidWithName(form.get('name'), form.get('uid'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUserGroup.uid' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgUserGroup.uid' | cxTranslate }}\"\n        formControlName=\"uid\"\n      />\n      <cx-form-errors [control]=\"form.get('uid')\"></cx-form-errors>\n    </label>\n\n    <label [formGroup]=\"$any(form.get('orgUnit'))\">\n      <span class=\"label-content required\">{{\n        'orgUserGroup.orgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"(units$ | async) ?? null\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('orgUnit.uid')?.disabled ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUserGroup.orgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i6.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { kind: "component", type: i7.FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i8.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: UserGroupFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-org-user-group-form', changeDetection: ChangeDetectionStrategy.OnPush, host: { class: 'content-wrapper' }, providers: [
                        {
                            provide: ItemService,
                            useExisting: UserGroupItemService,
                        },
                    ], template: "<cx-org-form i18nRoot=\"orgUserGroup\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUserGroup.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUserGroup.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createUidWithName(form.get('name'), form.get('uid'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUserGroup.uid' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgUserGroup.uid' | cxTranslate }}\"\n        formControlName=\"uid\"\n      />\n      <cx-form-errors [control]=\"form.get('uid')\"></cx-form-errors>\n    </label>\n\n    <label [formGroup]=\"$any(form.get('orgUnit'))\">\n      <span class=\"label-content required\">{{\n        'orgUserGroup.orgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"(units$ | async) ?? null\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('orgUnit.uid')?.disabled ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUserGroup.orgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.OrgUnitService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ncm91cC1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyLWdyb3VwL2Zvcm0vdXNlci1ncm91cC1mb3JtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyLWdyb3VwL2Zvcm0vdXNlci1ncm91cC1mb3JtLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBUTNFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDM0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7Ozs7Ozs7Ozs7QUFjM0UsTUFBTSxPQUFPLHNCQUFzQjtJQWNqQyxZQUNZLFdBQW1DLEVBQ25DLFdBQTJCO1FBRDNCLGdCQUFXLEdBQVgsV0FBVyxDQUF3QjtRQUNuQyxnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFmdkMsU0FBSSxHQUE0QixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRTNELGNBQWM7UUFDZCxXQUFNLEdBQTBDLElBQUksQ0FBQyxXQUFXO2FBQzdELGlCQUFpQixFQUFFO2FBQ25CLElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNaLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUMvQixJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZEO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUtELENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsaUJBQWlCLENBQ2YsSUFBNEIsRUFDNUIsSUFBNEI7UUFFNUIsdUJBQXVCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7O21IQTVCVSxzQkFBc0I7dUdBQXRCLHNCQUFzQiw4RkFQdEI7UUFDVDtZQUNFLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLFdBQVcsRUFBRSxvQkFBb0I7U0FDbEM7S0FDRiwwQkM3Qkgsb3NEQW9EQTsyRkRyQmEsc0JBQXNCO2tCQVpsQyxTQUFTOytCQUNFLHdCQUF3QixtQkFFakIsdUJBQXVCLENBQUMsTUFBTSxRQUN6QyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxhQUN2Qjt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsV0FBVzs0QkFDcEIsV0FBVyxFQUFFLG9CQUFvQjt5QkFDbEM7cUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMiBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgVW50eXBlZEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7XG4gIEIyQlVuaXROb2RlLFxuICBPcmdVbml0U2VydmljZSxcbiAgVXNlckdyb3VwLFxufSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEl0ZW1TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2l0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBjcmVhdGVDb2RlRm9yRW50aXR5TmFtZSB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlsaXR5L2VudGl0eS1jb2RlJztcbmltcG9ydCB7IFVzZXJHcm91cEl0ZW1TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdXNlci1ncm91cC1pdGVtLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1vcmctdXNlci1ncm91cC1mb3JtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3VzZXItZ3JvdXAtZm9ybS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7IGNsYXNzOiAnY29udGVudC13cmFwcGVyJyB9LFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBJdGVtU2VydmljZSxcbiAgICAgIHVzZUV4aXN0aW5nOiBVc2VyR3JvdXBJdGVtU2VydmljZSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBVc2VyR3JvdXBGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgZm9ybTogVW50eXBlZEZvcm1Hcm91cCB8IG51bGwgPSB0aGlzLml0ZW1TZXJ2aWNlLmdldEZvcm0oKTtcblxuICAvLyBnZXRMaXN0ID8/P1xuICB1bml0cyQ6IE9ic2VydmFibGU8QjJCVW5pdE5vZGVbXSB8IHVuZGVmaW5lZD4gPSB0aGlzLnVuaXRTZXJ2aWNlXG4gICAgLmdldEFjdGl2ZVVuaXRMaXN0KClcbiAgICAucGlwZShcbiAgICAgIHRhcCgodW5pdHMpID0+IHtcbiAgICAgICAgaWYgKHVuaXRzICYmIHVuaXRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHRoaXMuZm9ybT8uZ2V0KCdvcmdVbml0LnVpZCcpPy5zZXRWYWx1ZSh1bml0c1swXT8uaWQpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGl0ZW1TZXJ2aWNlOiBJdGVtU2VydmljZTxVc2VyR3JvdXA+LFxuICAgIHByb3RlY3RlZCB1bml0U2VydmljZTogT3JnVW5pdFNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMudW5pdFNlcnZpY2UubG9hZExpc3QoKTtcbiAgfVxuXG4gIGNyZWF0ZVVpZFdpdGhOYW1lKFxuICAgIG5hbWU6IEFic3RyYWN0Q29udHJvbCB8IG51bGwsXG4gICAgY29kZTogQWJzdHJhY3RDb250cm9sIHwgbnVsbFxuICApOiB2b2lkIHtcbiAgICBjcmVhdGVDb2RlRm9yRW50aXR5TmFtZShuYW1lLCBjb2RlKTtcbiAgfVxufVxuIiwiPGN4LW9yZy1mb3JtIGkxOG5Sb290PVwib3JnVXNlckdyb3VwXCI+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJmb3JtXCIgW2Zvcm1Hcm91cF09XCJmb3JtXCIgbWFpbj5cbiAgICA8bGFiZWw+XG4gICAgICA8c3BhbiBjbGFzcz1cImxhYmVsLWNvbnRlbnQgcmVxdWlyZWRcIj57e1xuICAgICAgICAnb3JnVXNlckdyb3VwLm5hbWUnIHwgY3hUcmFuc2xhdGVcbiAgICAgIH19PC9zcGFuPlxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICByZXF1aXJlZFxuICAgICAgICBwbGFjZWhvbGRlcj1cInt7ICdvcmdVc2VyR3JvdXAubmFtZScgfCBjeFRyYW5zbGF0ZSB9fVwiXG4gICAgICAgIGZvcm1Db250cm9sTmFtZT1cIm5hbWVcIlxuICAgICAgICAoYmx1cik9XCJjcmVhdGVVaWRXaXRoTmFtZShmb3JtLmdldCgnbmFtZScpLCBmb3JtLmdldCgndWlkJykpXCJcbiAgICAgIC8+XG4gICAgICA8Y3gtZm9ybS1lcnJvcnMgW2NvbnRyb2xdPVwiZm9ybS5nZXQoJ25hbWUnKVwiPjwvY3gtZm9ybS1lcnJvcnM+XG4gICAgPC9sYWJlbD5cblxuICAgIDxsYWJlbD5cbiAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWwtY29udGVudCByZXF1aXJlZFwiPnt7XG4gICAgICAgICdvcmdVc2VyR3JvdXAudWlkJyB8IGN4VHJhbnNsYXRlXG4gICAgICB9fTwvc3Bhbj5cbiAgICAgIDxpbnB1dFxuICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJ7eyAnb3JnVXNlckdyb3VwLnVpZCcgfCBjeFRyYW5zbGF0ZSB9fVwiXG4gICAgICAgIGZvcm1Db250cm9sTmFtZT1cInVpZFwiXG4gICAgICAvPlxuICAgICAgPGN4LWZvcm0tZXJyb3JzIFtjb250cm9sXT1cImZvcm0uZ2V0KCd1aWQnKVwiPjwvY3gtZm9ybS1lcnJvcnM+XG4gICAgPC9sYWJlbD5cblxuICAgIDxsYWJlbCBbZm9ybUdyb3VwXT1cIiRhbnkoZm9ybS5nZXQoJ29yZ1VuaXQnKSlcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWwtY29udGVudCByZXF1aXJlZFwiPnt7XG4gICAgICAgICdvcmdVc2VyR3JvdXAub3JnVW5pdCcgfCBjeFRyYW5zbGF0ZVxuICAgICAgfX08L3NwYW4+XG4gICAgICA8bmctc2VsZWN0XG4gICAgICAgIFtpbnB1dEF0dHJzXT1cInsgcmVxdWlyZWQ6ICd0cnVlJyB9XCJcbiAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwidWlkXCJcbiAgICAgICAgW3NlYXJjaGFibGVdPVwidHJ1ZVwiXG4gICAgICAgIFtjbGVhcmFibGVdPVwiZmFsc2VcIlxuICAgICAgICBbaXRlbXNdPVwiKHVuaXRzJCB8IGFzeW5jKSA/PyBudWxsXCJcbiAgICAgICAgYmluZExhYmVsPVwibmFtZVwiXG4gICAgICAgIGJpbmRWYWx1ZT1cImlkXCJcbiAgICAgICAgW3JlYWRvbmx5XT1cImZvcm0uZ2V0KCdvcmdVbml0LnVpZCcpPy5kaXNhYmxlZCA/PyBmYWxzZVwiXG4gICAgICAgIGFwcGVuZFRvPVwiY3gtb3JnLWxpc3RcIlxuICAgICAgICBbcGxhY2Vob2xkZXJdPVwiJ29yZ1VzZXJHcm91cC5vcmdVbml0JyB8IGN4VHJhbnNsYXRlXCJcbiAgICAgID5cbiAgICAgIDwvbmctc2VsZWN0PlxuICAgICAgPGN4LWZvcm0tZXJyb3JzIFtjb250cm9sXT1cImZvcm0uZ2V0KCdvcmdVbml0LnVpZCcpXCI+PC9jeC1mb3JtLWVycm9ycz5cbiAgICA8L2xhYmVsPlxuICA8L25nLWNvbnRhaW5lcj5cbjwvY3gtb3JnLWZvcm0+XG4iXX0=