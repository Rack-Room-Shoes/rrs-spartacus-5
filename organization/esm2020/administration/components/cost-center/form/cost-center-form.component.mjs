/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { tap } from 'rxjs/operators';
import { CurrentItemService } from '../../shared/current-item.service';
import { ItemService } from '../../shared/item.service';
import { createCodeForEntityName } from '../../shared/utility/entity-code';
import { CostCenterItemService } from '../services/cost-center-item.service';
import { CurrentCostCenterService } from '../services/current-cost-center.service';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "@spartacus/organization/administration/core";
import * as i3 from "@spartacus/core";
import * as i4 from "@angular/common";
import * as i5 from "../../shared/form/form.component";
import * as i6 from "@ng-select/ng-select";
import * as i7 from "@angular/forms";
import * as i8 from "@spartacus/storefront";
export class CostCenterFormComponent {
    constructor(itemService, unitService, currencyService) {
        this.itemService = itemService;
        this.unitService = unitService;
        this.currencyService = currencyService;
        this.form = this.itemService.getForm();
        this.units$ = this.unitService
            .getActiveUnitList()
            .pipe(tap((units) => {
            if (units && units.length === 1) {
                this.form?.get('unit.uid')?.setValue(units[0]?.id);
            }
        }));
        this.currencies$ = this.currencyService.getAll().pipe(tap((currency) => {
            if (currency.length === 1) {
                this.form?.get('currency.isocode')?.setValue(currency[0]?.isocode);
            }
        }));
    }
    /**
     * Initialize the business unit for the cost center.
     *
     * If there's a unit provided, we disable the form control.
     */
    set unitKey(value) {
        if (value) {
            this.form?.get('unit.uid')?.setValue(value);
            this.form?.get('unit')?.disable();
        }
    }
    createCodeWithName(name, code) {
        createCodeForEntityName(name, code);
    }
}
CostCenterFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CostCenterFormComponent, deps: [{ token: i1.ItemService }, { token: i2.OrgUnitService }, { token: i3.CurrencyService }], target: i0.ɵɵFactoryTarget.Component });
CostCenterFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: CostCenterFormComponent, selector: "cx-org-cost-center-form", inputs: { unitKey: "unitKey" }, host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: CostCenterItemService,
        },
        {
            provide: CurrentItemService,
            useExisting: CurrentCostCenterService,
        },
    ], ngImport: i0, template: "<cx-org-form i18nRoot=\"orgCostCenter\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgCostCenter.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgCostCenter.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createCodeWithName(form.get('name'), form.get('code'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgCostCenter.code' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgCostCenter.code' | cxTranslate }}\"\n        formControlName=\"code\"\n      />\n      <cx-form-errors [control]=\"form.get('code')\"></cx-form-errors>\n    </label>\n\n    <label formGroupName=\"currency\">\n      <span class=\"label-content required\">{{\n        'orgCostCenter.currency' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"isocode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"currencies$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        [class.invalid]=\"form.get('currency.isocode')?.invalid ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgCostCenter.currency' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('currency.isocode')\"></cx-form-errors>\n    </label>\n\n    <label [formGroup]=\"$any(form.get('unit'))\">\n      <span class=\"label-content required\">{{\n        'orgCostCenter.unit' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"(units$ | async) ?? null\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('unit.uid')?.disabled ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgCostCenter.unit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('unit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { kind: "component", type: i6.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i7.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i7.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i8.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CostCenterFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-org-cost-center-form', changeDetection: ChangeDetectionStrategy.OnPush, host: { class: 'content-wrapper' }, providers: [
                        {
                            provide: ItemService,
                            useExisting: CostCenterItemService,
                        },
                        {
                            provide: CurrentItemService,
                            useExisting: CurrentCostCenterService,
                        },
                    ], template: "<cx-org-form i18nRoot=\"orgCostCenter\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgCostCenter.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgCostCenter.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createCodeWithName(form.get('name'), form.get('code'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgCostCenter.code' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgCostCenter.code' | cxTranslate }}\"\n        formControlName=\"code\"\n      />\n      <cx-form-errors [control]=\"form.get('code')\"></cx-form-errors>\n    </label>\n\n    <label formGroupName=\"currency\">\n      <span class=\"label-content required\">{{\n        'orgCostCenter.currency' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"isocode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"currencies$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        [class.invalid]=\"form.get('currency.isocode')?.invalid ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgCostCenter.currency' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('currency.isocode')\"></cx-form-errors>\n    </label>\n\n    <label [formGroup]=\"$any(form.get('unit'))\">\n      <span class=\"label-content required\">{{\n        'orgCostCenter.unit' | cxTranslate\n      }}</span>\n      <ng-select\n        [inputAttrs]=\"{ required: 'true' }\"\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"(units$ | async) ?? null\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('unit.uid')?.disabled ?? false\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgCostCenter.unit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('unit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.OrgUnitService }, { type: i3.CurrencyService }]; }, propDecorators: { unitKey: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,