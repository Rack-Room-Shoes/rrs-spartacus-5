/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewChild, ViewChildren, } from '@angular/core';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/facet.service";
import * as i2 from "../../../../../shared/components/assistive-technology-message/assistive-technology-message.directive";
import * as i3 from "@angular/common";
import * as i4 from "../../../../misc/icon/icon.component";
import * as i5 from "../../../../../layout/a11y/keyboard-focus/focus.directive";
import * as i6 from "@angular/router";
import * as i7 from "@spartacus/core";
export class FacetComponent {
    constructor(facetService, elementRef, cd) {
        this.facetService = facetService;
        this.elementRef = elementRef;
        this.cd = cd;
        /** configurable icon that is used to collapse the facet group  */
        this.expandIcon = ICON_TYPE.EXPAND;
        this.collapseIcon = ICON_TYPE.COLLAPSE;
    }
    set facet(value) {
        this._facet = value;
        this.isMultiSelect = !!value.multiSelect;
        this.state$ = this.facetService.getState(value);
    }
    get facet() {
        return this._facet;
    }
    /**
     * Handles clicking the heading of the facet group, which means toggling
     * the visibility of the group (collapse / expand) and optionally focusing
     * the group.
     */
    toggleGroup(event) {
        const host = this.elementRef.nativeElement;
        const isLocked = this.keyboardFocus?.isLocked;
        this.facetService.toggle(this.facet, this.isExpanded);
        if (!isLocked || this.isExpanded) {
            host.focus();
            // we stop propagating the event as otherwise the focus on the host will trigger
            // an unlock event from the LockFocus directive.
            event.stopPropagation();
        }
    }
    get isExpanded() {
        return this.values?.first?.nativeElement.offsetParent !== null;
    }
    openLink(event) {
        event.target.click();
        event.preventDefault();
    }
    /**
     * Increases the number of visible values for the facet. This is delegated
     * to `facetService.increaseVisibleValues`.
     */
    increaseVisibleValues() {
        this.facetService.increaseVisibleValues(this.facet);
    }
    /**
     * Decreases the number of visible values for the facet. This is delegated
     * to `facetService.decreaseVisibleValues`.
     */
    decreaseVisibleValues() {
        this.facetService.decreaseVisibleValues(this.facet);
    }
    getLinkParams(value) {
        return this.facetService.getLinkParams(value.query?.query?.value ?? '');
    }
}
FacetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: FacetComponent, deps: [{ token: i1.FacetService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FacetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: FacetComponent, selector: "cx-facet", inputs: { expandIcon: "expandIcon", collapseIcon: "collapseIcon", facet: "facet" }, host: { properties: { "class.multi-select": "this.isMultiSelect" } }, viewQueries: [{ propertyName: "keyboardFocus", first: true, predicate: FocusDirective, descendants: true }, { propertyName: "values", predicate: ["facetValue"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"state$ | async as state\">\n  <button\n    class=\"heading\"\n    (click)=\"toggleGroup($event)\"\n    [attr.aria-expanded]=\"isExpanded\"\n    [attr.aria-label]=\"\n      'productFacetNavigation.filterBy.name' | cxTranslate: { name: facet.name }\n    \"\n  >\n    {{ facet.name }}\n    <cx-icon class=\"collapse-icon\" [type]=\"collapseIcon\"></cx-icon>\n    <cx-icon class=\"expand-icon\" [type]=\"expandIcon\"></cx-icon>\n  </button>\n\n  <div>\n    <a\n      *ngFor=\"let value of facet.values | slice: 0:state.topVisible\"\n      #facetValue\n      routerLink=\"./\"\n      [queryParams]=\"getLinkParams(value)\"\n      class=\"value\"\n      [class.selected]=\"value.selected\"\n      [cxFocus]=\"{ key: value.name }\"\n      (keydown.space)=\"openLink($any($event))\"\n      [attr.role]=\"facet.multiSelect ? 'checkbox' : null\"\n      [attr.aria-checked]=\"facet.multiSelect ? value.selected : null\"\n      attr.aria-label=\"{{\n        'productFacetNavigation.ariaLabelItemsAvailable'\n          | cxTranslate: { name: value.name, count: value.count }\n      }}\"\n    >\n      <span aria-hidden=\"true\"\n        >{{ value.name\n        }}<span aria-hidden=\"true\" class=\"count\">{{ value.count }}</span></span\n      >\n    </a>\n\n    <div class=\"more\">\n      <a\n        *ngFor=\"\n          let value of facet.values\n            | slice: state.topVisible ?? 0:state.maxVisible\n        \"\n        #facetValue\n        routerLink=\"./\"\n        [queryParams]=\"getLinkParams(value)\"\n        class=\"value\"\n        [class.selected]=\"value.selected\"\n        [cxFocus]=\"{ key: value.name }\"\n        (keydown.space)=\"openLink($any($event))\"\n      >\n        <span\n          >{{ value.name }}<span class=\"count\">{{ value.count }}</span></span\n        >\n      </a>\n\n      <button\n        *ngIf=\"\n          state.maxVisible &&\n          state.topVisible &&\n          state.maxVisible > state.topVisible\n        \"\n        (click)=\"decreaseVisibleValues()\"\n        [cxAtMessage]=\"\n          'productFacetNavigation.decreaseOptionsVisibility' | cxTranslate\n        \"\n        aria-expanded=\"true\"\n        attr.aria-label=\"{{\n          'productFacetNavigation.ariaLabelShowLess' | cxTranslate\n        }}\"\n        class=\"cx-action-link\"\n        [cxFocus]=\"{ key: 'moreorless' }\"\n      >\n        {{ 'productList.showLess' | cxTranslate }}\n      </button>\n\n      <button\n        *ngIf=\"\n          state.maxVisible &&\n          facet.values &&\n          state.maxVisible > 0 &&\n          state.maxVisible < facet.values.length\n        \"\n        (click)=\"increaseVisibleValues()\"\n        [cxAtMessage]=\"\n          'productFacetNavigation.increaseOptionsVisibility' | cxTranslate\n        \"\n        aria-expanded=\"false\"\n        attr.aria-label=\"{{\n          'productFacetNavigation.ariaLabelShowMore' | cxTranslate\n        }}\"\n        class=\"cx-action-link\"\n        [cxFocus]=\"{ key: 'moreorless' }\"\n      >\n        {{ 'productList.showMore' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2.AtMessageDirective, selector: "[cxAtMessage]", inputs: ["cxAtMessage"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i5.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i6.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.SlicePipe, name: "slice" }, { kind: "pipe", type: i7.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: FacetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-facet', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"state$ | async as state\">\n  <button\n    class=\"heading\"\n    (click)=\"toggleGroup($event)\"\n    [attr.aria-expanded]=\"isExpanded\"\n    [attr.aria-label]=\"\n      'productFacetNavigation.filterBy.name' | cxTranslate: { name: facet.name }\n    \"\n  >\n    {{ facet.name }}\n    <cx-icon class=\"collapse-icon\" [type]=\"collapseIcon\"></cx-icon>\n    <cx-icon class=\"expand-icon\" [type]=\"expandIcon\"></cx-icon>\n  </button>\n\n  <div>\n    <a\n      *ngFor=\"let value of facet.values | slice: 0:state.topVisible\"\n      #facetValue\n      routerLink=\"./\"\n      [queryParams]=\"getLinkParams(value)\"\n      class=\"value\"\n      [class.selected]=\"value.selected\"\n      [cxFocus]=\"{ key: value.name }\"\n      (keydown.space)=\"openLink($any($event))\"\n      [attr.role]=\"facet.multiSelect ? 'checkbox' : null\"\n      [attr.aria-checked]=\"facet.multiSelect ? value.selected : null\"\n      attr.aria-label=\"{{\n        'productFacetNavigation.ariaLabelItemsAvailable'\n          | cxTranslate: { name: value.name, count: value.count }\n      }}\"\n    >\n      <span aria-hidden=\"true\"\n        >{{ value.name\n        }}<span aria-hidden=\"true\" class=\"count\">{{ value.count }}</span></span\n      >\n    </a>\n\n    <div class=\"more\">\n      <a\n        *ngFor=\"\n          let value of facet.values\n            | slice: state.topVisible ?? 0:state.maxVisible\n        \"\n        #facetValue\n        routerLink=\"./\"\n        [queryParams]=\"getLinkParams(value)\"\n        class=\"value\"\n        [class.selected]=\"value.selected\"\n        [cxFocus]=\"{ key: value.name }\"\n        (keydown.space)=\"openLink($any($event))\"\n      >\n        <span\n          >{{ value.name }}<span class=\"count\">{{ value.count }}</span></span\n        >\n      </a>\n\n      <button\n        *ngIf=\"\n          state.maxVisible &&\n          state.topVisible &&\n          state.maxVisible > state.topVisible\n        \"\n        (click)=\"decreaseVisibleValues()\"\n        [cxAtMessage]=\"\n          'productFacetNavigation.decreaseOptionsVisibility' | cxTranslate\n        \"\n        aria-expanded=\"true\"\n        attr.aria-label=\"{{\n          'productFacetNavigation.ariaLabelShowLess' | cxTranslate\n        }}\"\n        class=\"cx-action-link\"\n        [cxFocus]=\"{ key: 'moreorless' }\"\n      >\n        {{ 'productList.showLess' | cxTranslate }}\n      </button>\n\n      <button\n        *ngIf=\"\n          state.maxVisible &&\n          facet.values &&\n          state.maxVisible > 0 &&\n          state.maxVisible < facet.values.length\n        \"\n        (click)=\"increaseVisibleValues()\"\n        [cxAtMessage]=\"\n          'productFacetNavigation.increaseOptionsVisibility' | cxTranslate\n        \"\n        aria-expanded=\"false\"\n        attr.aria-label=\"{{\n          'productFacetNavigation.ariaLabelShowMore' | cxTranslate\n        }}\"\n        class=\"cx-action-link\"\n        [cxFocus]=\"{ key: 'moreorless' }\"\n      >\n        {{ 'productList.showMore' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.FacetService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { expandIcon: [{
                type: Input
            }], collapseIcon: [{
                type: Input
            }], isMultiSelect: [{
                type: HostBinding,
                args: ['class.multi-select']
            }], values: [{
                type: ViewChildren,
                args: ['facetValue']
            }], keyboardFocus: [{
                type: ViewChild,
                args: [FocusDirective]
            }], facet: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,