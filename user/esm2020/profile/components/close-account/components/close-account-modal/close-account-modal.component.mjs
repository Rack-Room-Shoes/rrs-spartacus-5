/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, HostListener, } from '@angular/core';
import { GlobalMessageType, } from '@spartacus/core';
import { ICON_TYPE, } from '@spartacus/storefront';
import { BehaviorSubject } from 'rxjs';
import { first } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/user/profile/root";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@angular/common";
export class CloseAccountModalComponent {
    constructor(authService, globalMessageService, routingService, translationService, userProfile, launchDialogService, el) {
        this.authService = authService;
        this.globalMessageService = globalMessageService;
        this.routingService = routingService;
        this.translationService = translationService;
        this.userProfile = userProfile;
        this.launchDialogService = launchDialogService;
        this.el = el;
        this.iconTypes = ICON_TYPE;
        this.focusConfig = {
            trap: true,
            block: true,
            autofocus: 'button',
            focusOnEscape: true,
        };
        this.loading$ = new BehaviorSubject(false);
    }
    handleClick(event) {
        if (event.target.tagName === this.el.nativeElement.tagName) {
            this.dismissModal('Cross click');
        }
    }
    get isLoading$() {
        return this.loading$.asObservable();
    }
    ngOnInit() {
        this.isLoggedIn$ = this.authService.isUserLoggedIn();
    }
    onSuccess() {
        this.dismissModal('Success');
        this.translationService
            .translate('closeAccount.accountClosedSuccessfully')
            .pipe(first())
            .subscribe((text) => {
            this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        });
        this.routingService.go({ cxRoute: 'home' });
    }
    onError() {
        this.dismissModal('Error');
        this.translationService
            .translate('closeAccount.accountClosedFailure')
            .pipe(first())
            .subscribe((text) => {
            this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);
        });
    }
    dismissModal(reason) {
        this.launchDialogService.closeDialog(reason);
    }
    closeAccount() {
        this.loading$.next(true);
        this.userProfile.close().subscribe({
            next: () => {
                this.onSuccess();
                this.loading$.next(false);
            },
            error: () => {
                this.onError();
                this.loading$.next(false);
            },
        });
    }
}
CloseAccountModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CloseAccountModalComponent, deps: [{ token: i1.AuthService }, { token: i1.GlobalMessageService }, { token: i1.RoutingService }, { token: i1.TranslationService }, { token: i2.UserProfileFacade }, { token: i3.LaunchDialogService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
CloseAccountModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: CloseAccountModalComponent, selector: "cx-close-account-modal", host: { listeners: { "click": "handleClick($event)" } }, ngImport: i0, template: "<ng-container *ngIf=\"isLoggedIn$ | async\">\n  <div\n    class=\"cx-close-account-modal\"\n    [cxFocus]=\"focusConfig\"\n    (esc)=\"dismissModal('Escape click')\"\n  >\n    <div class=\"cx-close-account-modal-container\">\n      <div class=\"cx-close-account-modal-header cx-modal-header\">\n        <h3 class=\"cx-close-account-modal-title\">\n          {{ 'closeAccount.confirmAccountClosure' | cxTranslate }}\n        </h3>\n        <button\n          type=\"button\"\n          class=\"close\"\n          [attr.aria-label]=\"'common.close' | cxTranslate\"\n          (click)=\"dismissModal('Cross click')\"\n        >\n          <span aria-hidden=\"true\">\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n          </span>\n        </button>\n      </div>\n\n      <div *ngIf=\"isLoading$ | async; else loaded\">\n        <div class=\"cx-spinner\">\n          <cx-spinner> </cx-spinner>\n        </div>\n      </div>\n\n      <ng-template #loaded>\n        <div class=\"cx-close-account-modal-body modal-body\">\n          <p class=\"cx-confirmation\">\n            {{ 'closeAccount.confirmAccountClosureMessage' | cxTranslate }}\n          </p>\n        </div>\n        <div class=\"cx-close-account-modal-footer cx-modal-footer\">\n          <button class=\"btn btn-primary\" (click)=\"closeAccount()\">\n            {{ 'closeAccount.closeMyAccount' | cxTranslate }}\n          </button>\n          <button\n            (click)=\"dismissModal('Cancel')\"\n            class=\"btn btn-block btn-secondary\"\n          >\n            {{ 'common.cancel' | cxTranslate }}\n          </button>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "component", type: i3.SpinnerComponent, selector: "cx-spinner" }, { kind: "directive", type: i3.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CloseAccountModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-close-account-modal', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"isLoggedIn$ | async\">\n  <div\n    class=\"cx-close-account-modal\"\n    [cxFocus]=\"focusConfig\"\n    (esc)=\"dismissModal('Escape click')\"\n  >\n    <div class=\"cx-close-account-modal-container\">\n      <div class=\"cx-close-account-modal-header cx-modal-header\">\n        <h3 class=\"cx-close-account-modal-title\">\n          {{ 'closeAccount.confirmAccountClosure' | cxTranslate }}\n        </h3>\n        <button\n          type=\"button\"\n          class=\"close\"\n          [attr.aria-label]=\"'common.close' | cxTranslate\"\n          (click)=\"dismissModal('Cross click')\"\n        >\n          <span aria-hidden=\"true\">\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n          </span>\n        </button>\n      </div>\n\n      <div *ngIf=\"isLoading$ | async; else loaded\">\n        <div class=\"cx-spinner\">\n          <cx-spinner> </cx-spinner>\n        </div>\n      </div>\n\n      <ng-template #loaded>\n        <div class=\"cx-close-account-modal-body modal-body\">\n          <p class=\"cx-confirmation\">\n            {{ 'closeAccount.confirmAccountClosureMessage' | cxTranslate }}\n          </p>\n        </div>\n        <div class=\"cx-close-account-modal-footer cx-modal-footer\">\n          <button class=\"btn btn-primary\" (click)=\"closeAccount()\">\n            {{ 'closeAccount.closeMyAccount' | cxTranslate }}\n          </button>\n          <button\n            (click)=\"dismissModal('Cancel')\"\n            class=\"btn btn-block btn-secondary\"\n          >\n            {{ 'common.cancel' | cxTranslate }}\n          </button>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AuthService }, { type: i1.GlobalMessageService }, { type: i1.RoutingService }, { type: i1.TranslationService }, { type: i2.UserProfileFacade }, { type: i3.LaunchDialogService }, { type: i0.ElementRef }]; }, propDecorators: { handleClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,