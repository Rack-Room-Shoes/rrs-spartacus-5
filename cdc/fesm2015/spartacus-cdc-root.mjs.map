{"version":3,"file":"spartacus-cdc-root.mjs","sources":["../../../integration-libs/cdc/root/feature-name.ts","../../../integration-libs/cdc/root/guards/cdc-logout.guard.ts","../../../integration-libs/cdc/root/config/cdc-config.ts","../../../integration-libs/cdc/root/facade/cdc-auth.facade.ts","../../../integration-libs/cdc/root/service/cdc-js.service.ts","../../../integration-libs/cdc/root/cdc-root.module.ts","../../../integration-libs/cdc/root/config/index.ts","../../../integration-libs/cdc/root/events/cdc-event.ts","../../../integration-libs/cdc/root/events/index.ts","../../../integration-libs/cdc/root/facade/index.ts","../../../integration-libs/cdc/root/guards/index.ts","../../../integration-libs/cdc/root/service/index.ts","../../../integration-libs/cdc/root/public_api.ts","../../../integration-libs/cdc/root/spartacus-cdc-root.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const CDC_FEATURE = 'cdc';\nexport const CDC_CORE_FEATURE = 'cdcCore';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  ProtectedRoutesService,\n  SemanticPathService,\n  WindowRef,\n} from '@spartacus/core';\nimport { LogoutGuard } from '@spartacus/storefront';\n\n/**\n * @override\n *\n * CDC version of logout guard. In addition to token revocation we invoke logout method from CDC JS lib.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CdcLogoutGuard extends LogoutGuard {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService,\n    protected router: Router,\n    protected winRef: WindowRef\n  ) {\n    super(auth, cms, semanticPathService, protectedRoutes, router);\n  }\n\n  /**\n   * Logout user from CDC\n   */\n  protected logoutFromCdc(): void {\n    (this.winRef.nativeWindow as { [key: string]: any })?.[\n      'gigya'\n    ]?.accounts?.logout();\n  }\n\n  /**\n   * @override\n   * @returns promise to resolve after complete logout\n   */\n  protected logout(): Promise<any> {\n    return Promise.all([super.logout(), this.logoutFromCdc()]);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CdcConfig {\n  cdc?: {\n    baseSite: string;\n    javascriptUrl: string;\n    sessionExpiration: number;\n  }[];\n}\n\ndeclare module '@spartacus/core' {\n  interface Config extends CdcConfig {}\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { AuthToken, facadeFactory } from '@spartacus/core';\nimport { CDC_CORE_FEATURE } from '../feature-name';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: CdcAuthFacade,\n      feature: CDC_CORE_FEATURE,\n      methods: ['loginWithCustomCdcFlow', 'loginWithToken'],\n      async: true,\n    }),\n})\nexport abstract class CdcAuthFacade {\n  abstract loginWithCustomCdcFlow(\n    UID: string,\n    UIDSignature: string,\n    signatureTimestamp: string,\n    idToken: string,\n    baseSite: string\n  ): void;\n\n  abstract loginWithToken(\n    token: Partial<AuthToken> & { expires_in?: number }\n  ): void;\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  GlobalMessageService,\n  GlobalMessageType,\n  LanguageService,\n  ScriptLoader,\n  User,\n  WindowRef,\n} from '@spartacus/core';\nimport { UserProfileFacade, UserSignUp } from '@spartacus/user/profile/root';\nimport { combineLatest, Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { CdcConfig } from '../config/cdc-config';\nimport { CdcAuthFacade } from '../facade/cdc-auth.facade';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CdcJsService implements OnDestroy {\n  protected loaded$ = new ReplaySubject<boolean>(1);\n  protected errorLoading$ = new ReplaySubject<boolean>(1);\n  protected subscription: Subscription = new Subscription();\n\n  constructor(\n    protected cdcConfig: CdcConfig,\n    protected baseSiteService: BaseSiteService,\n    protected languageService: LanguageService,\n    protected scriptLoader: ScriptLoader,\n    protected winRef: WindowRef,\n    protected cdcAuth: CdcAuthFacade,\n    protected auth: AuthService,\n    protected zone: NgZone,\n    protected userProfileFacade: UserProfileFacade,\n    @Inject(PLATFORM_ID) protected platform: any,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Initialize CDC script\n   */\n  initialize(): void {\n    this.loadCdcJavascript();\n  }\n\n  /**\n   * Returns observable with the information if CDC script is loaded.\n   */\n  didLoad(): Observable<boolean> {\n    return this.loaded$.asObservable();\n  }\n\n  /**\n   * Returns observable with the information if CDC script failed to load.\n   */\n  didScriptFailToLoad(): Observable<boolean> {\n    return this.errorLoading$.asObservable();\n  }\n\n  /**\n   * Method which loads the CDC Script\n   */\n  loadCdcJavascript(): void {\n    // Only load the script on client side (no SSR)\n    if (isPlatformBrowser(this.platform)) {\n      this.subscription.add(\n        combineLatest([\n          this.baseSiteService.getActive(),\n          this.languageService.getActive(),\n        ])\n          .pipe(take(1))\n          .subscribe(([baseSite, language]) => {\n            const scriptForBaseSite =\n              this.getJavascriptUrlForCurrentSite(baseSite);\n            if (scriptForBaseSite) {\n              const javascriptUrl = `${scriptForBaseSite}&lang=${language}`;\n              this.scriptLoader.embedScript({\n                src: javascriptUrl,\n                params: undefined,\n                attributes: { type: 'text/javascript' },\n                callback: () => {\n                  this.registerEventListeners(baseSite);\n                  this.loaded$.next(true);\n                  this.errorLoading$.next(false);\n                },\n                errorCallback: () => {\n                  this.errorLoading$.next(true);\n                  this.loaded$.next(false);\n                },\n              });\n              if (this.winRef?.nativeWindow !== undefined) {\n                (this.winRef.nativeWindow as { [key: string]: any })[\n                  '__gigyaConf'\n                ] = {\n                  include: 'id_token',\n                };\n              }\n            }\n          })\n      );\n    }\n  }\n\n  private getJavascriptUrlForCurrentSite(baseSite: string): string {\n    const filteredConfigs = (this.cdcConfig.cdc ?? []).filter(\n      (conf) => conf.baseSite === baseSite\n    );\n    if (filteredConfigs && filteredConfigs.length > 0) {\n      return filteredConfigs[0].javascriptUrl;\n    }\n    return '';\n  }\n\n  /**\n   * Register login event listeners for CDC login\n   *\n   * @param baseSite\n   */\n  protected registerEventListeners(baseSite: string): void {\n    this.addCdcEventHandlers(baseSite);\n  }\n\n  /**\n   * Method to register CDC event handlers\n   *\n   * @param baseSite\n   */\n  protected addCdcEventHandlers(baseSite: string): void {\n    (this.winRef.nativeWindow as { [key: string]: any })?.[\n      'gigya'\n    ]?.accounts?.addEventHandlers({\n      onLogin: (...params: any[]) => {\n        this.zone.run(() => this.onLoginEventHandler(baseSite, ...params));\n      },\n    });\n  }\n\n  /**\n   * Trigger login to Commerce once an onLogin event is triggered by CDC Screen Set.\n   *\n   * @param baseSite\n   * @param response\n   */\n  protected onLoginEventHandler(baseSite: string, response?: any) {\n    if (response) {\n      this.cdcAuth.loginWithCustomCdcFlow(\n        response.UID,\n        response.UIDSignature,\n        response.signatureTimestamp,\n        response.id_token !== undefined ? response.id_token : '',\n        baseSite\n      );\n    }\n  }\n\n  /**\n   * Trigger CDC User registration and log in using CDC APIs.\n   *\n   * @param user: UserSignUp\n   */\n  registerUserWithoutScreenSet(\n    user: UserSignUp\n  ): Observable<{ status: string }> {\n    return new Observable<{ status: string }>((initRegistration) => {\n      if (!user.uid || !user.password) {\n        initRegistration.error(null);\n      } else {\n        (this.winRef.nativeWindow as { [key: string]: any })?.[\n          'gigya'\n        ]?.accounts?.initRegistration({\n          callback: (response: any) => {\n            this.zone.run(() => {\n              this.onInitRegistrationHandler(user, response).subscribe({\n                next: (result) => {\n                  initRegistration.next(result);\n                  initRegistration.complete();\n                },\n                error: (error) => initRegistration.error(error),\n              });\n            });\n          },\n        });\n      }\n    });\n  }\n\n  /**\n   * Trigger CDC User registration using CDC APIs.\n   *\n   * @param response\n   */\n  protected onInitRegistrationHandler(\n    user: UserSignUp,\n    response: any\n  ): Observable<{ status: string }> {\n    return new Observable<{ status: string }>((isRegistered) => {\n      if (response && response.regToken && user.uid && user.password) {\n        (this.winRef.nativeWindow as { [key: string]: any })?.[\n          'gigya'\n        ]?.accounts?.register({\n          email: user.uid,\n          password: user.password,\n          profile: {\n            firstName: user.firstName,\n            lastName: user.lastName,\n          },\n          regToken: response.regToken,\n          finalizeRegistration: true,\n          callback: (response: any) => {\n            this.zone.run(() => {\n              if (response?.status === 'OK') {\n                isRegistered.next(response);\n                isRegistered.complete();\n              } else {\n                this.handleRegisterError(response);\n                isRegistered.error(response);\n              }\n            });\n          },\n        });\n      }\n    });\n  }\n\n  /**\n   * Trigger CDC User log in using CDC APIs.\n   *\n   * @param response\n   */\n  loginUserWithoutScreenSet(\n    email: string,\n    password: string\n  ): Observable<{ status: string }> {\n    return new Observable<{ status: string }>((isLoggedIn) => {\n      (this.winRef.nativeWindow as { [key: string]: any })?.[\n        'gigya'\n      ]?.accounts?.login({\n        loginID: email,\n        password: password,\n        callback: (response: any) => {\n          this.zone.run(() => {\n            if (response?.status === 'OK') {\n              isLoggedIn.next({ status: response.status });\n              isLoggedIn.complete();\n            } else {\n              this.handleLoginError(response);\n              isLoggedIn.error(response);\n            }\n          });\n        },\n      });\n    });\n  }\n\n  /**\n   * Show failure message to the user in case registration fails.\n   *\n   * @param response\n   */\n  protected handleRegisterError(response: any) {\n    if (response && response.status === 'FAIL') {\n      let errorMessage =\n        (response.validationErrors &&\n          response.validationErrors.length > 0 &&\n          response.validationErrors[response.validationErrors.length - 1]\n            .message) ||\n        'Error';\n      this.globalMessageService.add(\n        errorMessage,\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  /**\n   * Show failure message to the user in case login fails.\n   *\n   * @param response\n   */\n  protected handleLoginError(response: any) {\n    if (response && response.status === 'FAIL') {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage: response.statusMessage,\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  /**\n   * Trigger CDC forgot password using CDC APIs.\n   *\n   * @param email\n   * @param password\n   */\n  resetPasswordWithoutScreenSet(email: string): Observable<{ status: string }> {\n    return new Observable<{ status: string }>((isResetPassword) => {\n      if (email && email.length > 0) {\n        (this.winRef.nativeWindow as { [key: string]: any })?.[\n          'gigya'\n        ]?.accounts?.resetPassword({\n          loginID: email,\n          callback: (response: any) => {\n            this.zone.run(() => {\n              this.handleResetPassResponse(response);\n\n              if (response?.status === 'OK') {\n                isResetPassword.next({ status: response.status });\n                isResetPassword.complete();\n              } else {\n                isResetPassword.error(response);\n              }\n            });\n          },\n        });\n      }\n    });\n  }\n\n  protected handleResetPassResponse(response: any) {\n    if (response && response.status === 'OK') {\n      this.globalMessageService.add(\n        { key: 'forgottenPassword.passwordResetEmailSent' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    } else {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.unknownError',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  /**\n   * Updates user details using the existing User API\n   *\n   * @param response\n   */\n  onProfileUpdateEventHandler(response?: any) {\n    if (response) {\n      const userDetails: User = {};\n      userDetails.firstName = response.profile.firstName;\n      userDetails.lastName = response.profile.lastName;\n      this.userProfileFacade.update(userDetails);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigInitializerService,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { LogoutGuard } from '@spartacus/storefront';\nimport { tap } from 'rxjs/operators';\nimport { CDC_CORE_FEATURE, CDC_FEATURE } from './feature-name';\nimport { CdcLogoutGuard } from './guards/cdc-logout.guard';\nimport { CdcJsService } from './service/cdc-js.service';\n\nexport function cdcJsFactory(\n  cdcJsService: CdcJsService,\n  configInit: ConfigInitializerService\n) {\n  const func = () =>\n    configInit\n      .getStable('context', 'cdc')\n      .pipe(\n        tap(() => {\n          cdcJsService.initialize();\n        })\n      )\n      .toPromise();\n  return func;\n}\n\nexport function defaultCdcComponentsConfig(): CmsConfig {\n  const config: CmsConfig = {\n    featureModules: {\n      [CDC_FEATURE]: {\n        cmsComponents: ['GigyaRaasComponent'],\n      },\n      // by default core is bundled together with components\n      [CDC_CORE_FEATURE]: CDC_FEATURE,\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  providers: [\n    provideDefaultConfigFactory(defaultCdcComponentsConfig),\n    { provide: LogoutGuard, useExisting: CdcLogoutGuard },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: cdcJsFactory,\n      deps: [CdcJsService, ConfigInitializerService],\n      multi: true,\n    },\n  ],\n})\nexport class CdcRootModule {}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-config';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CxEvent } from '@spartacus/core';\n\n/**\n * Indicates the failure during the loading of the user token.\n */\nexport class CdcLoadUserTokenFailEvent extends CxEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CdcLoadUserTokenFailEvent';\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-event';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-auth.facade';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-logout.guard';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-js.service';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-root.module';\nexport * from './config/index';\nexport * from './events/index';\nexport * from './facade/index';\nexport * from './feature-name';\nexport * from './guards/index';\nexport * from './service/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1","i2"],"mappings":"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"}