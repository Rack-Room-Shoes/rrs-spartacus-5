{"version":3,"file":"spartacus-product-configurator-textfield.mjs","sources":["../../../feature-libs/product-configurator/textfield/core/model/configurator-textfield.model.ts","../../../feature-libs/product-configurator/textfield/core/state/configuration-textfield-state.ts","../../../feature-libs/product-configurator/textfield/core/state/actions/configurator-textfield.action.ts","../../../feature-libs/product-configurator/textfield/core/state/actions/configurator-textfield-group.actions.ts","../../../feature-libs/product-configurator/textfield/core/state/actions/index.ts","../../../feature-libs/product-configurator/textfield/core/state/selectors/configurator-textfield.selector.ts","../../../feature-libs/product-configurator/textfield/core/state/selectors/configurator-textfield-group.selectors.ts","../../../feature-libs/product-configurator/textfield/core/state/selectors/index.ts","../../../feature-libs/product-configurator/textfield/core/facade/configurator-textfield.service.ts","../../../feature-libs/product-configurator/textfield/components/add-to-cart-button/configurator-textfield-add-to-cart-button.component.ts","../../../feature-libs/product-configurator/textfield/components/add-to-cart-button/configurator-textfield-add-to-cart-button.component.html","../../../feature-libs/product-configurator/textfield/components/input-field/configurator-textfield-input-field.component.ts","../../../feature-libs/product-configurator/textfield/components/input-field/configurator-textfield-input-field.component.html","../../../feature-libs/product-configurator/textfield/components/input-field-readonly/configurator-textfield-input-field-readonly.component.ts","../../../feature-libs/product-configurator/textfield/components/input-field-readonly/configurator-textfield-input-field-readonly.component.html","../../../feature-libs/product-configurator/textfield/components/form/configurator-textfield-form.component.ts","../../../feature-libs/product-configurator/textfield/components/form/configurator-textfield-form.component.html","../../../feature-libs/product-configurator/textfield/components/textfield-configurator-components.module.ts","../../../feature-libs/product-configurator/textfield/components/index.ts","../../../feature-libs/product-configurator/textfield/core/connectors/configurator-textfield.adapter.ts","../../../feature-libs/product-configurator/textfield/core/connectors/configurator-textfield.connector.ts","../../../feature-libs/product-configurator/textfield/core/state/effects/configurator-textfield.effect.ts","../../../feature-libs/product-configurator/textfield/core/state/effects/index.ts","../../../feature-libs/product-configurator/textfield/core/state/reducers/configurator-textfield.reducer.ts","../../../feature-libs/product-configurator/textfield/core/state/reducers/index.ts","../../../feature-libs/product-configurator/textfield/core/state/configurator-textfield-store.module.ts","../../../feature-libs/product-configurator/textfield/core/textfield-configurator-core.module.ts","../../../feature-libs/product-configurator/textfield/core/index.ts","../../../feature-libs/product-configurator/textfield/occ/occ-configurator-textfield-endpoints.model.ts","../../../feature-libs/product-configurator/textfield/occ/converters/occ-configurator-textfield-add-to-cart-serializer.ts","../../../feature-libs/product-configurator/textfield/occ/converters/occ-configurator-textfield-normalizer.ts","../../../feature-libs/product-configurator/textfield/occ/converters/index.ts","../../../feature-libs/product-configurator/textfield/core/connectors/converters.ts","../../../feature-libs/product-configurator/textfield/occ/occ-configurator-textfield.adapter.ts","../../../feature-libs/product-configurator/textfield/occ/converters/occ-configurator-textfield-update-cart-entry-serializer.ts","../../../feature-libs/product-configurator/textfield/occ/default-occ-configurator-textfield-config.ts","../../../feature-libs/product-configurator/textfield/occ/textfield-configurator-occ.module.ts","../../../feature-libs/product-configurator/textfield/occ/index.ts","../../../feature-libs/product-configurator/textfield/textfield-configurator.module.ts","../../../feature-libs/product-configurator/textfield/public_api.ts","../../../feature-libs/product-configurator/textfield/spartacus-product-configurator-textfield.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonConfigurator } from '@spartacus/product-configurator/common';\n\nexport namespace ConfiguratorTextfield {\n  /**\n   * Textfield configuration. Consists of a list of attributes and the configuration owner\n   */\n  export interface Configuration {\n    configurationInfos: ConfigurationInfo[];\n    owner: CommonConfigurator.Owner;\n  }\n  /**\n   * Represents a textfield configuration attribute. Carries a label, an alphanumeric value and a status\n   */\n  export interface ConfigurationInfo {\n    configurationLabel: string;\n    configurationValue?: string;\n    status?: ConfigurationStatus;\n  }\n  /**\n   * Textfield configuration status\n   */\n  export enum ConfigurationStatus {\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n  }\n\n  /**\n   * Collection of parameters needed to add a textfield product to the cart\n   */\n  export interface AddToCartParameters {\n    userId: string;\n    cartId: string;\n    productCode: string;\n    quantity: number;\n    configuration?: Configuration;\n  }\n  /**\n   * Collection of parameters needed to update the configuration that is attached\n   * to a cart entry\n   */\n  export interface UpdateCartEntryParameters {\n    userId: string;\n    cartId: string;\n    cartEntryNumber: string;\n    configuration?: Configuration;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { StateUtils } from '@spartacus/core';\nimport { ConfiguratorTextfield } from '../model/configurator-textfield.model';\n\nexport const CONFIGURATION_TEXTFIELD_FEATURE = 'productConfigurationTextfield';\nexport const CONFIGURATION_TEXTFIELD_DATA =\n  '[ConfiguratorTextfield] Configuration Data';\n\nexport interface StateWithConfigurationTextfield {\n  [CONFIGURATION_TEXTFIELD_FEATURE]: ConfigurationTextfieldState;\n}\n\nexport interface ConfigurationTextfieldState {\n  loaderState: StateUtils.LoaderState<ConfiguratorTextfield.Configuration>;\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { StateUtils } from '@spartacus/core';\nimport { CommonConfigurator } from '@spartacus/product-configurator/common';\nimport { ConfiguratorTextfield } from '../../model/configurator-textfield.model';\nimport { CONFIGURATION_TEXTFIELD_DATA } from '../configuration-textfield-state';\n\nexport const CREATE_CONFIGURATION =\n  '[Configurator] Create Configuration Textfield';\nexport const CREATE_CONFIGURATION_FAIL =\n  '[Configurator] Create Configuration Textfield Fail';\nexport const CREATE_CONFIGURATION_SUCCESS =\n  '[Configurator] Create Configuration Textfield Success';\nexport const UPDATE_CONFIGURATION =\n  '[Configurator] Update Configuration Textfield';\nexport const ADD_TO_CART = '[Configurator] Add to cart Textfield';\nexport const ADD_TO_CART_FAIL = '[Configurator] Add to cart Textfield Fail';\nexport const READ_CART_ENTRY_CONFIGURATION =\n  '[Configurator] Read cart entry configuration Textfield';\nexport const READ_CART_ENTRY_CONFIGURATION_FAIL =\n  '[Configurator] Read cart entry configuration Textfield Fail';\nexport const READ_CART_ENTRY_CONFIGURATION_SUCCESS =\n  '[Configurator] Read cart entry configuration Textfield Success';\nexport const READ_ORDER_ENTRY_CONFIGURATION =\n  '[Configurator] Read order entry configuration textfield';\nexport const READ_ORDER_ENTRY_CONFIGURATION_FAIL =\n  '[Configurator] Read order entry configuration textfield Fail';\nexport const READ_ORDER_ENTRY_CONFIGURATION_SUCCESS =\n  '[Configurator] Read order entry configuration textfield Success';\nexport const UPDATE_CART_ENTRY_CONFIGURATION =\n  '[Configurator] Update cart entry configuration Textfield';\nexport const UPDATE_CART_ENTRY_CONFIGURATION_FAIL =\n  '[Configurator] Update cart entry configuration Textfield Fail';\n\nexport const REMOVE_CONFIGURATION =\n  '[Configurator] Remove Configuration Textfield';\n\nexport class CreateConfiguration extends StateUtils.LoaderLoadAction {\n  readonly type = CREATE_CONFIGURATION;\n  constructor(\n    public payload: { productCode: string; owner: CommonConfigurator.Owner }\n  ) {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport class CreateConfigurationFail extends StateUtils.LoaderFailAction {\n  readonly type = CREATE_CONFIGURATION_FAIL;\n  constructor(public payload: any) {\n    super(CONFIGURATION_TEXTFIELD_DATA, payload);\n  }\n}\n\nexport class CreateConfigurationSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CREATE_CONFIGURATION_SUCCESS;\n  constructor(public payload: ConfiguratorTextfield.Configuration) {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport class UpdateConfiguration extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_CONFIGURATION;\n  constructor(public payload: ConfiguratorTextfield.Configuration) {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport class AddToCart extends StateUtils.LoaderLoadAction {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: ConfiguratorTextfield.AddToCartParameters) {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport class AddToCartFail extends StateUtils.LoaderFailAction {\n  readonly type = ADD_TO_CART_FAIL;\n  constructor(public payload: any) {\n    super(CONFIGURATION_TEXTFIELD_DATA, payload);\n  }\n}\n\nexport class UpdateCartEntryConfiguration extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_CART_ENTRY_CONFIGURATION;\n  constructor(public payload: ConfiguratorTextfield.UpdateCartEntryParameters) {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport class UpdateCartEntryConfigurationFail extends StateUtils.LoaderFailAction {\n  readonly type = UPDATE_CART_ENTRY_CONFIGURATION_FAIL;\n  constructor(public payload: any) {\n    super(CONFIGURATION_TEXTFIELD_DATA, payload);\n  }\n}\n\nexport class ReadCartEntryConfiguration extends StateUtils.LoaderLoadAction {\n  readonly type = READ_CART_ENTRY_CONFIGURATION;\n  constructor(\n    public payload: CommonConfigurator.ReadConfigurationFromCartEntryParameters\n  ) {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport class ReadCartEntryConfigurationSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = READ_CART_ENTRY_CONFIGURATION_SUCCESS;\n  constructor(public payload: ConfiguratorTextfield.Configuration) {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport class ReadCartEntryConfigurationFail extends StateUtils.LoaderFailAction {\n  readonly type = READ_CART_ENTRY_CONFIGURATION_FAIL;\n  constructor(public payload: any) {\n    super(CONFIGURATION_TEXTFIELD_DATA, payload);\n  }\n}\n\nexport class ReadOrderEntryConfiguration extends StateUtils.LoaderLoadAction {\n  readonly type = READ_ORDER_ENTRY_CONFIGURATION;\n  constructor(\n    public payload: CommonConfigurator.ReadConfigurationFromOrderEntryParameters\n  ) {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport class ReadOrderEntryConfigurationSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = READ_ORDER_ENTRY_CONFIGURATION_SUCCESS;\n  constructor(public payload: ConfiguratorTextfield.Configuration) {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport class ReadOrderEntryConfigurationFail extends StateUtils.LoaderFailAction {\n  readonly type = READ_ORDER_ENTRY_CONFIGURATION_FAIL;\n  constructor(public payload: any) {\n    super(CONFIGURATION_TEXTFIELD_DATA, payload);\n  }\n}\n\nexport class RemoveConfiguration extends StateUtils.LoaderResetAction {\n  readonly type = REMOVE_CONFIGURATION;\n  constructor() {\n    super(CONFIGURATION_TEXTFIELD_DATA);\n  }\n}\n\nexport type ConfiguratorActions =\n  | CreateConfiguration\n  | CreateConfigurationFail\n  | CreateConfigurationSuccess\n  | UpdateConfiguration\n  | ReadCartEntryConfigurationFail\n  | ReadCartEntryConfigurationSuccess\n  | ReadCartEntryConfiguration\n  | ReadOrderEntryConfigurationFail\n  | ReadOrderEntryConfigurationSuccess\n  | ReadOrderEntryConfiguration\n  | UpdateCartEntryConfiguration\n  | RemoveConfiguration;\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './configurator-textfield.action';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as ConfiguratorTextfieldActions from './configurator-textfield-group.actions';\nexport { ConfiguratorTextfieldActions };\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { ConfiguratorTextfield } from '../../model/configurator-textfield.model';\nimport {\n  ConfigurationTextfieldState,\n  CONFIGURATION_TEXTFIELD_FEATURE,\n  StateWithConfigurationTextfield,\n} from '../configuration-textfield-state';\n\nconst getConfigurationContentSelector = (state: ConfigurationTextfieldState) =>\n  state.loaderState.value;\n\nexport const getConfigurationsState: MemoizedSelector<\n  StateWithConfigurationTextfield,\n  ConfigurationTextfieldState\n> = createFeatureSelector<ConfigurationTextfieldState>(\n  CONFIGURATION_TEXTFIELD_FEATURE\n);\n\nexport const getConfigurationContent: MemoizedSelector<\n  StateWithConfigurationTextfield,\n  ConfiguratorTextfield.Configuration | undefined\n> = createSelector(getConfigurationsState, getConfigurationContentSelector);\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './configurator-textfield.selector';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as ConfiguratorTextFieldSelectors from './configurator-textfield-group.selectors';\nexport { ConfiguratorTextFieldSelectors };\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { ActiveCartFacade } from '@spartacus/cart/base/root';\nimport { OCC_USER_ID_CURRENT, UserIdService } from '@spartacus/core';\nimport {\n  CommonConfigurator,\n  CommonConfiguratorUtilsService,\n  ConfiguratorModelUtils,\n} from '@spartacus/product-configurator/common';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap, switchMapTo, take, tap } from 'rxjs/operators';\nimport { ConfiguratorTextfield } from '../model/configurator-textfield.model';\nimport { ConfiguratorTextfieldActions } from '../state/actions/index';\nimport { StateWithConfigurationTextfield } from '../state/configuration-textfield-state';\nimport { ConfiguratorTextFieldSelectors } from '../state/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfiguratorTextfieldService {\n  constructor(\n    protected store: Store<StateWithConfigurationTextfield>,\n    protected activeCartService: ActiveCartFacade,\n    protected configuratorUtils: CommonConfiguratorUtilsService,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Creates a default textfield configuration for a product specified by the configuration owner.\n   *\n   * @param owner - Configuration owner\n   *\n   * @returns {Observable<ConfiguratorTextfield.Configuration>}\n   */\n  createConfiguration(\n    owner: CommonConfigurator.Owner\n  ): Observable<ConfiguratorTextfield.Configuration> {\n    return this.store.pipe(\n      select(ConfiguratorTextFieldSelectors.getConfigurationsState),\n      tap((configurationState) => {\n        const configuration = configurationState.loaderState.value;\n        const isAvailableForProduct =\n          configuration !== undefined &&\n          !ConfiguratorModelUtils.isInitialOwner(configuration.owner);\n        const isLoading = configurationState.loaderState.loading;\n        if (!isAvailableForProduct && !isLoading) {\n          this.store.dispatch(\n            new ConfiguratorTextfieldActions.CreateConfiguration({\n              productCode: owner.id, //owner Id is the product code in this case\n              owner: owner,\n            })\n          );\n        }\n      }),\n      map((configurationState) => configurationState.loaderState.value),\n      filter((configuration) => !this.isConfigurationInitial(configuration)),\n      //save to assume configuration is defined, see previous filter\n      map(\n        (configuration) =>\n          configuration ?? {\n            configurationInfos: [],\n            owner: ConfiguratorModelUtils.createInitialOwner(),\n          }\n      )\n    );\n  }\n\n  /**\n   * Updates a textfield configuration, specified by the changed attribute.\n   *\n   * @param changedAttribute - Changed attribute\n   */\n  updateConfiguration(\n    changedAttribute: ConfiguratorTextfield.ConfigurationInfo\n  ): void {\n    this.store\n      .pipe(\n        select(ConfiguratorTextFieldSelectors.getConfigurationContent),\n        take(1)\n      )\n      .subscribe((oldConfiguration) => {\n        if (oldConfiguration) {\n          this.store.dispatch(\n            new ConfiguratorTextfieldActions.UpdateConfiguration(\n              this.createNewConfigurationWithChange(\n                changedAttribute,\n                oldConfiguration\n              )\n            )\n          );\n        }\n      });\n  }\n\n  /**\n   * Adds the textfield configuration to the cart\n   *\n   * @param productCode - Product code of the configuration root product. Cart entry carries refers to this product\n   * @param configuration Textfield configuration\n   */\n  addToCart(\n    productCode: string,\n    configuration: ConfiguratorTextfield.Configuration\n  ): void {\n    this.activeCartService\n      .requireLoadedCart()\n      .pipe(take(1))\n      .subscribe((cart) => {\n        this.userIdService\n          .getUserId()\n          .pipe(take(1))\n          .subscribe((userId) => {\n            const addToCartParameters: ConfiguratorTextfield.AddToCartParameters =\n              {\n                userId: userId,\n                cartId: this.configuratorUtils.getCartId(cart),\n                productCode: productCode,\n                configuration: configuration,\n                quantity: 1,\n              };\n            this.store.dispatch(\n              new ConfiguratorTextfieldActions.AddToCart(addToCartParameters)\n            );\n          });\n      });\n  }\n\n  /**\n   * Updates a cart entry, specified by its cart entry number.\n   *\n   * @param cartEntryNumber - Cart entry number\n   * @param configuration Textfield configuration (list of alphanumeric attributes)\n   */\n  updateCartEntry(\n    cartEntryNumber: string,\n    configuration: ConfiguratorTextfield.Configuration\n  ): void {\n    this.activeCartService\n      .requireLoadedCart()\n      .pipe(take(1))\n      .subscribe((cart) => {\n        this.userIdService\n          .getUserId()\n          .pipe(take(1))\n          .subscribe((userId) => {\n            const updateCartParameters: ConfiguratorTextfield.UpdateCartEntryParameters =\n              {\n                userId: userId,\n                cartId: this.configuratorUtils.getCartId(cart),\n                cartEntryNumber: cartEntryNumber,\n                configuration: configuration,\n              };\n            this.store.dispatch(\n              new ConfiguratorTextfieldActions.UpdateCartEntryConfiguration(\n                updateCartParameters\n              )\n            );\n          });\n      });\n  }\n\n  /**\n   * Returns a textfield configuration for a cart entry.\n   *\n   * @param owner - Configuration owner\n   *\n   * @returns {Observable<ConfiguratorTextfield.Configuration>}\n   */\n  readConfigurationForCartEntry(\n    owner: CommonConfigurator.Owner\n  ): Observable<ConfiguratorTextfield.Configuration> {\n    return this.activeCartService.requireLoadedCart().pipe(\n      switchMap((cart) =>\n        this.userIdService\n          .getUserId()\n          .pipe(\n            take(1),\n            map((userId) => ({ cart, userId: userId }))\n          )\n          .pipe(\n            map((cont) => ({\n              userId: cont.userId,\n              cartId: this.configuratorUtils.getCartId(cont.cart),\n              cartEntryNumber: owner.id,\n              owner: owner,\n            })),\n            tap((readFromCartEntryParameters) =>\n              this.store.dispatch(\n                new ConfiguratorTextfieldActions.ReadCartEntryConfiguration(\n                  readFromCartEntryParameters\n                )\n              )\n            ),\n            switchMapTo(\n              this.store.pipe(\n                select(ConfiguratorTextFieldSelectors.getConfigurationContent)\n              )\n            ),\n            filter(\n              (configuration) => !this.isConfigurationInitial(configuration)\n            ),\n            //save to assume that the configuration exists, see previous filter\n            map((configuration) =>\n              configuration\n                ? configuration\n                : {\n                    configurationInfos: [],\n                    owner: ConfiguratorModelUtils.createInitialOwner(),\n                  }\n            )\n          )\n      )\n    );\n  }\n\n  /**\n   * Returns the textfield configuration attached to an order entry.\n   *\n   * @param {CommonConfigurator.Owner} owner - Configuration owner\n   *\n   * @returns {Observable<ConfiguratorTextfield.Configuration>}\n   */\n  readConfigurationForOrderEntry(\n    owner: CommonConfigurator.Owner\n  ): Observable<ConfiguratorTextfield.Configuration> {\n    const ownerIdParts = this.configuratorUtils.decomposeOwnerId(owner.id);\n    const readFromOrderEntryParameters: CommonConfigurator.ReadConfigurationFromOrderEntryParameters =\n      {\n        userId: OCC_USER_ID_CURRENT,\n        orderId: ownerIdParts.documentId,\n        orderEntryNumber: ownerIdParts.entryNumber,\n        owner: owner,\n      };\n    this.store.dispatch(\n      new ConfiguratorTextfieldActions.ReadOrderEntryConfiguration(\n        readFromOrderEntryParameters\n      )\n    );\n    return this.store.pipe(\n      select(ConfiguratorTextFieldSelectors.getConfigurationContent),\n      filter((configuration) => !this.isConfigurationInitial(configuration)),\n      map((configuration) =>\n        configuration\n          ? configuration\n          : {\n              configurationInfos: [],\n              owner: ConfiguratorModelUtils.createInitialOwner(),\n            }\n      )\n    );\n  }\n  /**\n   * Creates a textfield configuration supposed to be sent to the backend when an attribute\n   * has been changed\n   * @param changedAttribute Attribute changed by the end user\n   * @param oldConfiguration Existing configuration to which the attribute change is applied to\n   * @returns Textfield configuration (merge of existing configuration and the changed attribute)\n   */\n  createNewConfigurationWithChange(\n    changedAttribute: ConfiguratorTextfield.ConfigurationInfo,\n    oldConfiguration: ConfiguratorTextfield.Configuration\n  ): ConfiguratorTextfield.Configuration {\n    const newConfiguration: ConfiguratorTextfield.Configuration = {\n      configurationInfos: [],\n      owner: oldConfiguration.owner,\n    };\n    oldConfiguration.configurationInfos.forEach((info) => {\n      if (info.configurationLabel === changedAttribute.configurationLabel) {\n        changedAttribute.status =\n          ConfiguratorTextfield.ConfigurationStatus.SUCCESS;\n        newConfiguration.configurationInfos.push(changedAttribute);\n      } else {\n        newConfiguration.configurationInfos.push(info);\n      }\n    });\n    return newConfiguration;\n  }\n\n  protected isConfigurationInitial(\n    configuration?: ConfiguratorTextfield.Configuration\n  ): boolean {\n    return (\n      configuration === undefined ||\n      ConfiguratorModelUtils.isInitialOwner(configuration.owner)\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonConfigurator } from '@spartacus/product-configurator/common';\nimport { ConfiguratorTextfieldService } from '../../core/facade/configurator-textfield.service';\nimport { ConfiguratorTextfield } from '../../core/model/configurator-textfield.model';\n\n@Component({\n  selector: 'cx-configurator-textfield-add-to-cart-button',\n  templateUrl: './configurator-textfield-add-to-cart-button.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfiguratorTextfieldAddToCartButtonComponent {\n  @Input() configuration: ConfiguratorTextfield.Configuration;\n  @Input() productCode: string;\n\n  constructor(\n    protected configuratorTextfieldService: ConfiguratorTextfieldService\n  ) {}\n\n  /**\n   * Adds the textfield configuration to the cart or updates it\n   */\n  onAddToCart(): void {\n    const owner: CommonConfigurator.Owner = this.configuration.owner;\n    switch (owner.type) {\n      case CommonConfigurator.OwnerType.PRODUCT:\n        this.configuratorTextfieldService.addToCart(\n          owner.id,\n          this.configuration\n        );\n        break;\n      case CommonConfigurator.OwnerType.CART_ENTRY:\n        this.configuratorTextfieldService.updateCartEntry(\n          owner.id,\n          this.configuration\n        );\n        break;\n    }\n  }\n\n  /**\n   * Returns button description. Button will display 'addToCart' or 'done' in case configuration indicates that owner is a cart entry\n   * @returns Resource key of button description\n   */\n  getButtonText(): string {\n    return this.configuration.owner.type ===\n      CommonConfigurator.OwnerType.CART_ENTRY\n      ? 'configurator.addToCart.buttonUpdateCart'\n      : 'configurator.addToCart.button';\n  }\n}\n","<button\n  class=\"cx-btn btn btn-block btn-primary cx-add-to-cart-btn\"\n  [routerLink]=\"{ cxRoute: 'cart' } | cxUrl\"\n  (click)=\"onAddToCart()\"\n>\n  {{ getButtonText() | cxTranslate }}\n</button>\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { ConfiguratorTextfield } from '../../core/model/configurator-textfield.model';\n\n@Component({\n  selector: 'cx-configurator-textfield-input-field',\n  templateUrl: './configurator-textfield-input-field.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfiguratorTextfieldInputFieldComponent implements OnInit {\n  PREFIX_TEXTFIELD = 'cx-configurator-textfield';\n  attributeInputForm = new UntypedFormControl('');\n\n  @Input() attribute: ConfiguratorTextfield.ConfigurationInfo;\n  @Output()\n  inputChange = new EventEmitter<ConfiguratorTextfield.ConfigurationInfo>();\n\n  constructor() {\n    // Intentional empty constructor\n  }\n\n  ngOnInit() {\n    this.attributeInputForm.setValue(this.attribute.configurationValue);\n  }\n  /**\n   * Triggered if an attribute value is changed. Triggers the emission of the inputChange event emitter that is\n   * in turn received in the form component\n   */\n  onInputChange(): void {\n    const attribute: ConfiguratorTextfield.ConfigurationInfo = {\n      configurationLabel: this.attribute.configurationLabel,\n      configurationValue: this.attributeInputForm.value,\n    };\n\n    this.inputChange.emit(attribute);\n  }\n  /**\n   * Compiles an ID for the attribute label by using the label from the backend and a prefix 'label'\n   * @param attribute Textfield configurator attribute. Carries the attribute label information from the backend\n   * @returns ID\n   */\n  getIdLabel(attribute: ConfiguratorTextfield.ConfigurationInfo): string {\n    return (\n      this.PREFIX_TEXTFIELD + 'label' + this.getLabelForIdGeneration(attribute)\n    );\n  }\n  /**\n   * Compiles an ID for the attribute value by using the label from the backend\n   * @param attribute Textfield configurator attribute. Carries the attribute label information from the backend\n   * @returns ID\n   */\n  getId(attribute: ConfiguratorTextfield.ConfigurationInfo): string {\n    return this.PREFIX_TEXTFIELD + this.getLabelForIdGeneration(attribute);\n  }\n\n  protected getLabelForIdGeneration(\n    attribute: ConfiguratorTextfield.ConfigurationInfo\n  ): string {\n    //replace white spaces with an empty string\n    return attribute.configurationLabel.replace(/\\s/g, '');\n  }\n}\n","<label\n  id=\"{{ getIdLabel(attribute) }}\"\n  class=\"cx-configurator-textfield-label\"\n  [attr.aria-label]=\"'configurator.a11y.nameOfAttribute' | cxTranslate\"\n  >{{ attribute.configurationLabel }}</label\n>\n<div class=\"form-group\">\n  <input\n    [formControl]=\"attributeInputForm\"\n    class=\"form-control\"\n    (change)=\"onInputChange()\"\n    [attr.aria-label]=\"\n      'configurator.a11y.valueOfAttributeFull'\n        | cxTranslate\n          : {\n              value: attribute.configurationValue,\n              attribute: attribute.configurationLabel\n            }\n    \"\n  />\n</div>\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { ConfiguratorTextfield } from '../../core/model/configurator-textfield.model';\n\n@Component({\n  selector: 'cx-configurator-textfield-input-field-readonly',\n  templateUrl: './configurator-textfield-input-field-readonly.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfiguratorTextfieldInputFieldReadonlyComponent {\n  PREFIX_TEXTFIELD = 'cx-configurator-textfield';\n\n  @Input() attribute: ConfiguratorTextfield.ConfigurationInfo;\n\n  /**\n   * Compiles an ID for the attribute label by using the label from the backend and a prefix 'label'\n   * @param {ConfiguratorTextfield.ConfigurationInfo} attribute Textfield configurator attribute. Carries the attribute label information from the backend\n   * @returns {string} ID\n   */\n  getIdLabel(attribute: ConfiguratorTextfield.ConfigurationInfo): string {\n    return (\n      this.PREFIX_TEXTFIELD + 'label' + this.getLabelForIdGeneration(attribute)\n    );\n  }\n\n  protected getLabelForIdGeneration(\n    attribute: ConfiguratorTextfield.ConfigurationInfo\n  ): string {\n    //replace white spaces with an empty string\n    return attribute.configurationLabel.replace(/\\s/g, '');\n  }\n}\n","<span id=\"{{ getIdLabel(attribute) }}\" class=\"cx-visually-hidden\">\n  {{\n    'configurator.a11y.valueOfAttributeFull'\n      | cxTranslate\n        : {\n            value: attribute.configurationValue,\n            attribute: attribute.configurationLabel\n          }\n  }}\n</span>\n<label aria-hidden=\"true\" attr.aria-describedby=\"{{ getIdLabel(attribute) }}\">{{\n  attribute.configurationLabel\n}}</label>\n<div aria-hidden=\"true\">\n  {{ attribute.configurationValue }}\n</div>\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Component } from '@angular/core';\nimport {\n  CommonConfigurator,\n  ConfiguratorRouter,\n  ConfiguratorRouterExtractorService,\n} from '@spartacus/product-configurator/common';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ConfiguratorTextfieldService } from '../../core/facade/configurator-textfield.service';\nimport { ConfiguratorTextfield } from '../../core/model/configurator-textfield.model';\n\n@Component({\n  selector: 'cx-configurator-textfield-form',\n  templateUrl: './configurator-textfield-form.component.html',\n})\nexport class ConfiguratorTextfieldFormComponent {\n  configuration$: Observable<ConfiguratorTextfield.Configuration> =\n    this.configRouterExtractorService.extractRouterData().pipe(\n      switchMap((routerData) => {\n        switch (routerData.owner.type) {\n          case CommonConfigurator.OwnerType.PRODUCT:\n            return this.configuratorTextfieldService.createConfiguration(\n              routerData.owner\n            );\n          case CommonConfigurator.OwnerType.CART_ENTRY:\n            return this.configuratorTextfieldService.readConfigurationForCartEntry(\n              routerData.owner\n            );\n          case CommonConfigurator.OwnerType.ORDER_ENTRY:\n            return this.configuratorTextfieldService.readConfigurationForOrderEntry(\n              routerData.owner\n            );\n        }\n      })\n    );\n\n  isEditable$: Observable<boolean> = this.configRouterExtractorService\n    .extractRouterData()\n    .pipe(\n      map(\n        (routerData) =>\n          routerData.pageType === ConfiguratorRouter.PageType.CONFIGURATION\n      )\n    );\n\n  constructor(\n    protected configuratorTextfieldService: ConfiguratorTextfieldService,\n    protected configRouterExtractorService: ConfiguratorRouterExtractorService\n  ) {}\n\n  /**\n   * Updates a configuration attribute\n   * @param attribute - Configuration attribute, always containing a string typed value\n   */\n  updateConfiguration(\n    attribute: ConfiguratorTextfield.ConfigurationInfo\n  ): void {\n    this.configuratorTextfieldService.updateConfiguration(attribute);\n  }\n}\n","<ng-container *ngIf=\"configuration$ | async as configuration\">\n  <ng-container *ngIf=\"isEditable$ | async as isEditable; else readonly\">\n    <span class=\"cx-visually-hidden\">\n      {{ 'configurator.a11y.editAttributesAndValues' | cxTranslate }}\n    </span>\n    <div\n      class=\"cx-attribute\"\n      *ngFor=\"let attribute of configuration.configurationInfos\"\n    >\n      <cx-configurator-textfield-input-field\n        [attribute]=\"attribute\"\n        (inputChange)=\"updateConfiguration($event)\"\n      ></cx-configurator-textfield-input-field>\n    </div>\n\n    <cx-configurator-textfield-add-to-cart-button\n      [configuration]=\"configuration\"\n    ></cx-configurator-textfield-add-to-cart-button>\n  </ng-container>\n  <ng-template #readonly>\n    <span class=\"cx-visually-hidden\">\n      {{ 'configurator.a11y.listOfAttributesAndValues' | cxTranslate }}\n    </span>\n    <div\n      class=\"cx-attribute\"\n      *ngFor=\"let attribute of configuration.configurationInfos\"\n    >\n      <cx-configurator-textfield-input-field-readonly\n        [attribute]=\"attribute\"\n      ></cx-configurator-textfield-input-field-readonly>\n    </div>\n  </ng-template>\n</ng-container>\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConfiguratorTextfieldAddToCartButtonComponent } from './add-to-cart-button/configurator-textfield-add-to-cart-button.component';\nimport { ConfiguratorTextfieldFormComponent } from './form/configurator-textfield-form.component';\nimport { ConfiguratorTextfieldInputFieldComponent } from './input-field/configurator-textfield-input-field.component';\nimport { ConfiguratorTextfieldInputFieldReadonlyComponent } from './input-field-readonly/configurator-textfield-input-field-readonly.component';\n\n@NgModule({\n  imports: [\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CommonModule,\n    I18nModule,\n    UrlModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        TextfieldConfigurationForm: {\n          component: ConfiguratorTextfieldFormComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ConfiguratorTextfieldFormComponent,\n    ConfiguratorTextfieldInputFieldComponent,\n    ConfiguratorTextfieldInputFieldReadonlyComponent,\n    ConfiguratorTextfieldAddToCartButtonComponent,\n  ],\n  exports: [\n    ConfiguratorTextfieldFormComponent,\n    ConfiguratorTextfieldInputFieldComponent,\n    ConfiguratorTextfieldInputFieldReadonlyComponent,\n    ConfiguratorTextfieldAddToCartButtonComponent,\n  ],\n})\nexport class TextfieldConfiguratorComponentsModule {}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './add-to-cart-button/configurator-textfield-add-to-cart-button.component';\nexport * from './form/configurator-textfield-form.component';\nexport * from './input-field/configurator-textfield-input-field.component';\nexport * from './input-field-readonly/configurator-textfield-input-field-readonly.component';\nexport * from './textfield-configurator-components.module';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CartModification } from '@spartacus/cart/base/root';\nimport { CommonConfigurator } from '@spartacus/product-configurator/common';\nimport { Observable } from 'rxjs';\nimport { ConfiguratorTextfield } from '../model/configurator-textfield.model';\n\nexport abstract class ConfiguratorTextfieldAdapter {\n  /**\n   * Abstract method used to create a default configuration based on product code\n   * and owner\n   *\n   * @param productCode Root product code\n   * @param owner Configuration owner\n   * @returns Observable of configurations\n   */\n  abstract createConfiguration(\n    productCode: string,\n    owner: CommonConfigurator.Owner\n  ): Observable<ConfiguratorTextfield.Configuration>;\n\n  /**\n   * Abstract method to add a configuration to cart, based on a product, a configuration,\n   * and other attributes part of parameters\n   *\n   * @param parameters add to cart parameters object\n   * @returns Observable of cart modifications\n   */\n  abstract addToCart(\n    parameters: ConfiguratorTextfield.AddToCartParameters\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method to read a configuration for a cart entry\n   *\n   * @param parameters read from cart entry parameters object\n   * @returns Observable of configurations\n   */\n  abstract readConfigurationForCartEntry(\n    parameters: CommonConfigurator.ReadConfigurationFromCartEntryParameters\n  ): Observable<ConfiguratorTextfield.Configuration>;\n\n  /**\n   * Abstract method to read a configuration for an order entry\n   *\n   * @param {CommonConfigurator.ReadConfigurationFromOrderEntryParameters} parameters read from order entry parameters object\n   * @returns {Observable<ConfiguratorTextfield.Configuration>} Observable of configurations\n   */\n  abstract readConfigurationForOrderEntry(\n    parameters: CommonConfigurator.ReadConfigurationFromOrderEntryParameters\n  ): Observable<ConfiguratorTextfield.Configuration>;\n\n  /**\n   * Abstract method to update a configuration attached to a cart entry\n   *\n   * @param parameters contains attributes needed to update the cart entries' configuration\n   * @returns Observable of cart modifications\n   */\n  abstract updateConfigurationForCartEntry(\n    parameters: ConfiguratorTextfield.UpdateCartEntryParameters\n  ): Observable<CartModification>;\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CartModification } from '@spartacus/cart/base/root';\nimport { CommonConfigurator } from '@spartacus/product-configurator/common';\nimport { Observable } from 'rxjs';\nimport { ConfiguratorTextfield } from '../model/configurator-textfield.model';\nimport { ConfiguratorTextfieldAdapter } from './configurator-textfield.adapter';\n\n@Injectable()\nexport class ConfiguratorTextfieldConnector {\n  constructor(protected adapter: ConfiguratorTextfieldAdapter) {}\n\n  /**\n   * Creates default configuration for a product that is textfield-configurable\n   * @param productCode Product code\n   * @param owner Owner of the configuration\n   * @returns Observable of product configurations\n   */\n  createConfiguration(\n    productCode: string,\n    owner: CommonConfigurator.Owner\n  ): Observable<ConfiguratorTextfield.Configuration> {\n    return this.adapter.createConfiguration(productCode, owner);\n  }\n  /**\n   * Reads an existing configuration for a cart entry\n   * @param parameters Attributes needed to read a product configuration for a cart entry\n   * @returns Observable of product configurations\n   */\n  readConfigurationForCartEntry(\n    parameters: CommonConfigurator.ReadConfigurationFromCartEntryParameters\n  ): Observable<ConfiguratorTextfield.Configuration> {\n    return this.adapter.readConfigurationForCartEntry(parameters);\n  }\n  /**\n   * Reads an existing configuration for an order entry\n   * @param {CommonConfigurator.ReadConfigurationFromOrderEntryParameters} parameters Attributes needed to read a product configuration for an order entry\n   * @returns {Observable<ConfiguratorTextfield.Configuration>} Observable of product configurations\n   */\n  readConfigurationForOrderEntry(\n    parameters: CommonConfigurator.ReadConfigurationFromOrderEntryParameters\n  ): Observable<ConfiguratorTextfield.Configuration> {\n    return this.adapter.readConfigurationForOrderEntry(parameters);\n  }\n  /**\n   * Updates a configuration that is attached to a cart entry\n   * @param parameters Attributes needed to update a cart entries' configuration\n   * @returns Observable of cart modifications\n   */\n  updateConfigurationForCartEntry(\n    parameters: ConfiguratorTextfield.UpdateCartEntryParameters\n  ): Observable<CartModification> {\n    return this.adapter.updateConfigurationForCartEntry(parameters);\n  }\n\n  /**\n   * Adds a textfield-configurable product to the cart, and passes along its configuration\n   * @param parameters Attributes needed to add a textfield product along with its configuration to the cart\n   * @returns Observable of cart modifications\n   */\n  addToCart(\n    parameters: ConfiguratorTextfield.AddToCartParameters\n  ): Observable<CartModification> {\n    return this.adapter.addToCart(parameters);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { CartActions } from '@spartacus/cart/base/core';\nimport { normalizeHttpError } from '@spartacus/core';\nimport { CommonConfigurator } from '@spartacus/product-configurator/common';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConfiguratorTextfieldConnector } from '../../connectors/configurator-textfield.connector';\nimport { ConfiguratorTextfield } from '../../model/configurator-textfield.model';\nimport { ConfiguratorTextfieldActions } from '../actions/index';\n\n@Injectable()\nexport class ConfiguratorTextfieldEffects {\n  createConfiguration$: Observable<\n    | ConfiguratorTextfieldActions.CreateConfigurationSuccess\n    | ConfiguratorTextfieldActions.CreateConfigurationFail\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ConfiguratorTextfieldActions.CREATE_CONFIGURATION),\n      map(\n        (action: ConfiguratorTextfieldActions.CreateConfiguration) =>\n          action.payload\n      ),\n      switchMap((payload) => {\n        return this.configuratorTextfieldConnector\n          .createConfiguration(payload.productCode, payload.owner)\n          .pipe(\n            switchMap((configuration: ConfiguratorTextfield.Configuration) => {\n              return [\n                new ConfiguratorTextfieldActions.CreateConfigurationSuccess(\n                  configuration\n                ),\n              ];\n            }),\n            catchError((error) =>\n              of(\n                new ConfiguratorTextfieldActions.CreateConfigurationFail(\n                  normalizeHttpError(error)\n                )\n              )\n            )\n          );\n      })\n    )\n  );\n\n  addToCart$: Observable<\n    | ConfiguratorTextfieldActions.RemoveConfiguration\n    | ConfiguratorTextfieldActions.AddToCartFail\n    | CartActions.LoadCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ConfiguratorTextfieldActions.ADD_TO_CART),\n      map((action: ConfiguratorTextfieldActions.AddToCart) => action.payload),\n      switchMap((payload) => {\n        return this.configuratorTextfieldConnector.addToCart(payload).pipe(\n          switchMap(() => {\n            return [\n              new ConfiguratorTextfieldActions.RemoveConfiguration(),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new ConfiguratorTextfieldActions.AddToCartFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n      })\n    )\n  );\n\n  updateCartEntry$: Observable<\n    | ConfiguratorTextfieldActions.RemoveConfiguration\n    | ConfiguratorTextfieldActions.UpdateCartEntryConfigurationFail\n    | CartActions.LoadCart\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ConfiguratorTextfieldActions.UPDATE_CART_ENTRY_CONFIGURATION),\n      map(\n        (action: ConfiguratorTextfieldActions.UpdateCartEntryConfiguration) =>\n          action.payload\n      ),\n      switchMap((payload) => {\n        return this.configuratorTextfieldConnector\n          .updateConfigurationForCartEntry(payload)\n          .pipe(\n            switchMap(() => {\n              return [\n                new ConfiguratorTextfieldActions.RemoveConfiguration(),\n                new CartActions.LoadCart({\n                  cartId: payload.cartId,\n                  userId: payload.userId,\n                }),\n              ];\n            }),\n            catchError((error) =>\n              of(\n                new ConfiguratorTextfieldActions.UpdateCartEntryConfigurationFail(\n                  normalizeHttpError(error)\n                )\n              )\n            )\n          );\n      })\n    )\n  );\n\n  readConfigurationForCartEntry$: Observable<\n    | ConfiguratorTextfieldActions.ReadCartEntryConfigurationSuccess\n    | ConfiguratorTextfieldActions.ReadCartEntryConfigurationFail\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ConfiguratorTextfieldActions.READ_CART_ENTRY_CONFIGURATION),\n      switchMap(\n        (action: ConfiguratorTextfieldActions.ReadCartEntryConfiguration) => {\n          const parameters: CommonConfigurator.ReadConfigurationFromCartEntryParameters =\n            action.payload;\n\n          return this.configuratorTextfieldConnector\n            .readConfigurationForCartEntry(parameters)\n            .pipe(\n              switchMap((result: ConfiguratorTextfield.Configuration) => [\n                new ConfiguratorTextfieldActions.ReadCartEntryConfigurationSuccess(\n                  result\n                ),\n              ]),\n              catchError((error) => [\n                new ConfiguratorTextfieldActions.ReadCartEntryConfigurationFail(\n                  normalizeHttpError(error)\n                ),\n              ])\n            );\n        }\n      )\n    )\n  );\n\n  readConfigurationForOrderEntry$: Observable<\n    | ConfiguratorTextfieldActions.ReadOrderEntryConfigurationSuccess\n    | ConfiguratorTextfieldActions.ReadOrderEntryConfigurationFail\n  > = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ConfiguratorTextfieldActions.READ_ORDER_ENTRY_CONFIGURATION),\n      switchMap(\n        (action: ConfiguratorTextfieldActions.ReadOrderEntryConfiguration) => {\n          const parameters: CommonConfigurator.ReadConfigurationFromOrderEntryParameters =\n            action.payload;\n\n          return this.configuratorTextfieldConnector\n            .readConfigurationForOrderEntry(parameters)\n            .pipe(\n              switchMap((result: ConfiguratorTextfield.Configuration) => [\n                new ConfiguratorTextfieldActions.ReadOrderEntryConfigurationSuccess(\n                  result\n                ),\n              ]),\n              catchError((error) => [\n                new ConfiguratorTextfieldActions.ReadOrderEntryConfigurationFail(\n                  normalizeHttpError(error)\n                ),\n              ])\n            );\n        }\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private configuratorTextfieldConnector: ConfiguratorTextfieldConnector\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConfiguratorTextfieldEffects } from './configurator-textfield.effect';\n\nexport const configuratorTextfieldEffects: any[] = [\n  ConfiguratorTextfieldEffects,\n];\n\nexport * from './configurator-textfield.effect';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConfiguratorModelUtils } from '@spartacus/product-configurator/common';\nimport { ConfiguratorTextfield } from '../../model/configurator-textfield.model';\nimport { ConfiguratorActions } from '../actions/configurator-textfield.action';\nimport { ConfiguratorTextfieldActions } from '../actions/index';\n\nexport const initialState: ConfiguratorTextfield.Configuration = {\n  configurationInfos: [],\n  owner: ConfiguratorModelUtils.createInitialOwner(),\n};\n\nexport function reducer(\n  state = initialState,\n  action: ConfiguratorActions\n): ConfiguratorTextfield.Configuration {\n  switch (action.type) {\n    case ConfiguratorTextfieldActions.CREATE_CONFIGURATION_SUCCESS:\n    case ConfiguratorTextfieldActions.READ_CART_ENTRY_CONFIGURATION_SUCCESS:\n    case ConfiguratorTextfieldActions.READ_ORDER_ENTRY_CONFIGURATION_SUCCESS:\n    case ConfiguratorTextfieldActions.UPDATE_CONFIGURATION: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    case ConfiguratorTextfieldActions.REMOVE_CONFIGURATION: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { StateUtils } from '@spartacus/core';\nimport { ConfiguratorTextfield } from '../../model/configurator-textfield.model';\nimport {\n  ConfigurationTextfieldState,\n  CONFIGURATION_TEXTFIELD_DATA,\n} from '../configuration-textfield-state';\nimport { reducer as configuratorTextfieldReducer } from './configurator-textfield.reducer';\n\nexport function getConfiguratorTextfieldReducers(): ActionReducerMap<ConfigurationTextfieldState> {\n  return {\n    loaderState: StateUtils.loaderReducer<ConfiguratorTextfield.Configuration>(\n      CONFIGURATION_TEXTFIELD_DATA,\n      // @ts-ignore TODO (#12620)\n      configuratorTextfieldReducer\n    ),\n  };\n}\n\nexport const configuratorTextfieldReducerToken: InjectionToken<\n  ActionReducerMap<ConfigurationTextfieldState>\n> = new InjectionToken<ActionReducerMap<ConfigurationTextfieldState>>(\n  'ConfiguratorReducers'\n);\n\nexport const configuratorTextfieldReducerProvider: Provider = {\n  provide: configuratorTextfieldReducerToken,\n  useFactory: getConfiguratorTextfieldReducers,\n};\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '@spartacus/core';\nimport { CONFIGURATION_TEXTFIELD_FEATURE } from './configuration-textfield-state';\nimport { configuratorTextfieldEffects } from './effects/index';\nimport {\n  configuratorTextfieldReducerProvider,\n  configuratorTextfieldReducerToken,\n} from './reducers/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n\n    StateModule,\n    StoreModule.forFeature(\n      CONFIGURATION_TEXTFIELD_FEATURE,\n      configuratorTextfieldReducerToken\n    ),\n    EffectsModule.forFeature(configuratorTextfieldEffects),\n  ],\n  providers: [configuratorTextfieldReducerProvider],\n})\nexport class ConfiguratorTextfieldStoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { ConfiguratorTextfieldConnector } from './connectors/configurator-textfield.connector';\nimport { ConfiguratorTextfieldStoreModule } from './state/configurator-textfield-store.module';\n\n/**\n * Exposes the textfield configurator core entities.\n * Explicit providing of connector because otherwise lazy loading does not work\n */\n@NgModule({\n  imports: [ConfiguratorTextfieldStoreModule],\n  providers: [ConfiguratorTextfieldConnector],\n})\nexport class TextfieldConfiguratorCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './textfield-configurator-core.module';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { OccEndpoint } from '@spartacus/core';\ndeclare module '@spartacus/core' {\n  interface OccEndpoints {\n    readTextfieldConfigurationForOrderEntry?: string | OccEndpoint;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { ConfigurationInfo } from '@spartacus/product-configurator/common';\nimport { ConfiguratorTextfield } from '../../core/model/configurator-textfield.model';\nimport { OccConfiguratorTextfield } from '../occ-configurator-textfield.models';\n\nexport const CONFIGURATOR_TYPE_TEXTFIELD = 'TEXTFIELD';\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfiguratorTextfieldAddToCartSerializer\n  implements\n    Converter<\n      ConfiguratorTextfield.AddToCartParameters,\n      OccConfiguratorTextfield.AddToCartParameters\n    >\n{\n  constructor() {\n    // Intentional empty constructor\n  }\n  /**\n   * Converts addToCart parameters into the OCC format\n   * @param source Add to cart parameters in generic format\n   * @param target Add to cart parameters in OCC format. Optional, can be used in case converters should be chained\n   * @returns Add to cart parameters in OCC format\n   */\n  convert(\n    source: ConfiguratorTextfield.AddToCartParameters,\n    target?: OccConfiguratorTextfield.AddToCartParameters\n  ): OccConfiguratorTextfield.AddToCartParameters {\n    const configurationInfos: ConfigurationInfo[] = [];\n    source.configuration?.configurationInfos.forEach((info) =>\n      this.convertInfo(info, configurationInfos)\n    );\n\n    const resultTarget: OccConfiguratorTextfield.AddToCartParameters = {\n      ...target,\n      userId: source.userId,\n      cartId: source.cartId,\n      product: { code: source.productCode },\n      quantity: source.quantity,\n      configurationInfos: configurationInfos,\n    };\n\n    return resultTarget;\n  }\n\n  protected convertInfo(\n    source: ConfiguratorTextfield.ConfigurationInfo,\n    occConfigurationInfos: OccConfiguratorTextfield.ConfigurationInfo[]\n  ): void {\n    const occInfo: OccConfiguratorTextfield.ConfigurationInfo = {\n      configurationLabel: source.configurationLabel,\n      configurationValue: source.configurationValue,\n      status: source.status,\n      configuratorType: CONFIGURATOR_TYPE_TEXTFIELD,\n    };\n    occConfigurationInfos.push(occInfo);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { ConfiguratorTextfield } from '../../core/model/configurator-textfield.model';\nimport { OccConfiguratorTextfield } from '../occ-configurator-textfield.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfiguratorTextfieldNormalizer\n  implements\n    Converter<\n      OccConfiguratorTextfield.Configuration,\n      ConfiguratorTextfield.Configuration\n    >\n{\n  constructor() {\n    // Intentional empty constructor\n  }\n  /**\n   * Converts addToCart parameters into the generic format\n   * @param source Add to cart parameters in OCC format\n   * @param target Optional result, can be provided in case converters should be chained\n   * @returns Add to cart parameters in generic format\n   */\n  convert(\n    source: OccConfiguratorTextfield.Configuration,\n    target?: ConfiguratorTextfield.Configuration\n  ): ConfiguratorTextfield.Configuration {\n    const resultTarget: ConfiguratorTextfield.Configuration = {\n      ...target,\n      ...(source as any),\n    };\n\n    return resultTarget;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './occ-configurator-textfield-add-to-cart-serializer';\nexport * from './occ-configurator-textfield-normalizer';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { ConfiguratorTextfield } from '../model/configurator-textfield.model';\n\nexport const CONFIGURATION_TEXTFIELD_NORMALIZER = new InjectionToken<\n  Converter<any, ConfiguratorTextfield.Configuration>\n>('ConfigurationNormalizer');\n\nexport const CONFIGURATION_TEXTFIELD_ADD_TO_CART_SERIALIZER =\n  new InjectionToken<Converter<ConfiguratorTextfield.AddToCartParameters, any>>(\n    'ConfigurationAddToCartSerializer'\n  );\n\nexport const CONFIGURATION_TEXTFIELD_UPDATE_CART_ENTRY_SERIALIZER =\n  new InjectionToken<\n    Converter<ConfiguratorTextfield.UpdateCartEntryParameters, any>\n  >('ConfigurationUpdateCartEntrySerializer');\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  CartModification,\n  CART_MODIFICATION_NORMALIZER,\n} from '@spartacus/cart/base/root';\nimport { ConverterService, OccEndpointsService } from '@spartacus/core';\nimport { CommonConfigurator } from '@spartacus/product-configurator/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ConfiguratorTextfieldAdapter } from '../core/connectors/configurator-textfield.adapter';\nimport {\n  CONFIGURATION_TEXTFIELD_ADD_TO_CART_SERIALIZER,\n  CONFIGURATION_TEXTFIELD_NORMALIZER,\n  CONFIGURATION_TEXTFIELD_UPDATE_CART_ENTRY_SERIALIZER,\n} from '../core/connectors/converters';\nimport { ConfiguratorTextfield } from '../core/model/configurator-textfield.model';\nimport { OccConfiguratorTextfield } from './occ-configurator-textfield.models';\n\n@Injectable()\nexport class OccConfiguratorTextfieldAdapter\n  implements ConfiguratorTextfieldAdapter\n{\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  createConfiguration(\n    productCode: string,\n    owner: CommonConfigurator.Owner\n  ): Observable<ConfiguratorTextfield.Configuration> {\n    return this.http\n      .get<OccConfiguratorTextfield.Configuration>(\n        this.occEndpointsService.buildUrl('createTextfieldConfiguration', {\n          urlParams: {\n            productCode,\n          },\n        })\n      )\n      .pipe(\n        this.converterService.pipeable(CONFIGURATION_TEXTFIELD_NORMALIZER),\n        map((resultConfiguration) => {\n          return {\n            ...resultConfiguration,\n            owner: owner,\n          };\n        })\n      );\n  }\n\n  addToCart(\n    parameters: ConfiguratorTextfield.AddToCartParameters\n  ): Observable<CartModification> {\n    const url = this.occEndpointsService.buildUrl(\n      'addTextfieldConfigurationToCart',\n      {\n        urlParams: {\n          userId: parameters.userId,\n          cartId: parameters.cartId,\n        },\n      }\n    );\n\n    const occAddToCartParameters = this.converterService.convert(\n      parameters,\n      CONFIGURATION_TEXTFIELD_ADD_TO_CART_SERIALIZER\n    );\n\n    return this.http\n      .post<CartModification>(url, occAddToCartParameters)\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  readConfigurationForCartEntry(\n    parameters: CommonConfigurator.ReadConfigurationFromCartEntryParameters\n  ): Observable<ConfiguratorTextfield.Configuration> {\n    const url = this.occEndpointsService.buildUrl(\n      'readTextfieldConfigurationForCartEntry',\n      {\n        urlParams: {\n          userId: parameters.userId,\n          cartId: parameters.cartId,\n          cartEntryNumber: parameters.cartEntryNumber,\n        },\n      }\n    );\n\n    return this.http.get<ConfiguratorTextfield.Configuration>(url).pipe(\n      this.converterService.pipeable(CONFIGURATION_TEXTFIELD_NORMALIZER),\n      map((resultConfiguration) => {\n        return {\n          ...resultConfiguration,\n          owner: {\n            ...parameters.owner,\n          },\n        };\n      })\n    );\n  }\n  readConfigurationForOrderEntry(\n    parameters: CommonConfigurator.ReadConfigurationFromOrderEntryParameters\n  ): Observable<ConfiguratorTextfield.Configuration> {\n    const url = this.occEndpointsService.buildUrl(\n      'readTextfieldConfigurationForOrderEntry',\n      {\n        urlParams: {\n          userId: parameters.userId,\n          orderId: parameters.orderId,\n          orderEntryNumber: parameters.orderEntryNumber,\n        },\n      }\n    );\n\n    return this.http.get<ConfiguratorTextfield.Configuration>(url).pipe(\n      this.converterService.pipeable(CONFIGURATION_TEXTFIELD_NORMALIZER),\n      map((resultConfiguration) => {\n        return {\n          ...resultConfiguration,\n          owner: {\n            ...parameters.owner,\n          },\n        };\n      })\n    );\n  }\n  updateConfigurationForCartEntry(\n    parameters: ConfiguratorTextfield.UpdateCartEntryParameters\n  ): Observable<CartModification> {\n    const url = this.occEndpointsService.buildUrl(\n      'updateTextfieldConfigurationForCartEntry',\n      {\n        urlParams: {\n          userId: parameters.userId,\n          cartId: parameters.cartId,\n          cartEntryNumber: parameters.cartEntryNumber,\n        },\n      }\n    );\n\n    const occUpdateCartEntryParameters = this.converterService.convert(\n      parameters,\n      CONFIGURATION_TEXTFIELD_UPDATE_CART_ENTRY_SERIALIZER\n    );\n\n    return this.http\n      .post<CartModification>(url, occUpdateCartEntryParameters)\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { ConfigurationInfo } from '@spartacus/product-configurator/common';\nimport { ConfiguratorTextfield } from '../../core/model/configurator-textfield.model';\nimport { OccConfiguratorTextfield } from '../occ-configurator-textfield.models';\n\nexport const CONFIGURATOR_TYPE_TEXTFIELD = 'TEXTFIELD';\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfiguratorTextfieldUpdateCartEntrySerializer\n  implements\n    Converter<\n      ConfiguratorTextfield.UpdateCartEntryParameters,\n      OccConfiguratorTextfield.UpdateCartEntryParameters\n    >\n{\n  constructor() {\n    // Intentional empty constructor\n  }\n\n  /**\n   * Converts the attributes for the updateCartEntry request into OCC format. Most attributes are just copied,\n   * except for the backend configurator type that needs to be set to 'TEXTFIELD'\n   * @param source Attributes for updating a cart entries' configuration in generic format\n   * @returns ttributes for updating a cart entries' configuration in OCC format\n   */\n  convert(\n    source: ConfiguratorTextfield.UpdateCartEntryParameters\n  ): OccConfiguratorTextfield.UpdateCartEntryParameters {\n    const configurationInfos: ConfigurationInfo[] = [];\n    source.configuration?.configurationInfos.forEach((info) =>\n      this.convertInfo(info, configurationInfos)\n    );\n\n    const target: OccConfiguratorTextfield.UpdateCartEntryParameters = {\n      userId: source.userId,\n      cartId: source.cartId,\n      cartEntryNumber: source.cartEntryNumber,\n      configurationInfos: configurationInfos,\n    };\n\n    return target;\n  }\n\n  protected convertInfo(\n    source: ConfiguratorTextfield.ConfigurationInfo,\n    occConfigurationInfos: OccConfiguratorTextfield.ConfigurationInfo[]\n  ): void {\n    const occInfo: OccConfiguratorTextfield.ConfigurationInfo = {\n      configurationLabel: source.configurationLabel,\n      configurationValue: source.configurationValue,\n      status: source.status,\n      configuratorType: CONFIGURATOR_TYPE_TEXTFIELD,\n    };\n    occConfigurationInfos.push(occInfo);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { OccConfig } from '@spartacus/core';\n\nexport function defaultOccConfiguratorTextfieldConfigFactory(): OccConfig {\n  return {\n    backend: {\n      occ: {\n        endpoints: {\n          createTextfieldConfiguration:\n            'products/${productCode}/configurator/textfield',\n\n          addTextfieldConfigurationToCart:\n            'users/${userId}/carts/${cartId}/entries/configurator/textfield',\n\n          readTextfieldConfigurationForCartEntry:\n            'users/${userId}/carts/${cartId}/entries/${cartEntryNumber}/configurator/textfield',\n          readTextfieldConfigurationForOrderEntry:\n            'users/${userId}/orders/${orderId}/entries/${orderEntryNumber}/configurator/textfield',\n          updateTextfieldConfigurationForCartEntry:\n            'users/${userId}/carts/${cartId}/entries/${cartEntryNumber}/configurator/textfield',\n        },\n      },\n    },\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ConfigModule } from '@spartacus/core';\nimport { ConfiguratorTextfieldAdapter } from '../core/connectors/configurator-textfield.adapter';\nimport {\n  CONFIGURATION_TEXTFIELD_ADD_TO_CART_SERIALIZER,\n  CONFIGURATION_TEXTFIELD_NORMALIZER,\n  CONFIGURATION_TEXTFIELD_UPDATE_CART_ENTRY_SERIALIZER,\n} from '../core/connectors/converters';\nimport { OccConfiguratorTextfieldAddToCartSerializer } from './converters/occ-configurator-textfield-add-to-cart-serializer';\nimport { OccConfiguratorTextfieldNormalizer } from './converters/occ-configurator-textfield-normalizer';\nimport { OccConfiguratorTextfieldUpdateCartEntrySerializer } from './converters/occ-configurator-textfield-update-cart-entry-serializer';\nimport { defaultOccConfiguratorTextfieldConfigFactory } from './default-occ-configurator-textfield-config';\nimport { OccConfiguratorTextfieldAdapter } from './occ-configurator-textfield.adapter';\n\n@NgModule({\n  imports: [\n    CommonModule,\n\n    ConfigModule.withConfigFactory(\n      defaultOccConfiguratorTextfieldConfigFactory\n    ),\n  ],\n  providers: [\n    {\n      provide: ConfiguratorTextfieldAdapter,\n      useClass: OccConfiguratorTextfieldAdapter,\n    },\n    {\n      provide: CONFIGURATION_TEXTFIELD_NORMALIZER,\n      useExisting: OccConfiguratorTextfieldNormalizer,\n      multi: true,\n    },\n    {\n      provide: CONFIGURATION_TEXTFIELD_ADD_TO_CART_SERIALIZER,\n      useExisting: OccConfiguratorTextfieldAddToCartSerializer,\n      multi: true,\n    },\n    {\n      provide: CONFIGURATION_TEXTFIELD_UPDATE_CART_ENTRY_SERIALIZER,\n      useExisting: OccConfiguratorTextfieldUpdateCartEntrySerializer,\n      multi: true,\n    },\n  ],\n})\nexport class TextfieldConfiguratorOccModule {}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Imported for side effects (module augmentation)\nimport './occ-configurator-textfield-endpoints.model';\nexport * from './converters/index';\nexport * from './occ-configurator-textfield.adapter';\nexport * from './textfield-configurator-occ.module';\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { TextfieldConfiguratorComponentsModule } from './components/textfield-configurator-components.module';\nimport { TextfieldConfiguratorCoreModule } from './core/textfield-configurator-core.module';\nimport { TextfieldConfiguratorOccModule } from './occ/textfield-configurator-occ.module';\n\n/**\n * Exposes the textfield configurator, a small configurator that only provides 3 attributes at product level without any dependencies between them,\n * and in the first place serves as a template for other configurator implementations.\n */\n@NgModule({\n  imports: [\n    TextfieldConfiguratorCoreModule,\n    TextfieldConfiguratorComponentsModule,\n    TextfieldConfiguratorOccModule,\n  ],\n})\nexport class TextfieldConfiguratorModule {}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * Public API Surface of textfield configurator\n */\n\nexport * from './components/index';\nexport * from './core/index';\nexport * from './occ/index';\nexport * from './textfield-configurator.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["ConfiguratorTextFieldSelectors.getConfigurationsState","ConfiguratorTextfieldActions.CreateConfiguration","ConfiguratorTextFieldSelectors.getConfigurationContent","ConfiguratorTextfieldActions.UpdateConfiguration","ConfiguratorTextfieldActions.AddToCart","ConfiguratorTextfieldActions.UpdateCartEntryConfiguration","ConfiguratorTextfieldActions.ReadCartEntryConfiguration","ConfiguratorTextfieldActions.ReadOrderEntryConfiguration","i4","i1.ConfiguratorTextfieldService","i2","i3","i1","i4.ConfiguratorTextfieldInputFieldComponent","i5.ConfiguratorTextfieldInputFieldReadonlyComponent","i6.ConfiguratorTextfieldAddToCartButtonComponent","i7","i1.ConfiguratorTextfieldAdapter","ConfiguratorTextfieldActions.CREATE_CONFIGURATION","ConfiguratorTextfieldActions.CreateConfigurationSuccess","ConfiguratorTextfieldActions.CreateConfigurationFail","ConfiguratorTextfieldActions.ADD_TO_CART","ConfiguratorTextfieldActions.RemoveConfiguration","ConfiguratorTextfieldActions.AddToCartFail","ConfiguratorTextfieldActions.UPDATE_CART_ENTRY_CONFIGURATION","ConfiguratorTextfieldActions.UpdateCartEntryConfigurationFail","ConfiguratorTextfieldActions.READ_CART_ENTRY_CONFIGURATION","ConfiguratorTextfieldActions.ReadCartEntryConfigurationSuccess","ConfiguratorTextfieldActions.ReadCartEntryConfigurationFail","ConfiguratorTextfieldActions.READ_ORDER_ENTRY_CONFIGURATION","ConfiguratorTextfieldActions.ReadOrderEntryConfigurationSuccess","ConfiguratorTextfieldActions.ReadOrderEntryConfigurationFail","i2.ConfiguratorTextfieldConnector","ConfiguratorTextfieldActions.CREATE_CONFIGURATION_SUCCESS","ConfiguratorTextfieldActions.READ_CART_ENTRY_CONFIGURATION_SUCCESS","ConfiguratorTextfieldActions.READ_ORDER_ENTRY_CONFIGURATION_SUCCESS","ConfiguratorTextfieldActions.UPDATE_CONFIGURATION","ConfiguratorTextfieldActions.REMOVE_CONFIGURATION","configuratorTextfieldReducer","CONFIGURATOR_TYPE_TEXTFIELD"],"mappings":"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"}