/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { delay, filter, map, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-groups.service";
import * as i2 from "../../core/facade/configurator-commons.service";
import * as i3 from "@spartacus/product-configurator/common";
import * as i4 from "../service/configurator-storefront-utils.service";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/core";
export class ConfiguratorPreviousNextButtonsComponent {
    constructor(configuratorGroupsService, configuratorCommonsService, configRouterExtractorService, configUtils) {
        this.configuratorGroupsService = configuratorGroupsService;
        this.configuratorCommonsService = configuratorCommonsService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.configUtils = configUtils;
        this.configuration$ = this.configRouterExtractorService
            .extractRouterData()
            .pipe(switchMap((routerData) => this.configuratorCommonsService.getConfiguration(routerData.owner)));
    }
    onPrevious(configuration) {
        this.configuratorGroupsService
            .getPreviousGroupId(configuration.owner)
            .pipe(take(1))
            .subscribe((groupId) => {
            if (groupId) {
                this.configuratorGroupsService.navigateToGroup(configuration, groupId);
                this.focusFirstAttribute();
            }
        });
        this.configUtils.scrollToConfigurationElement('.VariantConfigurationTemplate, .CpqConfigurationTemplate');
    }
    onNext(configuration) {
        this.configuratorGroupsService
            .getNextGroupId(configuration.owner)
            .pipe(take(1))
            .subscribe((groupId) => {
            if (groupId) {
                this.configuratorGroupsService.navigateToGroup(configuration, groupId);
                this.focusFirstAttribute();
            }
        });
        this.configUtils.scrollToConfigurationElement('.VariantConfigurationTemplate, .CpqConfigurationTemplate');
    }
    isFirstGroup(owner) {
        return this.configuratorGroupsService
            .getPreviousGroupId(owner)
            .pipe(map((group) => !group));
    }
    isLastGroup(owner) {
        return this.configuratorGroupsService
            .getNextGroupId(owner)
            .pipe(map((group) => !group));
    }
    focusFirstAttribute() {
        this.configRouterExtractorService
            .extractRouterData()
            .pipe(switchMap((routerData) => this.configuratorCommonsService
            .isConfigurationLoading(routerData.owner)
            .pipe(filter((isLoading) => isLoading), take(1), switchMap(() => this.configuratorCommonsService
            .isConfigurationLoading(routerData.owner)
            .pipe(filter((isLoading) => !isLoading), take(1), delay(0) //we need to consider the re-rendering of the page
        )))))
            .subscribe(() => this.configUtils.focusFirstAttribute());
    }
}
ConfiguratorPreviousNextButtonsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorPreviousNextButtonsComponent, deps: [{ token: i1.ConfiguratorGroupsService }, { token: i2.ConfiguratorCommonsService }, { token: i3.ConfiguratorRouterExtractorService }, { token: i4.ConfiguratorStorefrontUtilsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorPreviousNextButtonsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: ConfiguratorPreviousNextButtonsComponent, selector: "cx-configurator-previous-next-buttons", ngImport: i0, template: "<ng-container *ngIf=\"configuration$ | async as configuration\">\n  <ng-container *ngIf=\"configuration?.groups?.length > 1\">\n    <button\n      class=\"cx-btn btn btn-action\"\n      [disabled]=\"isFirstGroup(configuration.owner) | async\"\n      (click)=\"onPrevious(configuration)\"\n      [attr.aria-label]=\"'configurator.a11y.previous' | cxTranslate\"\n    >\n      {{ 'configurator.button.previous' | cxTranslate }}\n    </button>\n    <button\n      class=\"cx-btn btn btn-secondary\"\n      [disabled]=\"isLastGroup(configuration.owner) | async\"\n      (click)=\"onNext(configuration)\"\n      [attr.aria-label]=\"'configurator.a11y.next' | cxTranslate\"\n    >\n      {{ 'configurator.button.next' | cxTranslate }}\n    </button>\n  </ng-container>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorPreviousNextButtonsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-previous-next-buttons', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"configuration$ | async as configuration\">\n  <ng-container *ngIf=\"configuration?.groups?.length > 1\">\n    <button\n      class=\"cx-btn btn btn-action\"\n      [disabled]=\"isFirstGroup(configuration.owner) | async\"\n      (click)=\"onPrevious(configuration)\"\n      [attr.aria-label]=\"'configurator.a11y.previous' | cxTranslate\"\n    >\n      {{ 'configurator.button.previous' | cxTranslate }}\n    </button>\n    <button\n      class=\"cx-btn btn btn-secondary\"\n      [disabled]=\"isLastGroup(configuration.owner) | async\"\n      (click)=\"onNext(configuration)\"\n      [attr.aria-label]=\"'configurator.a11y.next' | cxTranslate\"\n    >\n      {{ 'configurator.button.next' | cxTranslate }}\n    </button>\n  </ng-container>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorGroupsService }, { type: i2.ConfiguratorCommonsService }, { type: i3.ConfiguratorRouterExtractorService }, { type: i4.ConfiguratorStorefrontUtilsService }]; } });
//# sourceMappingURL=data:application/json;base64,