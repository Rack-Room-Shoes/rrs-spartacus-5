/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { distinctUntilKeyChanged, filter, switchMap } from 'rxjs/operators';
import { Configurator } from '../../core/model/configurator.model';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-commons.service";
import * as i2 from "@spartacus/product-configurator/common";
import * as i3 from "@angular/common";
import * as i4 from "../overview-attribute/configurator-overview-attribute.component";
import * as i5 from "../overview-bundle-attribute/configurator-overview-bundle-attribute.component";
import * as i6 from "@spartacus/core";
export class ConfiguratorOverviewFormComponent {
    constructor(configuratorCommonsService, configRouterExtractorService) {
        this.configuratorCommonsService = configuratorCommonsService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.attributeOverviewType = Configurator.AttributeOverviewType;
        this.configuration$ = this.configRouterExtractorService.extractRouterData().pipe(switchMap((routerData) => this.configuratorCommonsService.getOrCreateConfiguration(routerData.owner)), distinctUntilKeyChanged('configId'), switchMap((configuration) => this.configuratorCommonsService.getConfigurationWithOverview(configuration)), filter((configuration) => configuration.overview != null));
    }
    /**
     * Does the configuration contain any selected attribute values?
     * @param {Configurator.Configuration} configuration - Current configuration
     * @returns {boolean} - Any attributes available
     */
    hasAttributes(configuration) {
        return (configuration.overview?.groups?.find((group) => group.attributes ? group.attributes.length : 0 > 0) !== undefined);
    }
    /**
     * Verifies whether the next or the previous attributes are same.
     *
     * @param {Configurator.AttributeOverview[]} attributes - Attribute array
     * @param {number} index - Index of the attribute in the array
     * @return {boolean} - 'True' if it is the same attribute, otherwise 'false'
     */
    isSameAttribute(attributes, index) {
        if (attributes.length > 1) {
            if (index === 0) {
                return (attributes[index]?.attribute === attributes[index + 1]?.attribute);
            }
            else {
                return (attributes[index]?.attribute === attributes[index - 1]?.attribute);
            }
        }
        return false;
    }
    /**
     * Retrieves the styling for the corresponding element.
     *
     * @param {Configurator.AttributeOverview[]} attributes - Attribute array
     * @param {number} index - Index of the attribute in the array
     * @return {string} - corresponding style class
     */
    getStyleClasses(attributes, index) {
        let styleClass = '';
        switch (attributes[index]?.type) {
            case this.attributeOverviewType.BUNDLE:
                styleClass += 'bundle';
                break;
            case this.attributeOverviewType.GENERAL:
                styleClass += 'general';
                break;
        }
        if (index === 0 || !this.isSameAttribute(attributes, index)) {
            styleClass += ' margin';
        }
        if (!this.isSameAttribute(attributes, index + 1) &&
            !styleClass.includes('bundle')) {
            styleClass += ' last-value-pair';
        }
        return styleClass;
    }
}
ConfiguratorOverviewFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorOverviewFormComponent, deps: [{ token: i1.ConfiguratorCommonsService }, { token: i2.ConfiguratorRouterExtractorService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorOverviewFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: ConfiguratorOverviewFormComponent, selector: "cx-configurator-overview-form", ngImport: i0, template: "<ng-container *ngIf=\"configuration$ | async as configuration; else ghostForm\">\n  <ng-container *ngIf=\"hasAttributes(configuration); else noAttributes\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        groups;\n        context: {\n          overviewGroups: configuration.overview.groups,\n          level: 1\n        }\n      \"\n    ></ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #noAttributes>\n  <div class=\"cx-no-attribute-value-pairs\">\n    <!-- We currently do not support filtering on overview page so this should never be displayed -->\n    <h2>{{ 'configurator.overviewForm.noAttributeHeader' | cxTranslate }}</h2>\n    <p>{{ 'configurator.overviewForm.noAttributeText' | cxTranslate }}</p>\n  </div>\n</ng-template>\n\n<ng-template #groups let-overviewGroups=\"overviewGroups\" let-level=\"level\">\n  <span class=\"cx-visually-hidden\">\n    {{ 'configurator.a11y.listOfAttributesAndValues' | cxTranslate }}\n  </span>\n  <ng-container *ngFor=\"let group of overviewGroups\">\n    <div\n      class=\"cx-group\"\n      [class.topLevel]=\"level === 1\"\n      [class.subgroupTopLevel]=\"level === 1 && group.subGroups?.length > 0\"\n    >\n      <span class=\"cx-visually-hidden\">\n        {{\n          'configurator.a11y.group'\n            | cxTranslate\n              : {\n                  group: group.groupDescription\n                }\n        }}\n      </span>\n      <h2 aria-hidden=\"true\">\n        <span>{{ group.groupDescription }}</span>\n      </h2>\n\n      <div\n        *ngFor=\"let attributeOverview of group.attributes; let i = index\"\n        class=\"cx-attribute-value-pair\"\n        [ngClass]=\"getStyleClasses(group.attributes, i)\"\n      >\n        <ng-container [ngSwitch]=\"attributeOverview?.type\">\n          <ng-container *ngSwitchCase=\"attributeOverviewType.GENERAL\">\n            <cx-configurator-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-overview-attribute>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"attributeOverviewType.BUNDLE\">\n            <cx-configurator-cpq-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-cpq-overview-attribute>\n          </ng-container>\n\n          <ng-container *ngSwitchDefault>\n            <cx-configurator-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-overview-attribute>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <ng-container *ngIf=\"group.subGroups?.length > 0\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          groups;\n          context: { overviewGroups: group.subGroups, level: level + 1 }\n        \"\n      ></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #ghostForm>\n  <ng-container *ngFor=\"let number of [0, 1, 2]\">\n    <div class=\"cx-ghost-group\">\n      <div class=\"cx-ghost-header ghost\"></div>\n      <div class=\"cx-ghost-body\">\n        <ng-container *ngFor=\"let number of [0, 1, 2, 3, 4, 5]\">\n          <div class=\"cx-ghost-attribute-value\">\n            <div class=\"cx-ghost-value ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-attribute-label\">\n            <div class=\"cx-ghost-label ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-attribute-price ghost\"></div>\n        </ng-container>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i4.ConfiguratorOverviewAttributeComponent, selector: "cx-configurator-overview-attribute", inputs: ["attributeOverview"] }, { kind: "component", type: i5.ConfiguratorOverviewBundleAttributeComponent, selector: "cx-configurator-cpq-overview-attribute", inputs: ["attributeOverview"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorOverviewFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-overview-form', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"configuration$ | async as configuration; else ghostForm\">\n  <ng-container *ngIf=\"hasAttributes(configuration); else noAttributes\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        groups;\n        context: {\n          overviewGroups: configuration.overview.groups,\n          level: 1\n        }\n      \"\n    ></ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #noAttributes>\n  <div class=\"cx-no-attribute-value-pairs\">\n    <!-- We currently do not support filtering on overview page so this should never be displayed -->\n    <h2>{{ 'configurator.overviewForm.noAttributeHeader' | cxTranslate }}</h2>\n    <p>{{ 'configurator.overviewForm.noAttributeText' | cxTranslate }}</p>\n  </div>\n</ng-template>\n\n<ng-template #groups let-overviewGroups=\"overviewGroups\" let-level=\"level\">\n  <span class=\"cx-visually-hidden\">\n    {{ 'configurator.a11y.listOfAttributesAndValues' | cxTranslate }}\n  </span>\n  <ng-container *ngFor=\"let group of overviewGroups\">\n    <div\n      class=\"cx-group\"\n      [class.topLevel]=\"level === 1\"\n      [class.subgroupTopLevel]=\"level === 1 && group.subGroups?.length > 0\"\n    >\n      <span class=\"cx-visually-hidden\">\n        {{\n          'configurator.a11y.group'\n            | cxTranslate\n              : {\n                  group: group.groupDescription\n                }\n        }}\n      </span>\n      <h2 aria-hidden=\"true\">\n        <span>{{ group.groupDescription }}</span>\n      </h2>\n\n      <div\n        *ngFor=\"let attributeOverview of group.attributes; let i = index\"\n        class=\"cx-attribute-value-pair\"\n        [ngClass]=\"getStyleClasses(group.attributes, i)\"\n      >\n        <ng-container [ngSwitch]=\"attributeOverview?.type\">\n          <ng-container *ngSwitchCase=\"attributeOverviewType.GENERAL\">\n            <cx-configurator-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-overview-attribute>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"attributeOverviewType.BUNDLE\">\n            <cx-configurator-cpq-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-cpq-overview-attribute>\n          </ng-container>\n\n          <ng-container *ngSwitchDefault>\n            <cx-configurator-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-overview-attribute>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <ng-container *ngIf=\"group.subGroups?.length > 0\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          groups;\n          context: { overviewGroups: group.subGroups, level: level + 1 }\n        \"\n      ></ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #ghostForm>\n  <ng-container *ngFor=\"let number of [0, 1, 2]\">\n    <div class=\"cx-ghost-group\">\n      <div class=\"cx-ghost-header ghost\"></div>\n      <div class=\"cx-ghost-body\">\n        <ng-container *ngFor=\"let number of [0, 1, 2, 3, 4, 5]\">\n          <div class=\"cx-ghost-attribute-value\">\n            <div class=\"cx-ghost-value ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-attribute-label\">\n            <div class=\"cx-ghost-label ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-attribute-price ghost\"></div>\n        </ng-container>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorCommonsService }, { type: i2.ConfiguratorRouterExtractorService }]; } });
//# sourceMappingURL=data:application/json;base64,