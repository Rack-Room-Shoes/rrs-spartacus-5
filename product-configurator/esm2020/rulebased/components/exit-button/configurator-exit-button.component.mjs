import { Component } from '@angular/core';
import { CommonConfigurator, } from '@spartacus/product-configurator/common';
import { BREAKPOINT } from '@spartacus/storefront';
import { map, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/product-configurator/common";
import * as i3 from "../../core/facade/configurator-commons.service";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@angular/common";
export class ConfiguratorExitButtonComponent {
    constructor(productService, routingService, configRouterExtractorService, configuratorCommonsService, breakpointService, windowRef, location) {
        this.productService = productService;
        this.routingService = routingService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.configuratorCommonsService = configuratorCommonsService;
        this.breakpointService = breakpointService;
        this.windowRef = windowRef;
        this.location = location;
        this.container$ = this.configRouterExtractorService.extractRouterData().pipe(switchMap((routerData) => this.configuratorCommonsService
            .getConfiguration(routerData.owner)
            .pipe(map((configuration) => ({ routerData, configuration })))
            .pipe(switchMap((cont) => this.productService.get(cont.configuration.productCode).pipe(map((product) => ({
            routerData: cont.routerData,
            configuration: cont.configuration,
            product,
        })))))));
    }
    navigateToCart() {
        this.routingService.go('cart');
    }
    /**
     * Navigates to the product detail page of the product that is being configured.
     */
    exitConfiguration() {
        this.container$.pipe(take(1)).subscribe((container) => {
            if (container.routerData.owner.type ===
                CommonConfigurator.OwnerType.CART_ENTRY) {
                this.navigateToCart();
            }
            else {
                this.routingService.go({
                    cxRoute: 'product',
                    params: container.product,
                });
            }
        });
    }
    /**
     * Verifies whether the current screen size equals or is larger than breakpoint `BREAKPOINT.md`.
     *
     * @returns {Observable<boolean>} - If the given breakpoint equals or is larger than`BREAKPOINT.md` returns `true`, otherwise `false`.
     */
    isDesktop() {
        return this.breakpointService.isUp(BREAKPOINT.md);
    }
    /**
     * Verifies whether the current screen size equals or is smaller than breakpoint `BREAKPOINT.sm`.
     *
     * @returns {Observable<boolean>} - If the given breakpoint equals or is smaller than`BREAKPOINT.sm` returns `true`, otherwise `false`.
     */
    isMobile() {
        return this.breakpointService.isDown(BREAKPOINT.sm);
    }
}
ConfiguratorExitButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorExitButtonComponent, deps: [{ token: i1.ProductService }, { token: i1.RoutingService }, { token: i2.ConfiguratorRouterExtractorService }, { token: i3.ConfiguratorCommonsService }, { token: i4.BreakpointService }, { token: i1.WindowRef }, { token: i5.Location }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorExitButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: ConfiguratorExitButtonComponent, selector: "cx-configurator-exit-button", ngImport: i0, template: "<ng-container *ngIf=\"container$ | async as container\">\n  <button\n    class=\"cx-config-exit-button\"\n    tabindex=\"0\"\n    (click)=\"exitConfiguration()\"\n  >\n    <ng-container *ngIf=\"!container.routerData.isOwnerCartEntry\">\n      <ng-container *ngIf=\"isDesktop() | async\">\n        {{ 'configurator.button.exit' | cxTranslate }}\n      </ng-container>\n      <ng-container *ngIf=\"isMobile() | async\">\n        {{ 'configurator.button.exitMobile' | cxTranslate }}\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"container.routerData.isOwnerCartEntry\">\n      <ng-container *ngIf=\"isMobile() | async\">\n        {{ 'configurator.button.cancelConfigurationMobile' | cxTranslate }}\n      </ng-container>\n      <ng-container *ngIf=\"isDesktop() | async\">\n        {{ 'configurator.button.cancelConfiguration' | cxTranslate }}\n      </ng-container>\n    </ng-container>\n  </button>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorExitButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-exit-button', template: "<ng-container *ngIf=\"container$ | async as container\">\n  <button\n    class=\"cx-config-exit-button\"\n    tabindex=\"0\"\n    (click)=\"exitConfiguration()\"\n  >\n    <ng-container *ngIf=\"!container.routerData.isOwnerCartEntry\">\n      <ng-container *ngIf=\"isDesktop() | async\">\n        {{ 'configurator.button.exit' | cxTranslate }}\n      </ng-container>\n      <ng-container *ngIf=\"isMobile() | async\">\n        {{ 'configurator.button.exitMobile' | cxTranslate }}\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"container.routerData.isOwnerCartEntry\">\n      <ng-container *ngIf=\"isMobile() | async\">\n        {{ 'configurator.button.cancelConfigurationMobile' | cxTranslate }}\n      </ng-container>\n      <ng-container *ngIf=\"isDesktop() | async\">\n        {{ 'configurator.button.cancelConfiguration' | cxTranslate }}\n      </ng-container>\n    </ng-container>\n  </button>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ProductService }, { type: i1.RoutingService }, { type: i2.ConfiguratorRouterExtractorService }, { type: i3.ConfiguratorCommonsService }, { type: i4.BreakpointService }, { type: i1.WindowRef }, { type: i5.Location }]; } });
//# sourceMappingURL=data:application/json;base64,