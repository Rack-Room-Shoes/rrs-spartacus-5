/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ConfiguratorRouter, } from '@spartacus/product-configurator/common';
import { filter, switchMap, take } from 'rxjs/operators';
import { Configurator } from '../../core/model/configurator.model';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-commons.service";
import * as i2 from "../../core/facade/configurator-groups.service";
import * as i3 from "@spartacus/product-configurator/common";
import * as i4 from "@spartacus/core";
import * as i5 from "../service/configurator-storefront-utils.service";
import * as i6 from "@angular/common";
import * as i7 from "../attribute/types/input-field/configurator-attribute-input-field.component";
import * as i8 from "../attribute/footer/configurator-attribute-footer.component";
import * as i9 from "../attribute/types/numeric-input-field/configurator-attribute-numeric-input-field.component";
import * as i10 from "../attribute/header/configurator-attribute-header.component";
import * as i11 from "../attribute/types/radio-button/configurator-attribute-radio-button.component";
import * as i12 from "../attribute/types/single-selection-bundle/configurator-attribute-single-selection-bundle.component";
import * as i13 from "../attribute/types/multi-selection-bundle/configurator-attribute-multi-selection-bundle.component";
import * as i14 from "../attribute/types/read-only/configurator-attribute-read-only.component";
import * as i15 from "../attribute/types/single-selection-image/configurator-attribute-single-selection-image.component";
import * as i16 from "../attribute/types/single-selection-bundle-dropdown/configurator-attribute-single-selection-bundle-dropdown.component";
import * as i17 from "../attribute/types/checkbox/configurator-attribute-checkbox.component";
import * as i18 from "../attribute/types/checkbox-list/configurator-attribute-checkbox-list.component";
import * as i19 from "../attribute/types/drop-down/configurator-attribute-drop-down.component";
import * as i20 from "../attribute/types/multi-selection-image/configurator-attribute-multi-selection-image.component";
import * as i21 from "../conflict-description/configurator-conflict-description.component";
import * as i22 from "../conflict-suggestion/configurator-conflict-suggestion.component";
export class ConfiguratorFormComponent {
    constructor(configuratorCommonsService, configuratorGroupsService, configRouterExtractorService, languageService, configUtils) {
        this.configuratorCommonsService = configuratorCommonsService;
        this.configuratorGroupsService = configuratorGroupsService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.languageService = languageService;
        this.configUtils = configUtils;
        this.configuration$ = this.configRouterExtractorService.extractRouterData().pipe(filter((routerData) => routerData.pageType === ConfiguratorRouter.PageType.CONFIGURATION), switchMap((routerData) => {
            return this.configuratorCommonsService.getOrCreateConfiguration(routerData.owner);
        }));
        this.currentGroup$ = this.configRouterExtractorService
            .extractRouterData()
            .pipe(switchMap((routerData) => this.configuratorGroupsService.getCurrentGroup(routerData.owner)));
        this.activeLanguage$ = this.languageService.getActive();
        this.uiType = Configurator.UiType;
    }
    ngOnInit() {
        this.configRouterExtractorService
            .extractRouterData()
            .pipe(take(1))
            .subscribe((routingData) => {
            //In case of resolving issues, check if the configuration contains conflicts,
            //if not, check if the configuration contains missing mandatory fields and show the group
            if (routingData.resolveIssues) {
                this.configuratorCommonsService
                    .hasConflicts(routingData.owner)
                    .pipe(take(1))
                    .subscribe((hasConflicts) => {
                    if (hasConflicts && !routingData.skipConflicts) {
                        this.configuratorGroupsService.navigateToConflictSolver(routingData.owner);
                        //Only check for Incomplete group when there are no conflicts or conflicts should be skipped
                    }
                    else {
                        this.configuratorGroupsService.navigateToFirstIncompleteGroup(routingData.owner);
                    }
                });
            }
        });
    }
    updateConfiguration(event) {
        this.configuratorCommonsService.updateConfiguration(event.ownerKey, event.changedAttribute, event.updateType);
    }
    isConflictGroupType(groupType) {
        return this.configuratorGroupsService.isConflictGroupType(groupType);
    }
    /**
     * Generates a group ID.
     *
     * @param {string} groupId - group ID
     * @returns {string | undefined} - generated group ID
     */
    createGroupId(groupId) {
        return this.configUtils.createGroupId(groupId);
    }
}
ConfiguratorFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorFormComponent, deps: [{ token: i1.ConfiguratorCommonsService }, { token: i2.ConfiguratorGroupsService }, { token: i3.ConfiguratorRouterExtractorService }, { token: i4.LanguageService }, { token: i5.ConfiguratorStorefrontUtilsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: ConfiguratorFormComponent, selector: "cx-configurator-form", ngImport: i0, template: "<ng-container *ngIf=\"configuration$ | async as configuration; else ghostForm\">\n  <ng-container *ngIf=\"currentGroup$ | async as currentGroup\">\n    <div id=\"{{ createGroupId(currentGroup.id) }}\" role=\"tabpanel\">\n      <ng-container *ngIf=\"isConflictGroupType(currentGroup.groupType)\">\n        <cx-configurator-conflict-description\n          [currentGroup]=\"currentGroup\"\n        ></cx-configurator-conflict-description>\n      </ng-container>\n      <div\n        class=\"cx-group-attribute\"\n        *ngFor=\"\n          let attribute of currentGroup.attributes;\n          let indexOfAttribute = index\n        \"\n      >\n        <ng-container *ngIf=\"activeLanguage$ | async as activeLanguage\">\n          <ng-container *ngIf=\"isConflictGroupType(currentGroup.groupType)\">\n            <cx-configurator-conflict-suggestion\n              [currentGroup]=\"currentGroup\"\n              [attribute]=\"attribute\"\n              [suggestionNumber]=\"indexOfAttribute\"\n            ></cx-configurator-conflict-suggestion>\n          </ng-container>\n          <cx-configurator-attribute-header\n            [attribute]=\"attribute\"\n            [owner]=\"configuration.owner\"\n            [groupId]=\"currentGroup.id\"\n            [groupType]=\"currentGroup.groupType\"\n          >\n          </cx-configurator-attribute-header>\n          <!-- Single Selection Radio Button -->\n          <cx-configurator-attribute-radio-button\n            *ngIf=\"\n              attribute.uiType === uiType.RADIOBUTTON ||\n              attribute.uiType === uiType.RADIOBUTTON_ADDITIONAL_INPUT\n            \"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            [ownerType]=\"configuration.owner.type\"\n            [language]=\"activeLanguage\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-radio-button>\n\n          <!-- Single Selection Product Bundle -->\n          <cx-configurator-attribute-single-selection-bundle\n            (selectionChange)=\"updateConfiguration($event)\"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            *ngIf=\"attribute.uiType === uiType.RADIOBUTTON_PRODUCT\"\n          ></cx-configurator-attribute-single-selection-bundle>\n\n          <!-- Multi Selection Product Bundle -->\n          <cx-configurator-attribute-multi-selection-bundle\n            (selectionChange)=\"updateConfiguration($event)\"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            *ngIf=\"attribute.uiType === uiType.CHECKBOXLIST_PRODUCT\"\n          ></cx-configurator-attribute-multi-selection-bundle>\n\n          <!-- Single Selection Dropdown Product Bundle -->\n          <cx-configurator-attribute-single-selection-bundle-dropdown\n            *ngIf=\"attribute.uiType === uiType.DROPDOWN_PRODUCT\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-single-selection-bundle-dropdown>\n\n          <!-- Single Selection Dropdown -->\n          <cx-configurator-attribute-drop-down\n            *ngIf=\"\n              attribute.uiType === uiType.DROPDOWN ||\n              attribute.uiType === uiType.DROPDOWN_ADDITIONAL_INPUT\n            \"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerKey]=\"configuration.owner.key\"\n            [ownerType]=\"configuration.owner.type\"\n            [language]=\"activeLanguage\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-drop-down>\n          <cx-configurator-attribute-input-field\n            *ngIf=\"attribute.uiType === uiType.STRING\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerType]=\"configuration.owner.type\"\n            [ownerKey]=\"configuration.owner.key\"\n            (inputChange)=\"updateConfiguration($event)\"\n          >\n          </cx-configurator-attribute-input-field>\n\n          <cx-configurator-attribute-numeric-input-field\n            *ngIf=\"attribute.uiType === uiType.NUMERIC\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerType]=\"configuration.owner.type\"\n            [ownerKey]=\"configuration.owner.key\"\n            [language]=\"activeLanguage\"\n            (inputChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-numeric-input-field>\n\n          <!-- Multi Selection Checkbox -->\n          <cx-configurator-attribute-checkbox-list\n            *ngIf=\"attribute.uiType === uiType.CHECKBOXLIST\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-checkbox-list>\n          <cx-configurator-attribute-checkbox\n            *ngIf=\"attribute.uiType === uiType.CHECKBOX\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-checkbox>\n          <cx-configurator-attribute-read-only\n            *ngIf=\"attribute.uiType === uiType.READ_ONLY\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n          ></cx-configurator-attribute-read-only>\n          <cx-configurator-attribute-multi-selection-image\n            *ngIf=\"attribute.uiType === uiType.MULTI_SELECTION_IMAGE\"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-multi-selection-image>\n          <cx-configurator-attribute-single-selection-image\n            *ngIf=\"attribute.uiType === uiType.SINGLE_SELECTION_IMAGE\"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-single-selection-image>\n\n          <em *ngIf=\"attribute.uiType === uiType.NOT_IMPLEMENTED\">{{\n            'configurator.attribute.notSupported' | cxTranslate\n          }}</em>\n\n          <cx-configurator-attribute-footer\n            [attribute]=\"attribute\"\n            [owner]=\"configuration.owner\"\n            [groupId]=\"currentGroup.id\"\n          ></cx-configurator-attribute-footer>\n        </ng-container>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #ghostForm>\n  <ng-container *ngFor=\"let number of [0, 1, 2]\">\n    <div class=\"cx-ghost-attribute\">\n      <div class=\"cx-ghost-header\">\n        <div class=\"cx-ghost-title ghost\"></div>\n        <div class=\"cx-ghost-icon ghost\"></div>\n      </div>\n      <div class=\"cx-ghost-body\">\n        <div class=\"cx-ghost-text ghost\"></div>\n        <div class=\"cx-ghost-price ghost\"></div>\n      </div>\n    </div>\n\n    <div class=\"cx-ghost-attribute\">\n      <div class=\"cx-ghost-header\">\n        <div class=\"cx-ghost-title ghost\"></div>\n        <div class=\"cx-ghost-icon ghost\"></div>\n        <div class=\"cx-ghost-description-box\">\n          <div class=\"cx-ghost-description ghost\"></div>\n        </div>\n      </div>\n      <div class=\"cx-ghost-body\">\n        <div\n          *ngFor=\"let number of [0, 1, 2]; let i = index\"\n          class=\"cx-ghost-radiobutton-value\"\n        >\n          <div class=\"cx-ghost-value-label-pair\">\n            <div class=\"cx-ghost-value-icon ghost\"></div>\n            <div class=\"cx-ghost-label ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-value-price ghost\">\n            <ng-container *ngIf=\"i !== 0\">\n              <div class=\"cx-ghost-price\"></div>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i7.ConfiguratorAttributeInputFieldComponent, selector: "cx-configurator-attribute-input-field", inputs: ["ownerType", "attribute", "group", "ownerKey"], outputs: ["inputChange"] }, { kind: "component", type: i8.ConfiguratorAttributeFooterComponent, selector: "cx-configurator-attribute-footer", inputs: ["attribute", "owner", "groupId"] }, { kind: "component", type: i9.ConfiguratorAttributeNumericInputFieldComponent, selector: "cx-configurator-attribute-numeric-input-field", inputs: ["language"] }, { kind: "component", type: i10.ConfiguratorAttributeHeaderComponent, selector: "cx-configurator-attribute-header", inputs: ["attribute", "owner", "groupId", "groupType"] }, { kind: "component", type: i11.ConfiguratorAttributeRadioButtonComponent, selector: "cx-configurator-attribute-radio-button" }, { kind: "component", type: i12.ConfiguratorAttributeSingleSelectionBundleComponent, selector: "cx-configurator-attribute-single-selection-bundle" }, { kind: "component", type: i13.ConfiguratorAttributeMultiSelectionBundleComponent, selector: "cx-configurator-attribute-multi-selection-bundle" }, { kind: "component", type: i14.ConfiguratorAttributeReadOnlyComponent, selector: "cx-configurator-attribute-read-only", inputs: ["attribute", "group"] }, { kind: "component", type: i15.ConfiguratorAttributeSingleSelectionImageComponent, selector: "cx-configurator-attribute-single-selection-image", inputs: ["attribute", "ownerKey"], outputs: ["selectionChange"] }, { kind: "component", type: i16.ConfiguratorAttributeSingleSelectionBundleDropdownComponent, selector: "cx-configurator-attribute-single-selection-bundle-dropdown", inputs: ["group"] }, { kind: "component", type: i17.ConfiguratorAttributeCheckBoxComponent, selector: "cx-configurator-attribute-checkbox", inputs: ["attribute", "group", "ownerKey"], outputs: ["selectionChange"] }, { kind: "component", type: i18.ConfiguratorAttributeCheckBoxListComponent, selector: "cx-configurator-attribute-checkbox-list", inputs: ["group"] }, { kind: "component", type: i19.ConfiguratorAttributeDropDownComponent, selector: "cx-configurator-attribute-drop-down", inputs: ["group"] }, { kind: "component", type: i20.ConfiguratorAttributeMultiSelectionImageComponent, selector: "cx-configurator-attribute-multi-selection-image", inputs: ["attribute", "ownerKey"], outputs: ["selectionChange"] }, { kind: "component", type: i21.ConfiguratorConflictDescriptionComponent, selector: "cx-configurator-conflict-description", inputs: ["currentGroup"] }, { kind: "component", type: i22.ConfiguratorConflictSuggestionComponent, selector: "cx-configurator-conflict-suggestion", inputs: ["currentGroup", "attribute", "suggestionNumber"] }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-form', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"configuration$ | async as configuration; else ghostForm\">\n  <ng-container *ngIf=\"currentGroup$ | async as currentGroup\">\n    <div id=\"{{ createGroupId(currentGroup.id) }}\" role=\"tabpanel\">\n      <ng-container *ngIf=\"isConflictGroupType(currentGroup.groupType)\">\n        <cx-configurator-conflict-description\n          [currentGroup]=\"currentGroup\"\n        ></cx-configurator-conflict-description>\n      </ng-container>\n      <div\n        class=\"cx-group-attribute\"\n        *ngFor=\"\n          let attribute of currentGroup.attributes;\n          let indexOfAttribute = index\n        \"\n      >\n        <ng-container *ngIf=\"activeLanguage$ | async as activeLanguage\">\n          <ng-container *ngIf=\"isConflictGroupType(currentGroup.groupType)\">\n            <cx-configurator-conflict-suggestion\n              [currentGroup]=\"currentGroup\"\n              [attribute]=\"attribute\"\n              [suggestionNumber]=\"indexOfAttribute\"\n            ></cx-configurator-conflict-suggestion>\n          </ng-container>\n          <cx-configurator-attribute-header\n            [attribute]=\"attribute\"\n            [owner]=\"configuration.owner\"\n            [groupId]=\"currentGroup.id\"\n            [groupType]=\"currentGroup.groupType\"\n          >\n          </cx-configurator-attribute-header>\n          <!-- Single Selection Radio Button -->\n          <cx-configurator-attribute-radio-button\n            *ngIf=\"\n              attribute.uiType === uiType.RADIOBUTTON ||\n              attribute.uiType === uiType.RADIOBUTTON_ADDITIONAL_INPUT\n            \"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            [ownerType]=\"configuration.owner.type\"\n            [language]=\"activeLanguage\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-radio-button>\n\n          <!-- Single Selection Product Bundle -->\n          <cx-configurator-attribute-single-selection-bundle\n            (selectionChange)=\"updateConfiguration($event)\"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            *ngIf=\"attribute.uiType === uiType.RADIOBUTTON_PRODUCT\"\n          ></cx-configurator-attribute-single-selection-bundle>\n\n          <!-- Multi Selection Product Bundle -->\n          <cx-configurator-attribute-multi-selection-bundle\n            (selectionChange)=\"updateConfiguration($event)\"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            *ngIf=\"attribute.uiType === uiType.CHECKBOXLIST_PRODUCT\"\n          ></cx-configurator-attribute-multi-selection-bundle>\n\n          <!-- Single Selection Dropdown Product Bundle -->\n          <cx-configurator-attribute-single-selection-bundle-dropdown\n            *ngIf=\"attribute.uiType === uiType.DROPDOWN_PRODUCT\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-single-selection-bundle-dropdown>\n\n          <!-- Single Selection Dropdown -->\n          <cx-configurator-attribute-drop-down\n            *ngIf=\"\n              attribute.uiType === uiType.DROPDOWN ||\n              attribute.uiType === uiType.DROPDOWN_ADDITIONAL_INPUT\n            \"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerKey]=\"configuration.owner.key\"\n            [ownerType]=\"configuration.owner.type\"\n            [language]=\"activeLanguage\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-drop-down>\n          <cx-configurator-attribute-input-field\n            *ngIf=\"attribute.uiType === uiType.STRING\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerType]=\"configuration.owner.type\"\n            [ownerKey]=\"configuration.owner.key\"\n            (inputChange)=\"updateConfiguration($event)\"\n          >\n          </cx-configurator-attribute-input-field>\n\n          <cx-configurator-attribute-numeric-input-field\n            *ngIf=\"attribute.uiType === uiType.NUMERIC\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerType]=\"configuration.owner.type\"\n            [ownerKey]=\"configuration.owner.key\"\n            [language]=\"activeLanguage\"\n            (inputChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-numeric-input-field>\n\n          <!-- Multi Selection Checkbox -->\n          <cx-configurator-attribute-checkbox-list\n            *ngIf=\"attribute.uiType === uiType.CHECKBOXLIST\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-checkbox-list>\n          <cx-configurator-attribute-checkbox\n            *ngIf=\"attribute.uiType === uiType.CHECKBOX\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-checkbox>\n          <cx-configurator-attribute-read-only\n            *ngIf=\"attribute.uiType === uiType.READ_ONLY\"\n            [attribute]=\"attribute\"\n            [group]=\"currentGroup.id\"\n          ></cx-configurator-attribute-read-only>\n          <cx-configurator-attribute-multi-selection-image\n            *ngIf=\"attribute.uiType === uiType.MULTI_SELECTION_IMAGE\"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-multi-selection-image>\n          <cx-configurator-attribute-single-selection-image\n            *ngIf=\"attribute.uiType === uiType.SINGLE_SELECTION_IMAGE\"\n            [attribute]=\"attribute\"\n            [ownerKey]=\"configuration.owner.key\"\n            (selectionChange)=\"updateConfiguration($event)\"\n          ></cx-configurator-attribute-single-selection-image>\n\n          <em *ngIf=\"attribute.uiType === uiType.NOT_IMPLEMENTED\">{{\n            'configurator.attribute.notSupported' | cxTranslate\n          }}</em>\n\n          <cx-configurator-attribute-footer\n            [attribute]=\"attribute\"\n            [owner]=\"configuration.owner\"\n            [groupId]=\"currentGroup.id\"\n          ></cx-configurator-attribute-footer>\n        </ng-container>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #ghostForm>\n  <ng-container *ngFor=\"let number of [0, 1, 2]\">\n    <div class=\"cx-ghost-attribute\">\n      <div class=\"cx-ghost-header\">\n        <div class=\"cx-ghost-title ghost\"></div>\n        <div class=\"cx-ghost-icon ghost\"></div>\n      </div>\n      <div class=\"cx-ghost-body\">\n        <div class=\"cx-ghost-text ghost\"></div>\n        <div class=\"cx-ghost-price ghost\"></div>\n      </div>\n    </div>\n\n    <div class=\"cx-ghost-attribute\">\n      <div class=\"cx-ghost-header\">\n        <div class=\"cx-ghost-title ghost\"></div>\n        <div class=\"cx-ghost-icon ghost\"></div>\n        <div class=\"cx-ghost-description-box\">\n          <div class=\"cx-ghost-description ghost\"></div>\n        </div>\n      </div>\n      <div class=\"cx-ghost-body\">\n        <div\n          *ngFor=\"let number of [0, 1, 2]; let i = index\"\n          class=\"cx-ghost-radiobutton-value\"\n        >\n          <div class=\"cx-ghost-value-label-pair\">\n            <div class=\"cx-ghost-value-icon ghost\"></div>\n            <div class=\"cx-ghost-label ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-value-price ghost\">\n            <ng-container *ngIf=\"i !== 0\">\n              <div class=\"cx-ghost-price\"></div>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorCommonsService }, { type: i2.ConfiguratorGroupsService }, { type: i3.ConfiguratorRouterExtractorService }, { type: i4.LanguageService }, { type: i5.ConfiguratorStorefrontUtilsService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdG9yLWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3Byb2R1Y3QtY29uZmlndXJhdG9yL3J1bGViYXNlZC9jb21wb25lbnRzL2Zvcm0vY29uZmlndXJhdG9yLWZvcm0uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3Byb2R1Y3QtY29uZmlndXJhdG9yL3J1bGViYXNlZC9jb21wb25lbnRzL2Zvcm0vY29uZmlndXJhdG9yLWZvcm0uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFM0UsT0FBTyxFQUNMLGtCQUFrQixHQUVuQixNQUFNLHdDQUF3QyxDQUFDO0FBRWhELE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBU25FLE1BQU0sT0FBTyx5QkFBeUI7SUEwQnBDLFlBQ1ksMEJBQXNELEVBQ3RELHlCQUFvRCxFQUNwRCw0QkFBZ0UsRUFDaEUsZUFBZ0MsRUFDaEMsV0FBK0M7UUFKL0MsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtRQUN0RCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBQ3BELGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBb0M7UUFDaEUsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLGdCQUFXLEdBQVgsV0FBVyxDQUFvQztRQTlCM0QsbUJBQWMsR0FDWixJQUFJLENBQUMsNEJBQTRCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQ3hELE1BQU0sQ0FDSixDQUFDLFVBQVUsRUFBRSxFQUFFLENBQ2IsVUFBVSxDQUFDLFFBQVEsS0FBSyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUNwRSxFQUNELFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLHdCQUF3QixDQUM3RCxVQUFVLENBQUMsS0FBSyxDQUNqQixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUNKLGtCQUFhLEdBQ1gsSUFBSSxDQUFDLDRCQUE0QjthQUM5QixpQkFBaUIsRUFBRTthQUNuQixJQUFJLENBQ0gsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FDdkIsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQ2pFLENBQ0YsQ0FBQztRQUVOLG9CQUFlLEdBQXVCLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFdkUsV0FBTSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7SUFRMUIsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsNEJBQTRCO2FBQzlCLGlCQUFpQixFQUFFO2FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDYixTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN6Qiw2RUFBNkU7WUFDN0UseUZBQXlGO1lBQ3pGLElBQUksV0FBVyxDQUFDLGFBQWEsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLDBCQUEwQjtxQkFDNUIsWUFBWSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7cUJBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ2IsU0FBUyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7b0JBQzFCLElBQUksWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRTt3QkFDOUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLHdCQUF3QixDQUNyRCxXQUFXLENBQUMsS0FBSyxDQUNsQixDQUFDO3dCQUVGLDRGQUE0RjtxQkFDN0Y7eUJBQU07d0JBQ0wsSUFBSSxDQUFDLHlCQUF5QixDQUFDLDhCQUE4QixDQUMzRCxXQUFXLENBQUMsS0FBSyxDQUNsQixDQUFDO3FCQUNIO2dCQUNILENBQUMsQ0FBQyxDQUFDO2FBQ047UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxLQUE0QjtRQUM5QyxJQUFJLENBQUMsMEJBQTBCLENBQUMsbUJBQW1CLENBQ2pELEtBQUssQ0FBQyxRQUFRLEVBQ2QsS0FBSyxDQUFDLGdCQUFnQixFQUN0QixLQUFLLENBQUMsVUFBVSxDQUNqQixDQUFDO0lBQ0osQ0FBQztJQUVELG1CQUFtQixDQUFDLFNBQWlDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGFBQWEsQ0FBQyxPQUFnQjtRQUM1QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELENBQUM7O3NIQWxGVSx5QkFBeUI7MEdBQXpCLHlCQUF5Qiw0REN6QnRDLHFsUUE2TEE7MkZEcEthLHlCQUF5QjtrQkFMckMsU0FBUzsrQkFDRSxzQkFBc0IsbUJBRWYsdUJBQXVCLENBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIyIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7XG4gIENvbmZpZ3VyYXRvclJvdXRlcixcbiAgQ29uZmlndXJhdG9yUm91dGVyRXh0cmFjdG9yU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9wcm9kdWN0LWNvbmZpZ3VyYXRvci9jb21tb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBzd2l0Y2hNYXAsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDb25maWd1cmF0b3JDb21tb25zU2VydmljZSB9IGZyb20gJy4uLy4uL2NvcmUvZmFjYWRlL2NvbmZpZ3VyYXRvci1jb21tb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29uZmlndXJhdG9yR3JvdXBzU2VydmljZSB9IGZyb20gJy4uLy4uL2NvcmUvZmFjYWRlL2NvbmZpZ3VyYXRvci1ncm91cHMuc2VydmljZSc7XG5pbXBvcnQgeyBDb25maWd1cmF0b3IgfSBmcm9tICcuLi8uLi9jb3JlL21vZGVsL2NvbmZpZ3VyYXRvci5tb2RlbCc7XG5pbXBvcnQgeyBDb25maWd1cmF0b3JTdG9yZWZyb250VXRpbHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9jb25maWd1cmF0b3Itc3RvcmVmcm9udC11dGlscy5zZXJ2aWNlJztcbmltcG9ydCB7IENvbmZpZ0Zvcm1VcGRhdGVFdmVudCB9IGZyb20gJy4vY29uZmlndXJhdG9yLWZvcm0uZXZlbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1jb25maWd1cmF0b3ItZm9ybScsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb25maWd1cmF0b3ItZm9ybS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0b3JGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgY29uZmlndXJhdGlvbiQ6IE9ic2VydmFibGU8Q29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24+ID1cbiAgICB0aGlzLmNvbmZpZ1JvdXRlckV4dHJhY3RvclNlcnZpY2UuZXh0cmFjdFJvdXRlckRhdGEoKS5waXBlKFxuICAgICAgZmlsdGVyKFxuICAgICAgICAocm91dGVyRGF0YSkgPT5cbiAgICAgICAgICByb3V0ZXJEYXRhLnBhZ2VUeXBlID09PSBDb25maWd1cmF0b3JSb3V0ZXIuUGFnZVR5cGUuQ09ORklHVVJBVElPTlxuICAgICAgKSxcbiAgICAgIHN3aXRjaE1hcCgocm91dGVyRGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0b3JDb21tb25zU2VydmljZS5nZXRPckNyZWF0ZUNvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgcm91dGVyRGF0YS5vd25lclxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuICBjdXJyZW50R3JvdXAkOiBPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5Hcm91cD4gPVxuICAgIHRoaXMuY29uZmlnUm91dGVyRXh0cmFjdG9yU2VydmljZVxuICAgICAgLmV4dHJhY3RSb3V0ZXJEYXRhKClcbiAgICAgIC5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoKHJvdXRlckRhdGEpID0+XG4gICAgICAgICAgdGhpcy5jb25maWd1cmF0b3JHcm91cHNTZXJ2aWNlLmdldEN1cnJlbnRHcm91cChyb3V0ZXJEYXRhLm93bmVyKVxuICAgICAgICApXG4gICAgICApO1xuXG4gIGFjdGl2ZUxhbmd1YWdlJDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gdGhpcy5sYW5ndWFnZVNlcnZpY2UuZ2V0QWN0aXZlKCk7XG5cbiAgdWlUeXBlID0gQ29uZmlndXJhdG9yLlVpVHlwZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgY29uZmlndXJhdG9yQ29tbW9uc1NlcnZpY2U6IENvbmZpZ3VyYXRvckNvbW1vbnNTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBjb25maWd1cmF0b3JHcm91cHNTZXJ2aWNlOiBDb25maWd1cmF0b3JHcm91cHNTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBjb25maWdSb3V0ZXJFeHRyYWN0b3JTZXJ2aWNlOiBDb25maWd1cmF0b3JSb3V0ZXJFeHRyYWN0b3JTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBsYW5ndWFnZVNlcnZpY2U6IExhbmd1YWdlU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY29uZmlnVXRpbHM6IENvbmZpZ3VyYXRvclN0b3JlZnJvbnRVdGlsc1NlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY29uZmlnUm91dGVyRXh0cmFjdG9yU2VydmljZVxuICAgICAgLmV4dHJhY3RSb3V0ZXJEYXRhKClcbiAgICAgIC5waXBlKHRha2UoMSkpXG4gICAgICAuc3Vic2NyaWJlKChyb3V0aW5nRGF0YSkgPT4ge1xuICAgICAgICAvL0luIGNhc2Ugb2YgcmVzb2x2aW5nIGlzc3VlcywgY2hlY2sgaWYgdGhlIGNvbmZpZ3VyYXRpb24gY29udGFpbnMgY29uZmxpY3RzLFxuICAgICAgICAvL2lmIG5vdCwgY2hlY2sgaWYgdGhlIGNvbmZpZ3VyYXRpb24gY29udGFpbnMgbWlzc2luZyBtYW5kYXRvcnkgZmllbGRzIGFuZCBzaG93IHRoZSBncm91cFxuICAgICAgICBpZiAocm91dGluZ0RhdGEucmVzb2x2ZUlzc3Vlcykge1xuICAgICAgICAgIHRoaXMuY29uZmlndXJhdG9yQ29tbW9uc1NlcnZpY2VcbiAgICAgICAgICAgIC5oYXNDb25mbGljdHMocm91dGluZ0RhdGEub3duZXIpXG4gICAgICAgICAgICAucGlwZSh0YWtlKDEpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoaGFzQ29uZmxpY3RzKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChoYXNDb25mbGljdHMgJiYgIXJvdXRpbmdEYXRhLnNraXBDb25mbGljdHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRvckdyb3Vwc1NlcnZpY2UubmF2aWdhdGVUb0NvbmZsaWN0U29sdmVyKFxuICAgICAgICAgICAgICAgICAgcm91dGluZ0RhdGEub3duZXJcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgLy9Pbmx5IGNoZWNrIGZvciBJbmNvbXBsZXRlIGdyb3VwIHdoZW4gdGhlcmUgYXJlIG5vIGNvbmZsaWN0cyBvciBjb25mbGljdHMgc2hvdWxkIGJlIHNraXBwZWRcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRvckdyb3Vwc1NlcnZpY2UubmF2aWdhdGVUb0ZpcnN0SW5jb21wbGV0ZUdyb3VwKFxuICAgICAgICAgICAgICAgICAgcm91dGluZ0RhdGEub3duZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICB1cGRhdGVDb25maWd1cmF0aW9uKGV2ZW50OiBDb25maWdGb3JtVXBkYXRlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmNvbmZpZ3VyYXRvckNvbW1vbnNTZXJ2aWNlLnVwZGF0ZUNvbmZpZ3VyYXRpb24oXG4gICAgICBldmVudC5vd25lcktleSxcbiAgICAgIGV2ZW50LmNoYW5nZWRBdHRyaWJ1dGUsXG4gICAgICBldmVudC51cGRhdGVUeXBlXG4gICAgKTtcbiAgfVxuXG4gIGlzQ29uZmxpY3RHcm91cFR5cGUoZ3JvdXBUeXBlOiBDb25maWd1cmF0b3IuR3JvdXBUeXBlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdG9yR3JvdXBzU2VydmljZS5pc0NvbmZsaWN0R3JvdXBUeXBlKGdyb3VwVHlwZSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgZ3JvdXAgSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBncm91cElkIC0gZ3JvdXAgSURcbiAgICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH0gLSBnZW5lcmF0ZWQgZ3JvdXAgSURcbiAgICovXG4gIGNyZWF0ZUdyb3VwSWQoZ3JvdXBJZD86IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnVXRpbHMuY3JlYXRlR3JvdXBJZChncm91cElkKTtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbmZpZ3VyYXRpb24kIHwgYXN5bmMgYXMgY29uZmlndXJhdGlvbjsgZWxzZSBnaG9zdEZvcm1cIj5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImN1cnJlbnRHcm91cCQgfCBhc3luYyBhcyBjdXJyZW50R3JvdXBcIj5cbiAgICA8ZGl2IGlkPVwie3sgY3JlYXRlR3JvdXBJZChjdXJyZW50R3JvdXAuaWQpIH19XCIgcm9sZT1cInRhYnBhbmVsXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaXNDb25mbGljdEdyb3VwVHlwZShjdXJyZW50R3JvdXAuZ3JvdXBUeXBlKVwiPlxuICAgICAgICA8Y3gtY29uZmlndXJhdG9yLWNvbmZsaWN0LWRlc2NyaXB0aW9uXG4gICAgICAgICAgW2N1cnJlbnRHcm91cF09XCJjdXJyZW50R3JvdXBcIlxuICAgICAgICA+PC9jeC1jb25maWd1cmF0b3ItY29uZmxpY3QtZGVzY3JpcHRpb24+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJjeC1ncm91cC1hdHRyaWJ1dGVcIlxuICAgICAgICAqbmdGb3I9XCJcbiAgICAgICAgICBsZXQgYXR0cmlidXRlIG9mIGN1cnJlbnRHcm91cC5hdHRyaWJ1dGVzO1xuICAgICAgICAgIGxldCBpbmRleE9mQXR0cmlidXRlID0gaW5kZXhcbiAgICAgICAgXCJcbiAgICAgID5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImFjdGl2ZUxhbmd1YWdlJCB8IGFzeW5jIGFzIGFjdGl2ZUxhbmd1YWdlXCI+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImlzQ29uZmxpY3RHcm91cFR5cGUoY3VycmVudEdyb3VwLmdyb3VwVHlwZSlcIj5cbiAgICAgICAgICAgIDxjeC1jb25maWd1cmF0b3ItY29uZmxpY3Qtc3VnZ2VzdGlvblxuICAgICAgICAgICAgICBbY3VycmVudEdyb3VwXT1cImN1cnJlbnRHcm91cFwiXG4gICAgICAgICAgICAgIFthdHRyaWJ1dGVdPVwiYXR0cmlidXRlXCJcbiAgICAgICAgICAgICAgW3N1Z2dlc3Rpb25OdW1iZXJdPVwiaW5kZXhPZkF0dHJpYnV0ZVwiXG4gICAgICAgICAgICA+PC9jeC1jb25maWd1cmF0b3ItY29uZmxpY3Qtc3VnZ2VzdGlvbj5cbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICA8Y3gtY29uZmlndXJhdG9yLWF0dHJpYnV0ZS1oZWFkZXJcbiAgICAgICAgICAgIFthdHRyaWJ1dGVdPVwiYXR0cmlidXRlXCJcbiAgICAgICAgICAgIFtvd25lcl09XCJjb25maWd1cmF0aW9uLm93bmVyXCJcbiAgICAgICAgICAgIFtncm91cElkXT1cImN1cnJlbnRHcm91cC5pZFwiXG4gICAgICAgICAgICBbZ3JvdXBUeXBlXT1cImN1cnJlbnRHcm91cC5ncm91cFR5cGVcIlxuICAgICAgICAgID5cbiAgICAgICAgICA8L2N4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtaGVhZGVyPlxuICAgICAgICAgIDwhLS0gU2luZ2xlIFNlbGVjdGlvbiBSYWRpbyBCdXR0b24gLS0+XG4gICAgICAgICAgPGN4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtcmFkaW8tYnV0dG9uXG4gICAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgICBhdHRyaWJ1dGUudWlUeXBlID09PSB1aVR5cGUuUkFESU9CVVRUT04gfHxcbiAgICAgICAgICAgICAgYXR0cmlidXRlLnVpVHlwZSA9PT0gdWlUeXBlLlJBRElPQlVUVE9OX0FERElUSU9OQUxfSU5QVVRcbiAgICAgICAgICAgIFwiXG4gICAgICAgICAgICBbYXR0cmlidXRlXT1cImF0dHJpYnV0ZVwiXG4gICAgICAgICAgICBbb3duZXJLZXldPVwiY29uZmlndXJhdGlvbi5vd25lci5rZXlcIlxuICAgICAgICAgICAgW293bmVyVHlwZV09XCJjb25maWd1cmF0aW9uLm93bmVyLnR5cGVcIlxuICAgICAgICAgICAgW2xhbmd1YWdlXT1cImFjdGl2ZUxhbmd1YWdlXCJcbiAgICAgICAgICAgIChzZWxlY3Rpb25DaGFuZ2UpPVwidXBkYXRlQ29uZmlndXJhdGlvbigkZXZlbnQpXCJcbiAgICAgICAgICA+PC9jeC1jb25maWd1cmF0b3ItYXR0cmlidXRlLXJhZGlvLWJ1dHRvbj5cblxuICAgICAgICAgIDwhLS0gU2luZ2xlIFNlbGVjdGlvbiBQcm9kdWN0IEJ1bmRsZSAtLT5cbiAgICAgICAgICA8Y3gtY29uZmlndXJhdG9yLWF0dHJpYnV0ZS1zaW5nbGUtc2VsZWN0aW9uLWJ1bmRsZVxuICAgICAgICAgICAgKHNlbGVjdGlvbkNoYW5nZSk9XCJ1cGRhdGVDb25maWd1cmF0aW9uKCRldmVudClcIlxuICAgICAgICAgICAgW2F0dHJpYnV0ZV09XCJhdHRyaWJ1dGVcIlxuICAgICAgICAgICAgW293bmVyS2V5XT1cImNvbmZpZ3VyYXRpb24ub3duZXIua2V5XCJcbiAgICAgICAgICAgICpuZ0lmPVwiYXR0cmlidXRlLnVpVHlwZSA9PT0gdWlUeXBlLlJBRElPQlVUVE9OX1BST0RVQ1RcIlxuICAgICAgICAgID48L2N4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtc2luZ2xlLXNlbGVjdGlvbi1idW5kbGU+XG5cbiAgICAgICAgICA8IS0tIE11bHRpIFNlbGVjdGlvbiBQcm9kdWN0IEJ1bmRsZSAtLT5cbiAgICAgICAgICA8Y3gtY29uZmlndXJhdG9yLWF0dHJpYnV0ZS1tdWx0aS1zZWxlY3Rpb24tYnVuZGxlXG4gICAgICAgICAgICAoc2VsZWN0aW9uQ2hhbmdlKT1cInVwZGF0ZUNvbmZpZ3VyYXRpb24oJGV2ZW50KVwiXG4gICAgICAgICAgICBbYXR0cmlidXRlXT1cImF0dHJpYnV0ZVwiXG4gICAgICAgICAgICBbb3duZXJLZXldPVwiY29uZmlndXJhdGlvbi5vd25lci5rZXlcIlxuICAgICAgICAgICAgKm5nSWY9XCJhdHRyaWJ1dGUudWlUeXBlID09PSB1aVR5cGUuQ0hFQ0tCT1hMSVNUX1BST0RVQ1RcIlxuICAgICAgICAgID48L2N4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtbXVsdGktc2VsZWN0aW9uLWJ1bmRsZT5cblxuICAgICAgICAgIDwhLS0gU2luZ2xlIFNlbGVjdGlvbiBEcm9wZG93biBQcm9kdWN0IEJ1bmRsZSAtLT5cbiAgICAgICAgICA8Y3gtY29uZmlndXJhdG9yLWF0dHJpYnV0ZS1zaW5nbGUtc2VsZWN0aW9uLWJ1bmRsZS1kcm9wZG93blxuICAgICAgICAgICAgKm5nSWY9XCJhdHRyaWJ1dGUudWlUeXBlID09PSB1aVR5cGUuRFJPUERPV05fUFJPRFVDVFwiXG4gICAgICAgICAgICBbYXR0cmlidXRlXT1cImF0dHJpYnV0ZVwiXG4gICAgICAgICAgICBbZ3JvdXBdPVwiY3VycmVudEdyb3VwLmlkXCJcbiAgICAgICAgICAgIFtvd25lcktleV09XCJjb25maWd1cmF0aW9uLm93bmVyLmtleVwiXG4gICAgICAgICAgICAoc2VsZWN0aW9uQ2hhbmdlKT1cInVwZGF0ZUNvbmZpZ3VyYXRpb24oJGV2ZW50KVwiXG4gICAgICAgICAgPjwvY3gtY29uZmlndXJhdG9yLWF0dHJpYnV0ZS1zaW5nbGUtc2VsZWN0aW9uLWJ1bmRsZS1kcm9wZG93bj5cblxuICAgICAgICAgIDwhLS0gU2luZ2xlIFNlbGVjdGlvbiBEcm9wZG93biAtLT5cbiAgICAgICAgICA8Y3gtY29uZmlndXJhdG9yLWF0dHJpYnV0ZS1kcm9wLWRvd25cbiAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZS51aVR5cGUgPT09IHVpVHlwZS5EUk9QRE9XTiB8fFxuICAgICAgICAgICAgICBhdHRyaWJ1dGUudWlUeXBlID09PSB1aVR5cGUuRFJPUERPV05fQURESVRJT05BTF9JTlBVVFxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIFthdHRyaWJ1dGVdPVwiYXR0cmlidXRlXCJcbiAgICAgICAgICAgIFtncm91cF09XCJjdXJyZW50R3JvdXAuaWRcIlxuICAgICAgICAgICAgW293bmVyS2V5XT1cImNvbmZpZ3VyYXRpb24ub3duZXIua2V5XCJcbiAgICAgICAgICAgIFtvd25lclR5cGVdPVwiY29uZmlndXJhdGlvbi5vd25lci50eXBlXCJcbiAgICAgICAgICAgIFtsYW5ndWFnZV09XCJhY3RpdmVMYW5ndWFnZVwiXG4gICAgICAgICAgICAoc2VsZWN0aW9uQ2hhbmdlKT1cInVwZGF0ZUNvbmZpZ3VyYXRpb24oJGV2ZW50KVwiXG4gICAgICAgICAgPjwvY3gtY29uZmlndXJhdG9yLWF0dHJpYnV0ZS1kcm9wLWRvd24+XG4gICAgICAgICAgPGN4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtaW5wdXQtZmllbGRcbiAgICAgICAgICAgICpuZ0lmPVwiYXR0cmlidXRlLnVpVHlwZSA9PT0gdWlUeXBlLlNUUklOR1wiXG4gICAgICAgICAgICBbYXR0cmlidXRlXT1cImF0dHJpYnV0ZVwiXG4gICAgICAgICAgICBbZ3JvdXBdPVwiY3VycmVudEdyb3VwLmlkXCJcbiAgICAgICAgICAgIFtvd25lclR5cGVdPVwiY29uZmlndXJhdGlvbi5vd25lci50eXBlXCJcbiAgICAgICAgICAgIFtvd25lcktleV09XCJjb25maWd1cmF0aW9uLm93bmVyLmtleVwiXG4gICAgICAgICAgICAoaW5wdXRDaGFuZ2UpPVwidXBkYXRlQ29uZmlndXJhdGlvbigkZXZlbnQpXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgPC9jeC1jb25maWd1cmF0b3ItYXR0cmlidXRlLWlucHV0LWZpZWxkPlxuXG4gICAgICAgICAgPGN4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtbnVtZXJpYy1pbnB1dC1maWVsZFxuICAgICAgICAgICAgKm5nSWY9XCJhdHRyaWJ1dGUudWlUeXBlID09PSB1aVR5cGUuTlVNRVJJQ1wiXG4gICAgICAgICAgICBbYXR0cmlidXRlXT1cImF0dHJpYnV0ZVwiXG4gICAgICAgICAgICBbZ3JvdXBdPVwiY3VycmVudEdyb3VwLmlkXCJcbiAgICAgICAgICAgIFtvd25lclR5cGVdPVwiY29uZmlndXJhdGlvbi5vd25lci50eXBlXCJcbiAgICAgICAgICAgIFtvd25lcktleV09XCJjb25maWd1cmF0aW9uLm93bmVyLmtleVwiXG4gICAgICAgICAgICBbbGFuZ3VhZ2VdPVwiYWN0aXZlTGFuZ3VhZ2VcIlxuICAgICAgICAgICAgKGlucHV0Q2hhbmdlKT1cInVwZGF0ZUNvbmZpZ3VyYXRpb24oJGV2ZW50KVwiXG4gICAgICAgICAgPjwvY3gtY29uZmlndXJhdG9yLWF0dHJpYnV0ZS1udW1lcmljLWlucHV0LWZpZWxkPlxuXG4gICAgICAgICAgPCEtLSBNdWx0aSBTZWxlY3Rpb24gQ2hlY2tib3ggLS0+XG4gICAgICAgICAgPGN4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtY2hlY2tib3gtbGlzdFxuICAgICAgICAgICAgKm5nSWY9XCJhdHRyaWJ1dGUudWlUeXBlID09PSB1aVR5cGUuQ0hFQ0tCT1hMSVNUXCJcbiAgICAgICAgICAgIFthdHRyaWJ1dGVdPVwiYXR0cmlidXRlXCJcbiAgICAgICAgICAgIFtncm91cF09XCJjdXJyZW50R3JvdXAuaWRcIlxuICAgICAgICAgICAgW293bmVyS2V5XT1cImNvbmZpZ3VyYXRpb24ub3duZXIua2V5XCJcbiAgICAgICAgICAgIChzZWxlY3Rpb25DaGFuZ2UpPVwidXBkYXRlQ29uZmlndXJhdGlvbigkZXZlbnQpXCJcbiAgICAgICAgICA+PC9jeC1jb25maWd1cmF0b3ItYXR0cmlidXRlLWNoZWNrYm94LWxpc3Q+XG4gICAgICAgICAgPGN4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtY2hlY2tib3hcbiAgICAgICAgICAgICpuZ0lmPVwiYXR0cmlidXRlLnVpVHlwZSA9PT0gdWlUeXBlLkNIRUNLQk9YXCJcbiAgICAgICAgICAgIFthdHRyaWJ1dGVdPVwiYXR0cmlidXRlXCJcbiAgICAgICAgICAgIFtncm91cF09XCJjdXJyZW50R3JvdXAuaWRcIlxuICAgICAgICAgICAgW293bmVyS2V5XT1cImNvbmZpZ3VyYXRpb24ub3duZXIua2V5XCJcbiAgICAgICAgICAgIChzZWxlY3Rpb25DaGFuZ2UpPVwidXBkYXRlQ29uZmlndXJhdGlvbigkZXZlbnQpXCJcbiAgICAgICAgICA+PC9jeC1jb25maWd1cmF0b3ItYXR0cmlidXRlLWNoZWNrYm94PlxuICAgICAgICAgIDxjeC1jb25maWd1cmF0b3ItYXR0cmlidXRlLXJlYWQtb25seVxuICAgICAgICAgICAgKm5nSWY9XCJhdHRyaWJ1dGUudWlUeXBlID09PSB1aVR5cGUuUkVBRF9PTkxZXCJcbiAgICAgICAgICAgIFthdHRyaWJ1dGVdPVwiYXR0cmlidXRlXCJcbiAgICAgICAgICAgIFtncm91cF09XCJjdXJyZW50R3JvdXAuaWRcIlxuICAgICAgICAgID48L2N4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtcmVhZC1vbmx5PlxuICAgICAgICAgIDxjeC1jb25maWd1cmF0b3ItYXR0cmlidXRlLW11bHRpLXNlbGVjdGlvbi1pbWFnZVxuICAgICAgICAgICAgKm5nSWY9XCJhdHRyaWJ1dGUudWlUeXBlID09PSB1aVR5cGUuTVVMVElfU0VMRUNUSU9OX0lNQUdFXCJcbiAgICAgICAgICAgIFthdHRyaWJ1dGVdPVwiYXR0cmlidXRlXCJcbiAgICAgICAgICAgIFtvd25lcktleV09XCJjb25maWd1cmF0aW9uLm93bmVyLmtleVwiXG4gICAgICAgICAgICAoc2VsZWN0aW9uQ2hhbmdlKT1cInVwZGF0ZUNvbmZpZ3VyYXRpb24oJGV2ZW50KVwiXG4gICAgICAgICAgPjwvY3gtY29uZmlndXJhdG9yLWF0dHJpYnV0ZS1tdWx0aS1zZWxlY3Rpb24taW1hZ2U+XG4gICAgICAgICAgPGN4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtc2luZ2xlLXNlbGVjdGlvbi1pbWFnZVxuICAgICAgICAgICAgKm5nSWY9XCJhdHRyaWJ1dGUudWlUeXBlID09PSB1aVR5cGUuU0lOR0xFX1NFTEVDVElPTl9JTUFHRVwiXG4gICAgICAgICAgICBbYXR0cmlidXRlXT1cImF0dHJpYnV0ZVwiXG4gICAgICAgICAgICBbb3duZXJLZXldPVwiY29uZmlndXJhdGlvbi5vd25lci5rZXlcIlxuICAgICAgICAgICAgKHNlbGVjdGlvbkNoYW5nZSk9XCJ1cGRhdGVDb25maWd1cmF0aW9uKCRldmVudClcIlxuICAgICAgICAgID48L2N4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtc2luZ2xlLXNlbGVjdGlvbi1pbWFnZT5cblxuICAgICAgICAgIDxlbSAqbmdJZj1cImF0dHJpYnV0ZS51aVR5cGUgPT09IHVpVHlwZS5OT1RfSU1QTEVNRU5URURcIj57e1xuICAgICAgICAgICAgJ2NvbmZpZ3VyYXRvci5hdHRyaWJ1dGUubm90U3VwcG9ydGVkJyB8IGN4VHJhbnNsYXRlXG4gICAgICAgICAgfX08L2VtPlxuXG4gICAgICAgICAgPGN4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtZm9vdGVyXG4gICAgICAgICAgICBbYXR0cmlidXRlXT1cImF0dHJpYnV0ZVwiXG4gICAgICAgICAgICBbb3duZXJdPVwiY29uZmlndXJhdGlvbi5vd25lclwiXG4gICAgICAgICAgICBbZ3JvdXBJZF09XCJjdXJyZW50R3JvdXAuaWRcIlxuICAgICAgICAgID48L2N4LWNvbmZpZ3VyYXRvci1hdHRyaWJ1dGUtZm9vdGVyPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L25nLWNvbnRhaW5lcj5cbjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgI2dob3N0Rm9ybT5cbiAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgbnVtYmVyIG9mIFswLCAxLCAyXVwiPlxuICAgIDxkaXYgY2xhc3M9XCJjeC1naG9zdC1hdHRyaWJ1dGVcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjeC1naG9zdC1oZWFkZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImN4LWdob3N0LXRpdGxlIGdob3N0XCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjeC1naG9zdC1pY29uIGdob3N0XCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjeC1naG9zdC1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjeC1naG9zdC10ZXh0IGdob3N0XCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjeC1naG9zdC1wcmljZSBnaG9zdFwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiY3gtZ2hvc3QtYXR0cmlidXRlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY3gtZ2hvc3QtaGVhZGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjeC1naG9zdC10aXRsZSBnaG9zdFwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY3gtZ2hvc3QtaWNvbiBnaG9zdFwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY3gtZ2hvc3QtZGVzY3JpcHRpb24tYm94XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImN4LWdob3N0LWRlc2NyaXB0aW9uIGdob3N0XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY3gtZ2hvc3QtYm9keVwiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgKm5nRm9yPVwibGV0IG51bWJlciBvZiBbMCwgMSwgMl07IGxldCBpID0gaW5kZXhcIlxuICAgICAgICAgIGNsYXNzPVwiY3gtZ2hvc3QtcmFkaW9idXR0b24tdmFsdWVcIlxuICAgICAgICA+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImN4LWdob3N0LXZhbHVlLWxhYmVsLXBhaXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjeC1naG9zdC12YWx1ZS1pY29uIGdob3N0XCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3gtZ2hvc3QtbGFiZWwgZ2hvc3RcIj48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3gtZ2hvc3QtdmFsdWUtcHJpY2UgZ2hvc3RcIj5cbiAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpICE9PSAwXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjeC1naG9zdC1wcmljZVwiPjwvZGl2PlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvbmctY29udGFpbmVyPlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==