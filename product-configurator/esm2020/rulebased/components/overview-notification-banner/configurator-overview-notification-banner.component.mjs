/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { CommonConfigurator, } from '@spartacus/product-configurator/common';
import { ICON_TYPE } from '@spartacus/storefront';
import { filter, map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-commons.service";
import * as i2 from "@spartacus/product-configurator/common";
import * as i3 from "@angular/common";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@angular/router";
import * as i6 from "@spartacus/core";
export class ConfiguratorOverviewNotificationBannerComponent {
    constructor(configuratorCommonsService, configRouterExtractorService, commonConfigUtilsService) {
        this.configuratorCommonsService = configuratorCommonsService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.commonConfigUtilsService = commonConfigUtilsService;
        this.routerData$ = this.configRouterExtractorService.extractRouterData();
        this.configuration$ = this.routerData$.pipe(filter((routerData) => routerData.owner.type === CommonConfigurator.OwnerType.PRODUCT ||
            routerData.owner.type === CommonConfigurator.OwnerType.CART_ENTRY), switchMap((routerData) => this.configuratorCommonsService.getConfiguration(routerData.owner)));
        this.configurationOverview$ = this.configuration$.pipe(map((configuration) => configuration.overview));
        this.numberOfIssues$ = this.configuration$.pipe(map((configuration) => {
            //In case overview carries number of issues: We take it from there.
            //otherwise configuration's number will be accurate
            let configOv = configuration.overview;
            if (configOv?.totalNumberOfIssues) {
                return configOv.numberOfIncompleteCharacteristics !== undefined
                    ? configOv.numberOfIncompleteCharacteristics
                    : configOv.totalNumberOfIssues;
            }
            else {
                return configuration.totalNumberOfIssues
                    ? configuration.totalNumberOfIssues
                    : 0;
            }
        }));
        this.numberOfConflicts$ = this.configuration$.pipe(map((configuration) => {
            return configuration.overview?.numberOfConflicts ?? 0;
        }));
        this.skipConflictsOnIssueNavigation$ = this.configuration$.pipe(map((configuration) => {
            return (configuration.overview?.numberOfConflicts ?? 0) > 0;
        }));
        this.iconTypes = ICON_TYPE;
    }
}
ConfiguratorOverviewNotificationBannerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorOverviewNotificationBannerComponent, deps: [{ token: i1.ConfiguratorCommonsService }, { token: i2.ConfiguratorRouterExtractorService }, { token: i2.CommonConfiguratorUtilsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorOverviewNotificationBannerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: ConfiguratorOverviewNotificationBannerComponent, selector: "cx-configurator-overview-notification-banner", ngImport: i0, template: "<ng-container *ngIf=\"routerData$ | async as routerData\">\n  <ng-container *ngIf=\"configurationOverview$ | async\">\n    <div\n      class=\"cx-error-notification-banner\"\n      *ngIf=\"numberOfIssues$ | async as numberOfIssues\"\n    >\n      <cx-icon [type]=\"iconTypes.ERROR\"></cx-icon>\n      <div class=\"cx-error-msg\" id=\"cx-configurator-overview-error-msg\">\n        {{\n          'configurator.notificationBanner.numberOfIssues'\n            | cxTranslate: { count: numberOfIssues }\n        }}\n        <button\n          class=\"link cx-action-link\"\n          aria-describedby=\"cx-configurator-overview-error-msg\"\n          [routerLink]=\"\n            {\n              cxRoute: 'configure' + routerData.owner.configuratorType,\n              params: {\n                entityKey: routerData.owner.id,\n                ownerType: routerData.owner.type\n              }\n            } | cxUrl\n          \"\n          [queryParams]=\"{\n            resolveIssues: true,\n            skipConflicts: skipConflictsOnIssueNavigation$ | async\n          }\"\n          cxAutoFocus\n        >\n          {{ 'configurator.header.resolveIssues' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n    <div\n      class=\"cx-conflict-notification-banner\"\n      *ngIf=\"numberOfConflicts$ | async as numberOfConflicts\"\n    >\n      <cx-icon [type]=\"iconTypes.WARNING\"></cx-icon>\n      <div class=\"cx-conflict-msg\" id=\"cx-configurator-overview-conflict-msg\">\n        {{\n          'configurator.notificationBanner.numberOfConflicts'\n            | cxTranslate: { count: numberOfConflicts }\n        }}\n        <button\n          class=\"link cx-action-link\"\n          aria-describedby=\"cx-configurator-overview-conflict-msg\"\n          [routerLink]=\"\n            {\n              cxRoute: 'configure' + routerData.owner.configuratorType,\n              params: {\n                entityKey: routerData.owner.id,\n                ownerType: routerData.owner.type\n              }\n            } | cxUrl\n          \"\n          [queryParams]=\"{ resolveIssues: true }\"\n          cxAutoFocus\n        >\n          {{ 'configurator.header.resolveConflicts' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i5.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TranslatePipe, name: "cxTranslate" }, { kind: "pipe", type: i6.UrlPipe, name: "cxUrl" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorOverviewNotificationBannerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-overview-notification-banner', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"routerData$ | async as routerData\">\n  <ng-container *ngIf=\"configurationOverview$ | async\">\n    <div\n      class=\"cx-error-notification-banner\"\n      *ngIf=\"numberOfIssues$ | async as numberOfIssues\"\n    >\n      <cx-icon [type]=\"iconTypes.ERROR\"></cx-icon>\n      <div class=\"cx-error-msg\" id=\"cx-configurator-overview-error-msg\">\n        {{\n          'configurator.notificationBanner.numberOfIssues'\n            | cxTranslate: { count: numberOfIssues }\n        }}\n        <button\n          class=\"link cx-action-link\"\n          aria-describedby=\"cx-configurator-overview-error-msg\"\n          [routerLink]=\"\n            {\n              cxRoute: 'configure' + routerData.owner.configuratorType,\n              params: {\n                entityKey: routerData.owner.id,\n                ownerType: routerData.owner.type\n              }\n            } | cxUrl\n          \"\n          [queryParams]=\"{\n            resolveIssues: true,\n            skipConflicts: skipConflictsOnIssueNavigation$ | async\n          }\"\n          cxAutoFocus\n        >\n          {{ 'configurator.header.resolveIssues' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n    <div\n      class=\"cx-conflict-notification-banner\"\n      *ngIf=\"numberOfConflicts$ | async as numberOfConflicts\"\n    >\n      <cx-icon [type]=\"iconTypes.WARNING\"></cx-icon>\n      <div class=\"cx-conflict-msg\" id=\"cx-configurator-overview-conflict-msg\">\n        {{\n          'configurator.notificationBanner.numberOfConflicts'\n            | cxTranslate: { count: numberOfConflicts }\n        }}\n        <button\n          class=\"link cx-action-link\"\n          aria-describedby=\"cx-configurator-overview-conflict-msg\"\n          [routerLink]=\"\n            {\n              cxRoute: 'configure' + routerData.owner.configuratorType,\n              params: {\n                entityKey: routerData.owner.id,\n                ownerType: routerData.owner.type\n              }\n            } | cxUrl\n          \"\n          [queryParams]=\"{ resolveIssues: true }\"\n          cxAutoFocus\n        >\n          {{ 'configurator.header.resolveConflicts' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorCommonsService }, { type: i2.ConfiguratorRouterExtractorService }, { type: i2.CommonConfiguratorUtilsService }]; } });
//# sourceMappingURL=data:application/json;base64,