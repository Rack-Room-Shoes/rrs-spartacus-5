/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { ConfiguratorAttributeBaseComponent } from '../base/configurator-attribute-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
import * as i4 from "../../../price/configurator-price.component";
import * as i5 from "@spartacus/core";
export class ConfiguratorAttributeSingleSelectionImageComponent extends ConfiguratorAttributeBaseComponent {
    constructor() {
        super(...arguments);
        this.attributeRadioButtonForm = new UntypedFormControl('');
        this.selectionChange = new EventEmitter();
    }
    ngOnInit() {
        this.attributeRadioButtonForm.setValue(this.attribute.selectedSingleValue);
    }
    /**
     * Submits a value.
     *
     * @param {string} value - Selected value
     */
    onClick(value) {
        const event = {
            ownerKey: this.ownerKey,
            changedAttribute: {
                ...this.attribute,
                selectedSingleValue: value,
            },
        };
        this.selectionChange.emit(event);
    }
    extractValuePriceFormulaParameters(value) {
        if (value) {
            return {
                price: value.valuePrice,
                isLightedUp: value.selected,
            };
        }
    }
}
ConfiguratorAttributeSingleSelectionImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorAttributeSingleSelectionImageComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeSingleSelectionImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: ConfiguratorAttributeSingleSelectionImageComponent, selector: "cx-configurator-attribute-single-selection-image", inputs: { attribute: "attribute", ownerKey: "ownerKey" }, outputs: { selectionChange: "selectionChange" }, usesInheritance: true, ngImport: i0, template: "<div\n  id=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n  class=\"cx-row\"\n  role=\"radiogroup\"\n>\n  <div\n    *ngFor=\"let value of attribute.values\"\n    id=\"{{ createAttributeValueIdForConfigurator(attribute, value.valueCode) }}\"\n    class=\"cx-configurator-select\"\n  >\n    <input\n      id=\"{{\n        createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n          '-input'\n      }}\"\n      type=\"radio\"\n      class=\"form-input\"\n      [value]=\"value.valueCode\"\n      formcontrolname=\"attributeRadioButtonForm\"\n      [formControl]=\"attributeRadioButtonForm\"\n      [value]=\"value.valueCode\"\n      name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      attr.name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      [attr.required]=\"attribute.required\"\n      [attr.checked]=\"\n        attributeRadioButtonForm.value === value.valueCode ? 'checked' : null\n      \"\n      [attr.aria-checked]=\"\n        attributeRadioButtonForm.value === value.valueCode ? 'true' : 'false'\n      \"\n      [attr.aria-label]=\"\n        value.valuePrice && value.valuePrice?.value !== 0\n          ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n            | cxTranslate\n              : {\n                  value: value.valueDisplay,\n                  attribute: attribute.label,\n                  price: value.valuePrice.formattedValue\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : { value: value.valueDisplay, attribute: attribute.label })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      (click)=\"onClick(value.valueCode)\"\n      [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n      role=\"radio\"\n    />\n    <div class=\"cx-label-container\">\n      <label\n        id=\"{{ createValueUiKey('label', attribute.name, value.valueCode) }}\"\n        for=\"{{\n          createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n            '-input'\n        }}\"\n        aria-hidden=\"true\"\n        class=\"form-check-label form-radio-label\"\n      >\n        <img\n          *ngIf=\"value.images[0]\"\n          class=\"cx-img\"\n          src=\"{{ value.images[0].url }}\"\n          alt=\"{{ value.images[0].altText }}\"\n        />\n        <div *ngIf=\"!value.images[0]\" class=\"cx-img-dummy\"></div>\n        {{ value.valueDisplay }}\n        <cx-configurator-price\n          [formula]=\"extractValuePriceFormulaParameters(value)\"\n        ></cx-configurator-price>\n      </label>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "pipe", type: i5.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorAttributeSingleSelectionImageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-single-selection-image', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  id=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n  class=\"cx-row\"\n  role=\"radiogroup\"\n>\n  <div\n    *ngFor=\"let value of attribute.values\"\n    id=\"{{ createAttributeValueIdForConfigurator(attribute, value.valueCode) }}\"\n    class=\"cx-configurator-select\"\n  >\n    <input\n      id=\"{{\n        createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n          '-input'\n      }}\"\n      type=\"radio\"\n      class=\"form-input\"\n      [value]=\"value.valueCode\"\n      formcontrolname=\"attributeRadioButtonForm\"\n      [formControl]=\"attributeRadioButtonForm\"\n      [value]=\"value.valueCode\"\n      name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      attr.name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      [attr.required]=\"attribute.required\"\n      [attr.checked]=\"\n        attributeRadioButtonForm.value === value.valueCode ? 'checked' : null\n      \"\n      [attr.aria-checked]=\"\n        attributeRadioButtonForm.value === value.valueCode ? 'true' : 'false'\n      \"\n      [attr.aria-label]=\"\n        value.valuePrice && value.valuePrice?.value !== 0\n          ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n            | cxTranslate\n              : {\n                  value: value.valueDisplay,\n                  attribute: attribute.label,\n                  price: value.valuePrice.formattedValue\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : { value: value.valueDisplay, attribute: attribute.label })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      (click)=\"onClick(value.valueCode)\"\n      [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n      role=\"radio\"\n    />\n    <div class=\"cx-label-container\">\n      <label\n        id=\"{{ createValueUiKey('label', attribute.name, value.valueCode) }}\"\n        for=\"{{\n          createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n            '-input'\n        }}\"\n        aria-hidden=\"true\"\n        class=\"form-check-label form-radio-label\"\n      >\n        <img\n          *ngIf=\"value.images[0]\"\n          class=\"cx-img\"\n          src=\"{{ value.images[0].url }}\"\n          alt=\"{{ value.images[0].altText }}\"\n        />\n        <div *ngIf=\"!value.images[0]\" class=\"cx-img-dummy\"></div>\n        {{ value.valueDisplay }}\n        <cx-configurator-price\n          [formula]=\"extractValuePriceFormulaParameters(value)\"\n        ></cx-configurator-price>\n      </label>\n    </div>\n  </div>\n</div>\n" }]
        }], propDecorators: { attribute: [{
                type: Input
            }], ownerKey: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,