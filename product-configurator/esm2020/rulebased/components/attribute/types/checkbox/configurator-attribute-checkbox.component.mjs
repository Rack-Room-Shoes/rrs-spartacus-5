/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { ConfiguratorAttributeBaseComponent } from '../base/configurator-attribute-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@angular/forms";
import * as i3 from "@spartacus/core";
import * as i4 from "../../../price/configurator-price.component";
export class ConfiguratorAttributeCheckBoxComponent extends ConfiguratorAttributeBaseComponent {
    constructor() {
        super(...arguments);
        this.selectionChange = new EventEmitter();
        this.attributeCheckBoxForm = new UntypedFormControl('');
    }
    ngOnInit() {
        this.attributeCheckBoxForm.setValue(this.attribute.selectedSingleValue);
    }
    /**
     * Fired when a check box has been selected i.e. when a value has been set
     */
    onSelect() {
        const selectedValues = this.assembleSingleValue();
        const event = {
            ownerKey: this.ownerKey,
            changedAttribute: {
                ...this.attribute,
                values: selectedValues,
            },
        };
        this.selectionChange.emit(event);
    }
    assembleSingleValue() {
        const localAssembledValues = [];
        const value = this.attribute.values ? this.attribute.values[0] : undefined;
        //we can assume that for this component, value is always present
        if (value) {
            const localAttributeValue = {
                valueCode: value.valueCode,
            };
            localAttributeValue.name = value.name;
            localAttributeValue.selected = this.attributeCheckBoxForm.value;
            localAssembledValues.push(localAttributeValue);
        }
        return localAssembledValues;
    }
    /**
     * Extract corresponding value price formula parameters.
     * For the multi-selection attribute types the complete price formula should be displayed at the value level.
     *
     * @param {Configurator.Value} value - Configurator value
     * @return {ConfiguratorPriceComponentOptions} - New price formula
     */
    extractValuePriceFormulaParameters(value) {
        return {
            quantity: value.quantity,
            price: value.valuePrice,
            priceTotal: value.valuePriceTotal,
            isLightedUp: value.selected,
        };
    }
}
ConfiguratorAttributeCheckBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorAttributeCheckBoxComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeCheckBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: ConfiguratorAttributeCheckBoxComponent, selector: "cx-configurator-attribute-checkbox", inputs: { attribute: "attribute", group: "group", ownerKey: "ownerKey" }, outputs: { selectionChange: "selectionChange" }, usesInheritance: true, ngImport: i0, template: "<ng-container *cxFeatureLevel=\"'!4.1'\">\n  <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n    <div class=\"form-check\">\n      <input\n        id=\"{{\n          createAttributeValueIdForConfigurator(\n            attribute,\n            attribute?.values[0].valueCode\n          )\n        }}\"\n        type=\"checkbox\"\n        class=\"form-check-input\"\n        [value]=\"attribute?.values[0].valueCode\"\n        [cxFocus]=\"{ key: attribute.name + '-' + attribute?.values[0].name }\"\n        (change)=\"onSelect()\"\n        [formControl]=\"attributeCheckBoxForm\"\n        name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n        [attr.aria-label]=\"\n          'configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : {\n                  value: attribute?.values[0].valueDisplay,\n                  attribute: attribute.label\n                }\n        \"\n        [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      />\n      <label\n        id=\"{{\n          createValueUiKey(\n            'label',\n            attribute.name,\n            attribute?.values[0].valueCode\n          )\n        }}\"\n        for=\"{{\n          createAttributeValueIdForConfigurator(\n            attribute,\n            attribute?.values[0].valueCode\n          )\n        }}\"\n        aria-hidden=\"true\"\n        class=\"form-check-label\"\n        >{{ attribute?.values[0].valueDisplay }}</label\n      >\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *cxFeatureLevel=\"'4.1'\">\n  <fieldset>\n    <legend style=\"display: none\">{{ attribute.label }}</legend>\n    <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n      <div class=\"form-check\">\n        <div class=\"cx-value-label-pair\">\n          <input\n            id=\"{{\n              createAttributeValueIdForConfigurator(\n                attribute,\n                attribute?.values[0].valueCode\n              )\n            }}\"\n            type=\"checkbox\"\n            class=\"form-check-input\"\n            [value]=\"attribute?.values[0].valueCode\"\n            [cxFocus]=\"{\n              key: attribute.name + '-' + attribute?.values[0].name\n            }\"\n            (change)=\"onSelect()\"\n            [formControl]=\"attributeCheckBoxForm\"\n            name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n            [attr.aria-label]=\"\n              attribute?.values[0].valuePrice &&\n              attribute?.values[0].valuePrice?.value !== 0\n                ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n                  | cxTranslate\n                    : {\n                        value: attribute?.values[0].valueDisplay,\n                        attribute: attribute.label,\n                        price: attribute?.values[0].valuePrice.formattedValue\n                      })\n                : ('configurator.a11y.valueOfAttributeFull'\n                  | cxTranslate\n                    : {\n                        value: attribute?.values[0].valueDisplay,\n                        attribute: attribute.label\n                      })\n            \"\n            [attr.aria-describedby]=\"\n              createAttributeUiKey('label', attribute.name) +\n              ' ' +\n              createAttributeUiKey('attribute-msg', attribute.name)\n            \"\n          />\n          <label\n            id=\"{{\n              createValueUiKey(\n                'label',\n                attribute.name,\n                attribute?.values[0].valueCode\n              )\n            }}\"\n            for=\"{{\n              createAttributeValueIdForConfigurator(\n                attribute,\n                attribute?.values[0].valueCode\n              )\n            }}\"\n            aria-hidden=\"true\"\n            class=\"form-check-label\"\n            >{{ attribute?.values[0].valueDisplay }}</label\n          >\n        </div>\n        <div class=\"cx-value-price\">\n          <cx-configurator-price\n            [formula]=\"extractValuePriceFormulaParameters(attribute?.values[0])\"\n          ></cx-configurator-price>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i1.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FeatureLevelDirective, selector: "[cxFeatureLevel]", inputs: ["cxFeatureLevel"] }, { kind: "component", type: i4.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorAttributeCheckBoxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *cxFeatureLevel=\"'!4.1'\">\n  <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n    <div class=\"form-check\">\n      <input\n        id=\"{{\n          createAttributeValueIdForConfigurator(\n            attribute,\n            attribute?.values[0].valueCode\n          )\n        }}\"\n        type=\"checkbox\"\n        class=\"form-check-input\"\n        [value]=\"attribute?.values[0].valueCode\"\n        [cxFocus]=\"{ key: attribute.name + '-' + attribute?.values[0].name }\"\n        (change)=\"onSelect()\"\n        [formControl]=\"attributeCheckBoxForm\"\n        name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n        [attr.aria-label]=\"\n          'configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : {\n                  value: attribute?.values[0].valueDisplay,\n                  attribute: attribute.label\n                }\n        \"\n        [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      />\n      <label\n        id=\"{{\n          createValueUiKey(\n            'label',\n            attribute.name,\n            attribute?.values[0].valueCode\n          )\n        }}\"\n        for=\"{{\n          createAttributeValueIdForConfigurator(\n            attribute,\n            attribute?.values[0].valueCode\n          )\n        }}\"\n        aria-hidden=\"true\"\n        class=\"form-check-label\"\n        >{{ attribute?.values[0].valueDisplay }}</label\n      >\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *cxFeatureLevel=\"'4.1'\">\n  <fieldset>\n    <legend style=\"display: none\">{{ attribute.label }}</legend>\n    <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n      <div class=\"form-check\">\n        <div class=\"cx-value-label-pair\">\n          <input\n            id=\"{{\n              createAttributeValueIdForConfigurator(\n                attribute,\n                attribute?.values[0].valueCode\n              )\n            }}\"\n            type=\"checkbox\"\n            class=\"form-check-input\"\n            [value]=\"attribute?.values[0].valueCode\"\n            [cxFocus]=\"{\n              key: attribute.name + '-' + attribute?.values[0].name\n            }\"\n            (change)=\"onSelect()\"\n            [formControl]=\"attributeCheckBoxForm\"\n            name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n            [attr.aria-label]=\"\n              attribute?.values[0].valuePrice &&\n              attribute?.values[0].valuePrice?.value !== 0\n                ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n                  | cxTranslate\n                    : {\n                        value: attribute?.values[0].valueDisplay,\n                        attribute: attribute.label,\n                        price: attribute?.values[0].valuePrice.formattedValue\n                      })\n                : ('configurator.a11y.valueOfAttributeFull'\n                  | cxTranslate\n                    : {\n                        value: attribute?.values[0].valueDisplay,\n                        attribute: attribute.label\n                      })\n            \"\n            [attr.aria-describedby]=\"\n              createAttributeUiKey('label', attribute.name) +\n              ' ' +\n              createAttributeUiKey('attribute-msg', attribute.name)\n            \"\n          />\n          <label\n            id=\"{{\n              createValueUiKey(\n                'label',\n                attribute.name,\n                attribute?.values[0].valueCode\n              )\n            }}\"\n            for=\"{{\n              createAttributeValueIdForConfigurator(\n                attribute,\n                attribute?.values[0].valueCode\n              )\n            }}\"\n            aria-hidden=\"true\"\n            class=\"form-check-label\"\n            >{{ attribute?.values[0].valueDisplay }}</label\n          >\n        </div>\n        <div class=\"cx-value-price\">\n          <cx-configurator-price\n            [formula]=\"extractValuePriceFormulaParameters(attribute?.values[0])\"\n          ></cx-configurator-price>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</ng-container>\n" }]
        }], propDecorators: { attribute: [{
                type: Input
            }], group: [{
                type: Input
            }], ownerKey: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,