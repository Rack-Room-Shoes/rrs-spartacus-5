/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { ConfiguratorProductScope } from '@spartacus/product-configurator/common';
import { ICON_TYPE, } from '@spartacus/storefront';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map, take, tap } from 'rxjs/operators';
import { ConfiguratorAttributeBaseComponent } from '../types/base/configurator-attribute-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@angular/common";
import * as i4 from "../../show-more/configurator-show-more.component";
import * as i5 from "../quantity/configurator-attribute-quantity.component";
import * as i6 from "../../price/configurator-price.component";
export class ConfiguratorAttributeProductCardComponent extends ConfiguratorAttributeBaseComponent {
    constructor(productService, keyBoardFocus, translation) {
        super();
        this.productService = productService;
        this.keyBoardFocus = keyBoardFocus;
        this.translation = translation;
        this.loading$ = new BehaviorSubject(true);
        this.showDeselectionNotPossible = false;
        this.handleDeselect = new EventEmitter();
        this.handleQuantity = new EventEmitter();
        this.handleSelect = new EventEmitter();
        this.iconType = ICON_TYPE;
    }
    ngOnInit() {
        this.loading$.next(true);
        const productSystemId = this.productCardOptions.productBoundValue.productSystemId;
        this.product$ = this.productService
            .get(productSystemId ? productSystemId : '', ConfiguratorProductScope.CONFIGURATOR_PRODUCT_CARD)
            .pipe(map((respProduct) => {
            return respProduct
                ? respProduct
                : this.transformToProductType(this.productCardOptions.productBoundValue);
        }), tap(() => this.loading$.next(false)));
    }
    get showQuantity() {
        return ((this.productCardOptions.withQuantity &&
            this.productCardOptions.productBoundValue.selected &&
            this.productCardOptions.multiSelect) ??
            false);
    }
    get focusConfig() {
        const focusConfig = {
            key: this.createFocusId(this.productCardOptions.attributeId.toString(), this.productCardOptions.productBoundValue.valueCode),
        };
        return focusConfig;
    }
    onHandleSelect() {
        this.loading$.next(true);
        if (this.productCardOptions.hideRemoveButton &&
            this.productCardOptions.fallbackFocusId) {
            this.keyBoardFocus.set(this.productCardOptions.fallbackFocusId);
        }
        this.handleSelect.emit(this.productCardOptions.productBoundValue.valueCode);
    }
    onHandleDeselect() {
        {
            if (this.productCardOptions.productBoundValue.selected &&
                this.productCardOptions.hideRemoveButton) {
                this.showDeselectionNotPossibleMessage();
                return;
            }
            this.loading$.next(true);
            this.handleDeselect.emit(this.productCardOptions.productBoundValue.valueCode);
        }
    }
    onChangeQuantity(eventObject) {
        if (!eventObject) {
            this.onHandleDeselect();
        }
        else {
            this.onHandleQuantity(eventObject);
        }
    }
    /**
     * Verifies whether the product card refers to a selected value
     * @return {boolean} - Selected?
     */
    isProductCardSelected() {
        const isProductCardSelected = this.productCardOptions.productBoundValue &&
            this.productCardOptions.productBoundValue.selected &&
            !this.productCardOptions.singleDropdown;
        return isProductCardSelected ?? false;
    }
    /**
     * Checks if price needs to be displayed. This is the
     * case if either value price, quantity or value price total
     * are present
     * @return {boolean} - Price display?
     */
    hasPriceDisplay() {
        const productPrice = this.productCardOptions.productBoundValue.valuePrice ||
            this.productCardOptions.productBoundValue.quantity ||
            this.productCardOptions.productBoundValue.valuePriceTotal;
        return productPrice ? true : false;
    }
    /**
     * Extract corresponding price formula parameters
     *
     *  @return {ConfiguratorPriceComponentOptions} - New price formula
     */
    extractPriceFormulaParameters() {
        if (!this.productCardOptions.multiSelect) {
            return {
                price: this.productCardOptions.productBoundValue.valuePrice,
                isLightedUp: this.productCardOptions.productBoundValue.selected,
            };
        }
        return {
            quantity: this.productCardOptions.productBoundValue.quantity,
            price: this.productCardOptions.productBoundValue.valuePrice,
            priceTotal: this.productCardOptions.productBoundValue.valuePriceTotal,
            isLightedUp: this.productCardOptions.productBoundValue.selected,
        };
    }
    /**
     *  Extract corresponding quantity parameters
     *
     * @return {ConfiguratorAttributeQuantityComponentOptions} - New quantity options
     */
    extractQuantityParameters() {
        const quantityFromOptions = this.productCardOptions.productBoundValue.quantity;
        const mergedLoading = this.productCardOptions.loading$
            ? combineLatest([this.loading$, this.productCardOptions.loading$]).pipe(map((values) => {
                return values[0] || values[1];
            }))
            : this.loading$;
        return {
            allowZero: !this.productCardOptions.hideRemoveButton,
            initialQuantity: quantityFromOptions ? quantityFromOptions : 0,
            disableQuantityActions$: mergedLoading,
        };
    }
    /**
     * Verifies whether the value code is defined.
     *
     * @param {string} valueCode - Value code
     * @return {boolean} - 'true' if the value code is defined, otherwise 'false'
     */
    isValueCodeDefined(valueCode) {
        return valueCode && valueCode !== '0' ? true : false;
    }
    transformToProductType(value) {
        return {
            code: value?.productSystemId,
            description: value?.description,
            images: {},
            name: value?.valueDisplay,
        };
    }
    onHandleQuantity(quantity) {
        this.loading$.next(true);
        this.handleQuantity.emit({
            quantity,
            valueCode: this.productCardOptions.productBoundValue.valueCode,
        });
    }
    showDeselectionNotPossibleMessage() {
        this.showDeselectionNotPossible = true;
    }
    getAriaLabelSingleUnselected(product) {
        let translatedText = '';
        let index = this.productCardOptions.itemIndex + 1;
        if (this.isValueCodeDefined(this.productCardOptions?.productBoundValue?.valueCode)) {
            if (this.hasPriceDisplay() &&
                this.productCardOptions.productBoundValue.valuePrice?.value !== 0) {
                this.translation
                    .translate('configurator.a11y.itemOfAttributeUnselectedWithPrice', {
                    item: product.code,
                    attribute: this.productCardOptions?.attributeLabel,
                    itemIndex: index,
                    itemCount: this.productCardOptions.itemCount,
                    price: this.productCardOptions.productBoundValue.valuePriceTotal
                        ?.formattedValue,
                })
                    .pipe(take(1))
                    .subscribe((text) => (translatedText = text));
            }
            else {
                this.translation
                    .translate('configurator.a11y.itemOfAttributeUnselected', {
                    item: product.code,
                    attribute: this.productCardOptions?.attributeLabel,
                    itemIndex: index,
                    itemCount: this.productCardOptions.itemCount,
                })
                    .pipe(take(1))
                    .subscribe((text) => (translatedText = text));
            }
        }
        else {
            this.translation
                .translate('configurator.a11y.selectNoItemOfAttribute', {
                attribute: this.productCardOptions?.attributeLabel,
                itemIndex: index,
                itemCount: this.productCardOptions.itemCount,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        return translatedText;
    }
    getAriaLabelSingleSelected(product) {
        let translatedText = '';
        let index = this.productCardOptions.itemIndex + 1;
        if (this.hasPriceDisplay() &&
            this.productCardOptions.productBoundValue.valuePrice?.value !== 0) {
            this.translation
                .translate('configurator.a11y.itemOfAttributeSelectedPressToUnselectWithPrice', {
                item: product.code,
                attribute: this.productCardOptions?.attributeLabel,
                itemIndex: index,
                itemCount: this.productCardOptions.itemCount,
                price: this.productCardOptions.productBoundValue.valuePriceTotal
                    ?.formattedValue,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        else {
            this.translation
                .translate('configurator.a11y.itemOfAttributeSelectedPressToUnselect', {
                item: product.code,
                attribute: this.productCardOptions?.attributeLabel,
                itemIndex: index,
                itemCount: this.productCardOptions.itemCount,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        return translatedText;
    }
    getAriaLabelSingleSelectedNoButton(product) {
        let translatedText = '';
        let index = this.productCardOptions.itemIndex + 1;
        if (this.hasPriceDisplay() &&
            this.productCardOptions.productBoundValue.valuePrice?.value !== 0) {
            this.translation
                .translate('configurator.a11y.itemOfAttributeSelectedWithPrice', {
                item: product.code,
                attribute: this.productCardOptions?.attributeLabel,
                itemIndex: index,
                itemCount: this.productCardOptions.itemCount,
                price: this.productCardOptions.productBoundValue.valuePriceTotal
                    ?.formattedValue,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        else {
            this.translation
                .translate('configurator.a11y.itemOfAttributeSelected', {
                item: product.code,
                attribute: this.productCardOptions?.attributeLabel,
                itemIndex: index,
                itemCount: this.productCardOptions.itemCount,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        return translatedText;
    }
    getAriaLabelMultiSelected(product) {
        let translatedText = '';
        let index = this.productCardOptions.itemIndex + 1;
        if (this.hasPriceDisplay() &&
            this.productCardOptions.productBoundValue.valuePrice?.value !== 0) {
            this.translation
                .translate('configurator.a11y.itemOfAttributeSelectedPressToUnselectWithPrice', {
                item: product.code,
                attribute: this.productCardOptions?.attributeLabel,
                itemIndex: index,
                itemCount: this.productCardOptions.itemCount,
                price: this.productCardOptions.productBoundValue.valuePriceTotal
                    ?.formattedValue,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        else {
            this.translation
                .translate('configurator.a11y.itemOfAttributeSelectedPressToUnselect', {
                item: product.code,
                attribute: this.productCardOptions?.attributeLabel,
                itemIndex: index,
                itemCount: this.productCardOptions.itemCount,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        return translatedText;
    }
    getAriaLabelMultiUnselected(product) {
        let translatedText = '';
        let index = this.productCardOptions.itemIndex + 1;
        if (this.hasPriceDisplay() &&
            this.productCardOptions.productBoundValue.valuePrice?.value !== 0) {
            this.translation
                .translate('configurator.a11y.itemOfAttributeUnselectedWithPrice', {
                item: product.code,
                attribute: this.productCardOptions?.attributeLabel,
                itemIndex: index,
                itemCount: this.productCardOptions.itemCount,
                price: this.productCardOptions.productBoundValue.valuePriceTotal
                    ?.formattedValue,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        else {
            this.translation
                .translate('configurator.a11y.itemOfAttributeUnselected', {
                item: product.code,
                attribute: this.productCardOptions?.attributeLabel,
                itemIndex: index,
                itemCount: this.productCardOptions.itemCount,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        return translatedText;
    }
}
ConfiguratorAttributeProductCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorAttributeProductCardComponent, deps: [{ token: i1.ProductService }, { token: i2.KeyboardFocusService }, { token: i1.TranslationService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeProductCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: ConfiguratorAttributeProductCardComponent, selector: "cx-configurator-attribute-product-card", inputs: { productCardOptions: "productCardOptions" }, outputs: { handleDeselect: "handleDeselect", handleQuantity: "handleQuantity", handleSelect: "handleSelect" }, usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"product$ | async as product\">\n  <div\n    class=\"cx-product-card\"\n    [ngClass]=\"{\n      'cx-product-card-selected': isProductCardSelected()\n    }\"\n    [attr.aria-label]=\"\n      'configurator.a11y.itemOfAttribute'\n        | cxTranslate\n          : {\n              attribute: productCardOptions?.attributeLabel\n            }\n    \"\n  >\n    <div class=\"cx-product-card-rows\">\n      <div class=\"cx-product-card-imgs\">\n        <cx-media\n          [container]=\"product?.images?.PRIMARY\"\n          format=\"product\"\n          aria-hidden=\"true\"\n        ></cx-media>\n      </div>\n\n      <div class=\"cx-product-card-info\">\n        <div class=\"cx-product-card-name\">\n          <p>\n            {{ product.name }}\n          </p>\n        </div>\n        <div class=\"cx-product-card-code\" *ngIf=\"product.code\">\n          {{ 'configurator.attribute.id' | cxTranslate }}:\n          {{ product.code }}\n        </div>\n        <cx-configurator-show-more\n          *ngIf=\"product?.description\"\n          [text]=\"product?.description\"\n          [textSize]=\"45\"\n          [productName]=\"product.code\"\n        ></cx-configurator-show-more>\n      </div>\n    </div>\n\n    <div\n      class=\"cx-product-card-rows column\"\n      *ngIf=\"!productCardOptions.singleDropdown || hasPriceDisplay()\"\n    >\n      <div class=\"cx-product-card-quantity-price\">\n        <div class=\"cx-product-card-quantity\">\n          <cx-configurator-attribute-quantity\n            *ngIf=\"showQuantity\"\n            (changeQuantity)=\"onChangeQuantity($event)\"\n            [quantityOptions]=\"extractQuantityParameters()\"\n          ></cx-configurator-attribute-quantity>\n        </div>\n        <div class=\"cx-product-card-price\">\n          <cx-configurator-price\n            [formula]=\"extractPriceFormulaParameters()\"\n          ></cx-configurator-price>\n        </div>\n      </div>\n      <div class=\"cx-product-card-action\">\n        <div\n          class=\"cx-product-card-action-btn\"\n          *ngIf=\"!productCardOptions?.singleDropdown\"\n        >\n          <ng-container *ngIf=\"productCardOptions?.multiSelect; else single\">\n            <button\n              *ngIf=\"\n                productCardOptions?.productBoundValue?.selected;\n                else select\n              \"\n              class=\"btn btn-action\"\n              (click)=\"onHandleDeselect()\"\n              [cxFocus]=\"focusConfig\"\n              [attr.aria-label]=\"getAriaLabelMultiSelected(product)\"\n              [attr.aria-describedby]=\"\n                createAttributeUiKey('label', productCardOptions?.attributeName)\n              \"\n            >\n              {{ 'configurator.button.remove' | cxTranslate }}\n            </button>\n\n            <ng-template #select>\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"onHandleSelect()\"\n                [disabled]=\"\n                  productCardOptions?.disableAllButtons || (loading$ | async)\n                \"\n                [cxFocus]=\"focusConfig\"\n                [attr.aria-label]=\"getAriaLabelMultiUnselected(product)\"\n                [attr.aria-describedby]=\"\n                  createAttributeUiKey(\n                    'label',\n                    productCardOptions?.attributeName\n                  )\n                \"\n              >\n                {{ 'configurator.button.add' | cxTranslate }}\n              </button>\n            </ng-template>\n          </ng-container>\n\n          <ng-template #single>\n            <button\n              class=\"btn btn-primary\"\n              (click)=\"onHandleSelect()\"\n              [disabled]=\"\n                productCardOptions?.disableAllButtons || (loading$ | async)\n              \"\n              *ngIf=\"\n                !productCardOptions?.productBoundValue?.selected;\n                else deselect\n              \"\n              [cxFocus]=\"focusConfig\"\n              [attr.aria-label]=\"getAriaLabelSingleUnselected(product)\"\n              [attr.aria-describedby]=\"\n                createAttributeUiKey('label', productCardOptions?.attributeName)\n              \"\n            >\n              {{ 'configurator.button.select' | cxTranslate }}\n            </button>\n            <ng-template #deselect>\n              <ng-container\n                *ngIf=\"\n                  isValueCodeDefined(\n                    productCardOptions?.productBoundValue?.valueCode\n                  )\n                \"\n              >\n                <button\n                  *ngIf=\"!productCardOptions?.hideRemoveButton\"\n                  class=\"btn btn-action\"\n                  (click)=\"onHandleDeselect()\"\n                  [disabled]=\"\n                    productCardOptions?.hideRemoveButton || (loading$ | async)\n                  \"\n                  [cxFocus]=\"focusConfig\"\n                  [attr.aria-label]=\"getAriaLabelSingleSelected(product)\"\n                  [attr.aria-describedby]=\"\n                    createAttributeUiKey(\n                      'label',\n                      productCardOptions?.attributeName\n                    )\n                  \"\n                >\n                  {{ 'configurator.button.deselect' | cxTranslate }}\n                </button>\n                <span\n                  *ngIf=\"productCardOptions?.hideRemoveButton\"\n                  class=\"cx-visually-hidden\"\n                  tabindex=\"0\"\n                >\n                  {{ getAriaLabelSingleSelectedNoButton(product) }}\n                </span>\n              </ng-container>\n            </ng-template>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n    <ng-container *ngIf=\"showDeselectionNotPossible\">\n      <div\n        class=\"cx-product-card-rows deselection-error-message\"\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        role=\"alert\"\n        id=\"{{\n          createAttributeUiKey(\n            'attribute-msg',\n            productCardOptions?.attributeName\n          )\n        }}\"\n      >\n        <cx-icon class=\"deselection-error-symbol\" type=\"ERROR\"></cx-icon>\n        {{ 'configurator.attribute.deselectionNotPossible' | cxTranslate }}\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.ConfiguratorShowMoreComponent, selector: "cx-configurator-show-more", inputs: ["text", "textSize", "productName"] }, { kind: "component", type: i5.ConfiguratorAttributeQuantityComponent, selector: "cx-configurator-attribute-quantity", inputs: ["quantityOptions"], outputs: ["changeQuantity"] }, { kind: "component", type: i2.MediaComponent, selector: "cx-media", inputs: ["container", "format", "alt", "role", "loading"], outputs: ["loaded"] }, { kind: "component", type: i6.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "directive", type: i2.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "component", type: i2.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorAttributeProductCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-product-card', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"product$ | async as product\">\n  <div\n    class=\"cx-product-card\"\n    [ngClass]=\"{\n      'cx-product-card-selected': isProductCardSelected()\n    }\"\n    [attr.aria-label]=\"\n      'configurator.a11y.itemOfAttribute'\n        | cxTranslate\n          : {\n              attribute: productCardOptions?.attributeLabel\n            }\n    \"\n  >\n    <div class=\"cx-product-card-rows\">\n      <div class=\"cx-product-card-imgs\">\n        <cx-media\n          [container]=\"product?.images?.PRIMARY\"\n          format=\"product\"\n          aria-hidden=\"true\"\n        ></cx-media>\n      </div>\n\n      <div class=\"cx-product-card-info\">\n        <div class=\"cx-product-card-name\">\n          <p>\n            {{ product.name }}\n          </p>\n        </div>\n        <div class=\"cx-product-card-code\" *ngIf=\"product.code\">\n          {{ 'configurator.attribute.id' | cxTranslate }}:\n          {{ product.code }}\n        </div>\n        <cx-configurator-show-more\n          *ngIf=\"product?.description\"\n          [text]=\"product?.description\"\n          [textSize]=\"45\"\n          [productName]=\"product.code\"\n        ></cx-configurator-show-more>\n      </div>\n    </div>\n\n    <div\n      class=\"cx-product-card-rows column\"\n      *ngIf=\"!productCardOptions.singleDropdown || hasPriceDisplay()\"\n    >\n      <div class=\"cx-product-card-quantity-price\">\n        <div class=\"cx-product-card-quantity\">\n          <cx-configurator-attribute-quantity\n            *ngIf=\"showQuantity\"\n            (changeQuantity)=\"onChangeQuantity($event)\"\n            [quantityOptions]=\"extractQuantityParameters()\"\n          ></cx-configurator-attribute-quantity>\n        </div>\n        <div class=\"cx-product-card-price\">\n          <cx-configurator-price\n            [formula]=\"extractPriceFormulaParameters()\"\n          ></cx-configurator-price>\n        </div>\n      </div>\n      <div class=\"cx-product-card-action\">\n        <div\n          class=\"cx-product-card-action-btn\"\n          *ngIf=\"!productCardOptions?.singleDropdown\"\n        >\n          <ng-container *ngIf=\"productCardOptions?.multiSelect; else single\">\n            <button\n              *ngIf=\"\n                productCardOptions?.productBoundValue?.selected;\n                else select\n              \"\n              class=\"btn btn-action\"\n              (click)=\"onHandleDeselect()\"\n              [cxFocus]=\"focusConfig\"\n              [attr.aria-label]=\"getAriaLabelMultiSelected(product)\"\n              [attr.aria-describedby]=\"\n                createAttributeUiKey('label', productCardOptions?.attributeName)\n              \"\n            >\n              {{ 'configurator.button.remove' | cxTranslate }}\n            </button>\n\n            <ng-template #select>\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"onHandleSelect()\"\n                [disabled]=\"\n                  productCardOptions?.disableAllButtons || (loading$ | async)\n                \"\n                [cxFocus]=\"focusConfig\"\n                [attr.aria-label]=\"getAriaLabelMultiUnselected(product)\"\n                [attr.aria-describedby]=\"\n                  createAttributeUiKey(\n                    'label',\n                    productCardOptions?.attributeName\n                  )\n                \"\n              >\n                {{ 'configurator.button.add' | cxTranslate }}\n              </button>\n            </ng-template>\n          </ng-container>\n\n          <ng-template #single>\n            <button\n              class=\"btn btn-primary\"\n              (click)=\"onHandleSelect()\"\n              [disabled]=\"\n                productCardOptions?.disableAllButtons || (loading$ | async)\n              \"\n              *ngIf=\"\n                !productCardOptions?.productBoundValue?.selected;\n                else deselect\n              \"\n              [cxFocus]=\"focusConfig\"\n              [attr.aria-label]=\"getAriaLabelSingleUnselected(product)\"\n              [attr.aria-describedby]=\"\n                createAttributeUiKey('label', productCardOptions?.attributeName)\n              \"\n            >\n              {{ 'configurator.button.select' | cxTranslate }}\n            </button>\n            <ng-template #deselect>\n              <ng-container\n                *ngIf=\"\n                  isValueCodeDefined(\n                    productCardOptions?.productBoundValue?.valueCode\n                  )\n                \"\n              >\n                <button\n                  *ngIf=\"!productCardOptions?.hideRemoveButton\"\n                  class=\"btn btn-action\"\n                  (click)=\"onHandleDeselect()\"\n                  [disabled]=\"\n                    productCardOptions?.hideRemoveButton || (loading$ | async)\n                  \"\n                  [cxFocus]=\"focusConfig\"\n                  [attr.aria-label]=\"getAriaLabelSingleSelected(product)\"\n                  [attr.aria-describedby]=\"\n                    createAttributeUiKey(\n                      'label',\n                      productCardOptions?.attributeName\n                    )\n                  \"\n                >\n                  {{ 'configurator.button.deselect' | cxTranslate }}\n                </button>\n                <span\n                  *ngIf=\"productCardOptions?.hideRemoveButton\"\n                  class=\"cx-visually-hidden\"\n                  tabindex=\"0\"\n                >\n                  {{ getAriaLabelSingleSelectedNoButton(product) }}\n                </span>\n              </ng-container>\n            </ng-template>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n    <ng-container *ngIf=\"showDeselectionNotPossible\">\n      <div\n        class=\"cx-product-card-rows deselection-error-message\"\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        role=\"alert\"\n        id=\"{{\n          createAttributeUiKey(\n            'attribute-msg',\n            productCardOptions?.attributeName\n          )\n        }}\"\n      >\n        <cx-icon class=\"deselection-error-symbol\" type=\"ERROR\"></cx-icon>\n        {{ 'configurator.attribute.deselectionNotPossible' | cxTranslate }}\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ProductService }, { type: i2.KeyboardFocusService }, { type: i1.TranslationService }]; }, propDecorators: { productCardOptions: [{
                type: Input
            }], handleDeselect: [{
                type: Output
            }], handleQuantity: [{
                type: Output
            }], handleSelect: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,