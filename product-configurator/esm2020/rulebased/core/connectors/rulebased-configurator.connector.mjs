/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Inject, Injectable, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/product-configurator/common";
//Not provided in root, as this would break lazy loading
export class RulebasedConfiguratorConnector {
    constructor(adapters, configUtilsService) {
        this.adapters = adapters;
        this.configUtilsService = configUtilsService;
    }
    createConfiguration(owner) {
        return this.getAdapter(owner.configuratorType).createConfiguration(owner);
    }
    readConfiguration(configId, groupId, configurationOwner) {
        return this.getAdapter(configurationOwner.configuratorType).readConfiguration(configId, groupId, configurationOwner);
    }
    updateConfiguration(configuration) {
        return this.getAdapter(configuration.owner.configuratorType).updateConfiguration(configuration);
    }
    addToCart(parameters) {
        return this.getAdapter(parameters.owner.configuratorType).addToCart(parameters);
    }
    readConfigurationForCartEntry(parameters) {
        return this.getAdapter(parameters.owner.configuratorType).readConfigurationForCartEntry(parameters);
    }
    updateConfigurationForCartEntry(parameters) {
        return this.getAdapter(parameters.configuration.owner.configuratorType).updateConfigurationForCartEntry(parameters);
    }
    readConfigurationForOrderEntry(parameters) {
        return this.getAdapter(parameters.owner.configuratorType).readConfigurationForOrderEntry(parameters);
    }
    readPriceSummary(configuration) {
        return this.getAdapter(configuration.owner.configuratorType).readPriceSummary(configuration);
    }
    getConfigurationOverview(configuration) {
        return this.getAdapter(configuration.owner.configuratorType).getConfigurationOverview(configuration.configId);
    }
    getAdapter(configuratorType) {
        const adapterResult = this.adapters.find((adapter) => adapter.getConfiguratorType() === configuratorType);
        if (adapterResult) {
            return adapterResult;
        }
        else {
            throw new Error('No adapter found for configurator type: ' + configuratorType);
        }
    }
}
RulebasedConfiguratorConnector.CONFIGURATOR_ADAPTER_LIST = new InjectionToken('ConfiguratorAdapterList');
RulebasedConfiguratorConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: RulebasedConfiguratorConnector, deps: [{ token: RulebasedConfiguratorConnector.CONFIGURATOR_ADAPTER_LIST }, { token: i1.CommonConfiguratorUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });
RulebasedConfiguratorConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: RulebasedConfiguratorConnector });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: RulebasedConfiguratorConnector, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [RulebasedConfiguratorConnector.CONFIGURATOR_ADAPTER_LIST]
                }] }, { type: i1.CommonConfiguratorUtilsService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZWJhc2VkLWNvbmZpZ3VyYXRvci5jb25uZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvcHJvZHVjdC1jb25maWd1cmF0b3IvcnVsZWJhc2VkL2NvcmUvY29ubmVjdG9ycy9ydWxlYmFzZWQtY29uZmlndXJhdG9yLmNvbm5lY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFVbkUsd0RBQXdEO0FBRXhELE1BQU0sT0FBTyw4QkFBOEI7SUFLekMsWUFFWSxRQUF3QyxFQUN4QyxrQkFBa0Q7UUFEbEQsYUFBUSxHQUFSLFFBQVEsQ0FBZ0M7UUFDeEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFnQztJQUMzRCxDQUFDO0lBRUosbUJBQW1CLENBQ2pCLEtBQStCO1FBRS9CLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsaUJBQWlCLENBQ2YsUUFBZ0IsRUFDaEIsT0FBZSxFQUNmLGtCQUE0QztRQUU1QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQ3BCLGtCQUFrQixDQUFDLGdCQUFnQixDQUNwQyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsbUJBQW1CLENBQ2pCLGFBQXlDO1FBRXpDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FDcEIsYUFBYSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDckMsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsU0FBUyxDQUNQLFVBQTRDO1FBRTVDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsU0FBUyxDQUNqRSxVQUFVLENBQ1gsQ0FBQztJQUNKLENBQUM7SUFFRCw2QkFBNkIsQ0FDM0IsVUFBdUU7UUFFdkUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUNwQixVQUFVLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUNsQyxDQUFDLDZCQUE2QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCwrQkFBK0IsQ0FDN0IsVUFBa0U7UUFFbEUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUNwQixVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDaEQsQ0FBQywrQkFBK0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsOEJBQThCLENBQzVCLFVBQXdFO1FBRXhFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FDcEIsVUFBVSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDbEMsQ0FBQyw4QkFBOEIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsZ0JBQWdCLENBQ2QsYUFBeUM7UUFFekMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUNwQixhQUFhLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUNyQyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCx3QkFBd0IsQ0FDdEIsYUFBeUM7UUFFekMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUNwQixhQUFhLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUNyQyxDQUFDLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRVMsVUFBVSxDQUFDLGdCQUF3QjtRQUMzQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDdEMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLGdCQUFnQixDQUNoRSxDQUFDO1FBQ0YsSUFBSSxhQUFhLEVBQUU7WUFDakIsT0FBTyxhQUFhLENBQUM7U0FDdEI7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQ2IsMENBQTBDLEdBQUcsZ0JBQWdCLENBQzlELENBQUM7U0FDSDtJQUNILENBQUM7O0FBN0ZNLHdEQUF5QixHQUFHLElBQUksY0FBYyxDQUVuRCx5QkFBeUIsQ0FBQyxDQUFDOzJIQUhsQiw4QkFBOEIsa0JBTS9CLDhCQUE4QixDQUFDLHlCQUF5QjsrSEFOdkQsOEJBQThCOzJGQUE5Qiw4QkFBOEI7a0JBRDFDLFVBQVU7OzBCQU9OLE1BQU07MkJBQUMsOEJBQThCLENBQUMseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjIgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FydE1vZGlmaWNhdGlvbiB9IGZyb20gJ0BzcGFydGFjdXMvY2FydC9iYXNlL3Jvb3QnO1xuaW1wb3J0IHtcbiAgQ29tbW9uQ29uZmlndXJhdG9yLFxuICBDb21tb25Db25maWd1cmF0b3JVdGlsc1NlcnZpY2UsXG59IGZyb20gJ0BzcGFydGFjdXMvcHJvZHVjdC1jb25maWd1cmF0b3IvY29tbW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbmZpZ3VyYXRvciB9IGZyb20gJy4uL21vZGVsL2NvbmZpZ3VyYXRvci5tb2RlbCc7XG5pbXBvcnQgeyBSdWxlYmFzZWRDb25maWd1cmF0b3JBZGFwdGVyIH0gZnJvbSAnLi9ydWxlYmFzZWQtY29uZmlndXJhdG9yLmFkYXB0ZXInO1xuXG4vL05vdCBwcm92aWRlZCBpbiByb290LCBhcyB0aGlzIHdvdWxkIGJyZWFrIGxhenkgbG9hZGluZ1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJ1bGViYXNlZENvbmZpZ3VyYXRvckNvbm5lY3RvciB7XG4gIHN0YXRpYyBDT05GSUdVUkFUT1JfQURBUFRFUl9MSVNUID0gbmV3IEluamVjdGlvblRva2VuPFxuICAgIFJ1bGViYXNlZENvbmZpZ3VyYXRvckFkYXB0ZXJbXVxuICA+KCdDb25maWd1cmF0b3JBZGFwdGVyTGlzdCcpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUnVsZWJhc2VkQ29uZmlndXJhdG9yQ29ubmVjdG9yLkNPTkZJR1VSQVRPUl9BREFQVEVSX0xJU1QpXG4gICAgcHJvdGVjdGVkIGFkYXB0ZXJzOiBSdWxlYmFzZWRDb25maWd1cmF0b3JBZGFwdGVyW10sXG4gICAgcHJvdGVjdGVkIGNvbmZpZ1V0aWxzU2VydmljZTogQ29tbW9uQ29uZmlndXJhdG9yVXRpbHNTZXJ2aWNlXG4gICkge31cblxuICBjcmVhdGVDb25maWd1cmF0aW9uKFxuICAgIG93bmVyOiBDb21tb25Db25maWd1cmF0b3IuT3duZXJcbiAgKTogT2JzZXJ2YWJsZTxDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbj4ge1xuICAgIHJldHVybiB0aGlzLmdldEFkYXB0ZXIob3duZXIuY29uZmlndXJhdG9yVHlwZSkuY3JlYXRlQ29uZmlndXJhdGlvbihvd25lcik7XG4gIH1cblxuICByZWFkQ29uZmlndXJhdGlvbihcbiAgICBjb25maWdJZDogc3RyaW5nLFxuICAgIGdyb3VwSWQ6IHN0cmluZyxcbiAgICBjb25maWd1cmF0aW9uT3duZXI6IENvbW1vbkNvbmZpZ3VyYXRvci5Pd25lclxuICApOiBPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWRhcHRlcihcbiAgICAgIGNvbmZpZ3VyYXRpb25Pd25lci5jb25maWd1cmF0b3JUeXBlXG4gICAgKS5yZWFkQ29uZmlndXJhdGlvbihjb25maWdJZCwgZ3JvdXBJZCwgY29uZmlndXJhdGlvbk93bmVyKTtcbiAgfVxuXG4gIHVwZGF0ZUNvbmZpZ3VyYXRpb24oXG4gICAgY29uZmlndXJhdGlvbjogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb25cbiAgKTogT2JzZXJ2YWJsZTxDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbj4ge1xuICAgIHJldHVybiB0aGlzLmdldEFkYXB0ZXIoXG4gICAgICBjb25maWd1cmF0aW9uLm93bmVyLmNvbmZpZ3VyYXRvclR5cGVcbiAgICApLnVwZGF0ZUNvbmZpZ3VyYXRpb24oY29uZmlndXJhdGlvbik7XG4gIH1cblxuICBhZGRUb0NhcnQoXG4gICAgcGFyYW1ldGVyczogQ29uZmlndXJhdG9yLkFkZFRvQ2FydFBhcmFtZXRlcnNcbiAgKTogT2JzZXJ2YWJsZTxDYXJ0TW9kaWZpY2F0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWRhcHRlcihwYXJhbWV0ZXJzLm93bmVyLmNvbmZpZ3VyYXRvclR5cGUpLmFkZFRvQ2FydChcbiAgICAgIHBhcmFtZXRlcnNcbiAgICApO1xuICB9XG5cbiAgcmVhZENvbmZpZ3VyYXRpb25Gb3JDYXJ0RW50cnkoXG4gICAgcGFyYW1ldGVyczogQ29tbW9uQ29uZmlndXJhdG9yLlJlYWRDb25maWd1cmF0aW9uRnJvbUNhcnRFbnRyeVBhcmFtZXRlcnNcbiAgKTogT2JzZXJ2YWJsZTxDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbj4ge1xuICAgIHJldHVybiB0aGlzLmdldEFkYXB0ZXIoXG4gICAgICBwYXJhbWV0ZXJzLm93bmVyLmNvbmZpZ3VyYXRvclR5cGVcbiAgICApLnJlYWRDb25maWd1cmF0aW9uRm9yQ2FydEVudHJ5KHBhcmFtZXRlcnMpO1xuICB9XG5cbiAgdXBkYXRlQ29uZmlndXJhdGlvbkZvckNhcnRFbnRyeShcbiAgICBwYXJhbWV0ZXJzOiBDb25maWd1cmF0b3IuVXBkYXRlQ29uZmlndXJhdGlvbkZvckNhcnRFbnRyeVBhcmFtZXRlcnNcbiAgKTogT2JzZXJ2YWJsZTxDYXJ0TW9kaWZpY2F0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWRhcHRlcihcbiAgICAgIHBhcmFtZXRlcnMuY29uZmlndXJhdGlvbi5vd25lci5jb25maWd1cmF0b3JUeXBlXG4gICAgKS51cGRhdGVDb25maWd1cmF0aW9uRm9yQ2FydEVudHJ5KHBhcmFtZXRlcnMpO1xuICB9XG5cbiAgcmVhZENvbmZpZ3VyYXRpb25Gb3JPcmRlckVudHJ5KFxuICAgIHBhcmFtZXRlcnM6IENvbW1vbkNvbmZpZ3VyYXRvci5SZWFkQ29uZmlndXJhdGlvbkZyb21PcmRlckVudHJ5UGFyYW1ldGVyc1xuICApOiBPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWRhcHRlcihcbiAgICAgIHBhcmFtZXRlcnMub3duZXIuY29uZmlndXJhdG9yVHlwZVxuICAgICkucmVhZENvbmZpZ3VyYXRpb25Gb3JPcmRlckVudHJ5KHBhcmFtZXRlcnMpO1xuICB9XG5cbiAgcmVhZFByaWNlU3VtbWFyeShcbiAgICBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvblxuICApOiBPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWRhcHRlcihcbiAgICAgIGNvbmZpZ3VyYXRpb24ub3duZXIuY29uZmlndXJhdG9yVHlwZVxuICAgICkucmVhZFByaWNlU3VtbWFyeShjb25maWd1cmF0aW9uKTtcbiAgfVxuXG4gIGdldENvbmZpZ3VyYXRpb25PdmVydmlldyhcbiAgICBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvblxuICApOiBPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5PdmVydmlldz4ge1xuICAgIHJldHVybiB0aGlzLmdldEFkYXB0ZXIoXG4gICAgICBjb25maWd1cmF0aW9uLm93bmVyLmNvbmZpZ3VyYXRvclR5cGVcbiAgICApLmdldENvbmZpZ3VyYXRpb25PdmVydmlldyhjb25maWd1cmF0aW9uLmNvbmZpZ0lkKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRBZGFwdGVyKGNvbmZpZ3VyYXRvclR5cGU6IHN0cmluZyk6IFJ1bGViYXNlZENvbmZpZ3VyYXRvckFkYXB0ZXIge1xuICAgIGNvbnN0IGFkYXB0ZXJSZXN1bHQgPSB0aGlzLmFkYXB0ZXJzLmZpbmQoXG4gICAgICAoYWRhcHRlcikgPT4gYWRhcHRlci5nZXRDb25maWd1cmF0b3JUeXBlKCkgPT09IGNvbmZpZ3VyYXRvclR5cGVcbiAgICApO1xuICAgIGlmIChhZGFwdGVyUmVzdWx0KSB7XG4gICAgICByZXR1cm4gYWRhcHRlclJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnTm8gYWRhcHRlciBmb3VuZCBmb3IgY29uZmlndXJhdG9yIHR5cGU6ICcgKyBjb25maWd1cmF0b3JUeXBlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19