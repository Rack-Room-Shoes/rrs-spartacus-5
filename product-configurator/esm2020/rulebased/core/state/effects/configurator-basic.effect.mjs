/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { select } from '@ngrx/store';
import { normalizeHttpError } from '@spartacus/core';
import { catchError, filter, map, mergeMap, switchMap, switchMapTo, take, } from 'rxjs/operators';
import { ConfiguratorActions } from '../actions/index';
import { ConfiguratorSelectors } from '../selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/rulebased-configurator.connector";
import * as i3 from "@spartacus/product-configurator/common";
import * as i4 from "../../facade/utils/configurator-utils.service";
import * as i5 from "../../facade/configurator-group-status.service";
import * as i6 from "@ngrx/store";
import * as i7 from "./configurator-basic-effect.service";
/**
 * Common configurator effects, used for complex configurators like variant configurator
 * and CPQ
 */
export class ConfiguratorBasicEffects {
    constructor(actions$, configuratorCommonsConnector, commonConfigUtilsService, configuratorGroupUtilsService, configuratorGroupStatusService, store, configuratorBasicEffectService) {
        this.actions$ = actions$;
        this.configuratorCommonsConnector = configuratorCommonsConnector;
        this.commonConfigUtilsService = commonConfigUtilsService;
        this.configuratorGroupUtilsService = configuratorGroupUtilsService;
        this.configuratorGroupStatusService = configuratorGroupStatusService;
        this.store = store;
        this.configuratorBasicEffectService = configuratorBasicEffectService;
        this.createConfiguration$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.CREATE_CONFIGURATION), mergeMap((action) => {
            return this.configuratorCommonsConnector
                .createConfiguration(action.payload)
                .pipe(switchMap((configuration) => {
                const currentGroup = this.configuratorBasicEffectService.getFirstGroupWithAttributes(configuration);
                this.store.dispatch(new ConfiguratorActions.UpdatePriceSummary({
                    ...configuration,
                    interactionState: { currentGroup: currentGroup },
                }));
                return [
                    new ConfiguratorActions.CreateConfigurationSuccess(configuration),
                ];
            }), catchError((error) => [
                new ConfiguratorActions.CreateConfigurationFail({
                    ownerKey: action.payload.key,
                    error: normalizeHttpError(error),
                }),
            ]));
        })));
        this.readConfiguration$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.READ_CONFIGURATION), mergeMap((action) => {
            return this.configuratorCommonsConnector
                .readConfiguration(action.payload.configuration.configId, action.payload.groupId, action.payload.configuration.owner)
                .pipe(switchMap((configuration) => {
                return [
                    new ConfiguratorActions.ReadConfigurationSuccess(configuration),
                ];
            }), catchError((error) => [
                new ConfiguratorActions.ReadConfigurationFail({
                    ownerKey: action.payload.configuration.owner.key,
                    error: normalizeHttpError(error),
                }),
            ]));
        })));
        this.updateConfiguration$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.UPDATE_CONFIGURATION), map((action) => action.payload), 
        //mergeMap here as we need to process each update
        //(which only sends one changed attribute at a time),
        //so we must not cancel inner emissions
        mergeMap((payload) => {
            return this.configuratorCommonsConnector
                .updateConfiguration(payload)
                .pipe(map((configuration) => {
                return new ConfiguratorActions.UpdateConfigurationSuccess(configuration);
            }), catchError((error) => {
                const errorPayload = normalizeHttpError(error);
                return [
                    new ConfiguratorActions.UpdateConfigurationFail({
                        configuration: payload,
                        error: errorPayload,
                    }),
                ];
            }));
        })));
        this.updatePriceSummary$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.UPDATE_PRICE_SUMMARY), map((action) => action.payload), mergeMap((payload) => {
            return this.configuratorCommonsConnector.readPriceSummary(payload).pipe(map((configuration) => {
                return new ConfiguratorActions.UpdatePriceSummarySuccess(configuration);
            }), catchError((error) => {
                const errorPayload = normalizeHttpError(error);
                return [
                    new ConfiguratorActions.UpdatePriceSummaryFail({
                        ownerKey: payload.owner.key,
                        error: errorPayload,
                    }),
                ];
            }));
        })));
        this.getOverview$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.GET_CONFIGURATION_OVERVIEW), map((action) => action.payload), mergeMap((payload) => {
            return this.configuratorCommonsConnector
                .getConfigurationOverview(payload)
                .pipe(map((overview) => {
                return new ConfiguratorActions.GetConfigurationOverviewSuccess({
                    ownerKey: payload.owner.key,
                    overview: overview,
                });
            }), catchError((error) => {
                const errorPayload = normalizeHttpError(error);
                return [
                    new ConfiguratorActions.GetConfigurationOverviewFail({
                        ownerKey: payload.owner.key,
                        error: errorPayload,
                    }),
                ];
            }));
        })));
        this.updateConfigurationSuccess$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.UPDATE_CONFIGURATION_SUCCESS), map((action) => action.payload), mergeMap((payload) => {
            return this.store.pipe(select(ConfiguratorSelectors.hasPendingChanges(payload.owner.key)), take(1), filter((hasPendingChanges) => hasPendingChanges === false), switchMapTo(this.store.pipe(select(ConfiguratorSelectors.getCurrentGroup(payload.owner.key)), take(1), map((currentGroupId) => {
                const groupIdFromPayload = this.configuratorBasicEffectService.getFirstGroupWithAttributes(payload);
                const parentGroupFromPayload = this.configuratorGroupUtilsService.getParentGroup(payload.groups, this.configuratorGroupUtilsService.getGroupById(payload.groups, groupIdFromPayload), undefined);
                return {
                    currentGroupId,
                    groupIdFromPayload,
                    parentGroupFromPayload,
                };
            }), switchMap((container) => {
                //changeGroup because in cases where a queue of updates exists with a group navigation in between,
                //we need to ensure that the last update determines the current group.
                const updateFinalizeSuccessAction = new ConfiguratorActions.UpdateConfigurationFinalizeSuccess(payload);
                const updatePriceSummaryAction = new ConfiguratorActions.UpdatePriceSummary({
                    ...payload,
                    interactionState: {
                        currentGroup: container.groupIdFromPayload,
                    },
                });
                return container.currentGroupId === container.groupIdFromPayload
                    ? [updateFinalizeSuccessAction, updatePriceSummaryAction]
                    : [
                        updateFinalizeSuccessAction,
                        updatePriceSummaryAction,
                        new ConfiguratorActions.ChangeGroup({
                            configuration: payload,
                            groupId: container.groupIdFromPayload,
                            parentGroupId: container.parentGroupFromPayload?.id,
                        }),
                    ];
            }))));
        })));
        this.updateConfigurationFail$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.UPDATE_CONFIGURATION_FAIL), map((action) => action.payload), mergeMap((payload) => {
            return this.store.pipe(select(ConfiguratorSelectors.hasPendingChanges(payload.configuration.owner.key)), take(1), filter((hasPendingChanges) => hasPendingChanges === false), map(() => new ConfiguratorActions.UpdateConfigurationFinalizeFail(payload.configuration)));
        })));
        this.handleErrorOnUpdate$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.UPDATE_CONFIGURATION_FINALIZE_FAIL), map((action) => action.payload), map((payload) => new ConfiguratorActions.ReadConfiguration({
            configuration: payload,
            groupId: this.configuratorBasicEffectService.getFirstGroupWithAttributes(payload),
        }))));
        this.groupChange$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.CHANGE_GROUP), switchMap((action) => {
            return this.store.pipe(select(ConfiguratorSelectors.hasPendingChanges(action.payload.configuration.owner.key)), take(1), filter((hasPendingChanges) => hasPendingChanges === false), switchMap(() => {
                return this.configuratorCommonsConnector
                    .readConfiguration(action.payload.configuration.configId, action.payload.groupId, action.payload.configuration.owner)
                    .pipe(switchMap((configuration) => {
                    return [
                        new ConfiguratorActions.SetCurrentGroup({
                            entityKey: action.payload.configuration.owner.key,
                            currentGroup: action.payload.groupId,
                        }),
                        new ConfiguratorActions.SetMenuParentGroup({
                            entityKey: action.payload.configuration.owner.key,
                            menuParentGroup: action.payload.parentGroupId,
                        }),
                        new ConfiguratorActions.ReadConfigurationSuccess(configuration),
                        new ConfiguratorActions.UpdatePriceSummary({
                            ...configuration,
                            interactionState: {
                                currentGroup: action.payload.groupId,
                            },
                        }),
                    ];
                }), catchError((error) => [
                    new ConfiguratorActions.ReadConfigurationFail({
                        ownerKey: action.payload.configuration.owner.key,
                        error: normalizeHttpError(error),
                    }),
                ]));
            }));
        })));
    }
}
ConfiguratorBasicEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorBasicEffects, deps: [{ token: i1.Actions }, { token: i2.RulebasedConfiguratorConnector }, { token: i3.CommonConfiguratorUtilsService }, { token: i4.ConfiguratorUtilsService }, { token: i5.ConfiguratorGroupStatusService }, { token: i6.Store }, { token: i7.ConfiguratorBasicEffectService }], target: i0.ɵɵFactoryTarget.Injectable });
ConfiguratorBasicEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorBasicEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorBasicEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.RulebasedConfiguratorConnector }, { type: i3.CommonConfiguratorUtilsService }, { type: i4.ConfiguratorUtilsService }, { type: i5.ConfiguratorGroupStatusService }, { type: i6.Store }, { type: i7.ConfiguratorBasicEffectService }]; } });
//# sourceMappingURL=data:application/json;base64,