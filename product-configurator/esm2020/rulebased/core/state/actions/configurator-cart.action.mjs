/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { MULTI_CART_DATA } from '@spartacus/cart/base/core';
import { StateUtils } from '@spartacus/core';
import { CONFIGURATOR_DATA } from '../configurator-state';
export const READ_CART_ENTRY_CONFIGURATION = '[Configurator] Read Cart Entry Configuration';
export const READ_CART_ENTRY_CONFIGURATION_SUCCESS = '[Configurator] Read Cart Entry Configuration Success';
export const READ_CART_ENTRY_CONFIGURATION_FAIL = '[Configurator] Read Cart Entry Configuration Fail';
export const READ_ORDER_ENTRY_CONFIGURATION = '[Configurator] Read Order Entry Configuration';
export const READ_ORDER_ENTRY_CONFIGURATION_SUCCESS = '[Configurator] Read Order Entry Configuration Success';
export const READ_ORDER_ENTRY_CONFIGURATION_FAIL = '[Configurator] Read Order Entry Configuration Fail';
export const ADD_TO_CART = '[Configurator] Add to cart';
export const UPDATE_CART_ENTRY = '[Configurator] Update cart entry';
export const UPDATE_CART_ENTRY_SUCCESS = '[Configurator] Update cart entry success';
export const ADD_NEXT_OWNER = '[Configurator] Add next owner';
export const SET_NEXT_OWNER_CART_ENTRY = '[Configurator] Set next owner cart entry';
export const REMOVE_CART_BOUND_CONFIGURATIONS = '[Configurator] Remove cart bound configurations';
export class ReadCartEntryConfiguration extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = READ_CART_ENTRY_CONFIGURATION;
    }
}
export class ReadCartEntryConfigurationSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = READ_CART_ENTRY_CONFIGURATION_SUCCESS;
    }
}
export class ReadCartEntryConfigurationFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.ownerKey, payload.error);
        this.payload = payload;
        this.type = READ_CART_ENTRY_CONFIGURATION_FAIL;
    }
}
export class ReadOrderEntryConfiguration extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = READ_ORDER_ENTRY_CONFIGURATION;
    }
}
export class ReadOrderEntryConfigurationSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = READ_ORDER_ENTRY_CONFIGURATION_SUCCESS;
    }
}
export class ReadOrderEntryConfigurationFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.ownerKey, payload.error);
        this.payload = payload;
        this.type = READ_ORDER_ENTRY_CONFIGURATION_FAIL;
    }
}
export class AddToCart extends StateUtils.EntityProcessesIncrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = ADD_TO_CART;
    }
}
export class UpdateCartEntry extends StateUtils.EntityProcessesIncrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = UPDATE_CART_ENTRY;
    }
}
export class AddNextOwner {
    constructor(payload) {
        this.payload = payload;
        this.type = ADD_NEXT_OWNER;
    }
}
export class RemoveCartBoundConfigurations {
    constructor() {
        this.type = REMOVE_CART_BOUND_CONFIGURATIONS;
        // Intentional Empty Constructor
    }
}
export class SetNextOwnerCartEntry extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.configuration.owner.key);
        this.payload = payload;
        this.type = SET_NEXT_OWNER_CART_ENTRY;
    }
}
//# sourceMappingURL=data:application/json;base64,