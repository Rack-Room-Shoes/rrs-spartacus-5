/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { StateUtils } from '@spartacus/core';
import { CONFIGURATOR_DATA } from '../configurator-state';
export const CREATE_CONFIGURATION = '[Configurator] Create Configuration';
export const CREATE_CONFIGURATION_FAIL = '[Configurator] Create Configuration Fail';
export const CREATE_CONFIGURATION_SUCCESS = '[Configurator] Create Configuration Sucess';
export const READ_CONFIGURATION = '[Configurator] Read Configuration';
export const READ_CONFIGURATION_FAIL = '[Configurator] Read Configuration Fail';
export const READ_CONFIGURATION_SUCCESS = '[Configurator] Read Configuration Sucess';
export const UPDATE_CONFIGURATION = '[Configurator] Update Configuration';
export const UPDATE_CONFIGURATION_FAIL = '[Configurator] Update Configuration Fail';
export const UPDATE_CONFIGURATION_SUCCESS = '[Configurator] Update Configuration Success';
export const UPDATE_CONFIGURATION_FINALIZE_SUCCESS = '[Configurator] Update Configuration finalize success';
export const UPDATE_CONFIGURATION_FINALIZE_FAIL = '[Configurator] Update Configuration finalize fail';
export const CHANGE_GROUP = '[Configurator] Change group';
export const CHANGE_GROUP_FINALIZE = '[Configurator] Change group finalize';
export const REMOVE_CONFIGURATION = '[Configurator] Remove configuration';
export const UPDATE_PRICE_SUMMARY = '[Configurator] Update Configuration Summary Price';
export const UPDATE_PRICE_SUMMARY_FAIL = '[Configurator] Update Configuration Price Summary fail';
export const UPDATE_PRICE_SUMMARY_SUCCESS = '[Configurator] Update Configuration Price Summary success';
export const GET_CONFIGURATION_OVERVIEW = '[Configurator] Get Configuration Overview';
export const GET_CONFIGURATION_OVERVIEW_FAIL = '[Configurator] Get Configuration Overview fail';
export const GET_CONFIGURATION_OVERVIEW_SUCCESS = '[Configurator] Get Configuration Overview success';
export const SET_INTERACTION_STATE = '[Configurator] Set interaction state';
export const SET_CURRENT_GROUP = '[Configurator] Set current group to State';
export const SET_MENU_PARENT_GROUP = '[Configurator] Set current parent group for menu to State';
export const SET_GROUPS_VISITED = '[Configurator] Set groups to visited';
export class CreateConfiguration extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.key);
        this.payload = payload;
        this.type = CREATE_CONFIGURATION;
    }
}
export class CreateConfigurationFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.ownerKey, payload.error);
        this.payload = payload;
        this.type = CREATE_CONFIGURATION_FAIL;
    }
}
export class CreateConfigurationSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = CREATE_CONFIGURATION_SUCCESS;
    }
}
export class ReadConfiguration extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.configuration.owner.key);
        this.payload = payload;
        this.type = READ_CONFIGURATION;
    }
}
export class ReadConfigurationFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.ownerKey, payload.error);
        this.payload = payload;
        this.type = READ_CONFIGURATION_FAIL;
    }
}
export class ReadConfigurationSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = READ_CONFIGURATION_SUCCESS;
    }
}
export class UpdateConfiguration extends StateUtils.EntityProcessesIncrementAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = UPDATE_CONFIGURATION;
        this.meta.loader = {
            load: true,
        };
    }
}
export class UpdateConfigurationFail extends StateUtils.EntityProcessesDecrementAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.configuration.owner.key);
        this.payload = payload;
        this.type = UPDATE_CONFIGURATION_FAIL;
        this.meta.loader = {
            error: payload.error,
        };
    }
}
export class UpdateConfigurationSuccess extends StateUtils.EntityProcessesDecrementAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = UPDATE_CONFIGURATION_SUCCESS;
    }
}
export class UpdateConfigurationFinalizeSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = UPDATE_CONFIGURATION_FINALIZE_SUCCESS;
    }
}
export class UpdateConfigurationFinalizeFail extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = UPDATE_CONFIGURATION_FINALIZE_FAIL;
    }
}
export class UpdatePriceSummary extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = UPDATE_PRICE_SUMMARY;
    }
}
export class UpdatePriceSummaryFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.ownerKey, payload.error);
        this.payload = payload;
        this.type = UPDATE_PRICE_SUMMARY_FAIL;
    }
}
export class UpdatePriceSummarySuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = UPDATE_PRICE_SUMMARY_SUCCESS;
    }
}
export class ChangeGroup extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.configuration.owner.key);
        this.payload = payload;
        this.type = CHANGE_GROUP;
    }
}
export class ChangeGroupFinalize extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = CHANGE_GROUP_FINALIZE;
    }
}
export class RemoveConfiguration extends StateUtils.EntityLoaderResetAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.ownerKey);
        this.payload = payload;
        this.type = REMOVE_CONFIGURATION;
    }
}
export class GetConfigurationOverview extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.owner.key);
        this.payload = payload;
        this.type = GET_CONFIGURATION_OVERVIEW;
    }
}
export class GetConfigurationOverviewFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.ownerKey, payload.error);
        this.payload = payload;
        this.type = GET_CONFIGURATION_OVERVIEW_FAIL;
    }
}
export class GetConfigurationOverviewSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.ownerKey);
        this.payload = payload;
        this.type = GET_CONFIGURATION_OVERVIEW_SUCCESS;
    }
}
export class SetInteractionState extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.entityKey, payload.interactionState);
        this.payload = payload;
        this.type = SET_INTERACTION_STATE;
    }
}
export class SetCurrentGroup extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.entityKey, payload.currentGroup);
        this.payload = payload;
        this.type = SET_CURRENT_GROUP;
    }
}
export class SetMenuParentGroup extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.entityKey, payload.menuParentGroup);
        this.payload = payload;
        this.type = SET_MENU_PARENT_GROUP;
    }
}
export class SetGroupsVisited extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(CONFIGURATOR_DATA, payload.entityKey, payload.visitedGroups);
        this.payload = payload;
        this.type = SET_GROUPS_VISITED;
    }
}
//# sourceMappingURL=data:application/json;base64,