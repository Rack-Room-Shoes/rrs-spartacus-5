/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { StateUtils } from '@spartacus/core';
import { CONFIGURATOR_FEATURE, } from '../configurator-state';
export const getConfigurationsState = createFeatureSelector(CONFIGURATOR_FEATURE);
export const getConfigurationState = createSelector(getConfigurationsState, (state) => state.configurations);
export const getConfigurationProcessLoaderStateFactory = (code) => {
    return createSelector(getConfigurationState, (details) => StateUtils.entityProcessesLoaderStateSelector(details, code));
};
export const hasPendingChanges = (code) => {
    return createSelector(getConfigurationState, (details) => StateUtils.entityHasPendingProcessesSelector(details, code));
};
export const getConfigurationFactory = (code) => {
    return createSelector(getConfigurationProcessLoaderStateFactory(code), (configurationState) => StateUtils.loaderValueSelector(configurationState));
};
export const getCurrentGroup = (ownerKey) => {
    return createSelector(getConfigurationFactory(ownerKey), (configuration) => configuration?.interactionState?.currentGroup);
};
export const isGroupVisited = (ownerKey, groupId) => {
    return createSelector(getConfigurationFactory(ownerKey), (configuration) => {
        const groupsVisited = configuration?.interactionState?.groupsVisited;
        return groupsVisited ? groupsVisited[groupId] : false;
    });
};
export const areGroupsVisited = (ownerKey, groupIds) => {
    return createSelector(getConfigurationFactory(ownerKey), (configuration) => {
        return (groupIds
            .map((id) => {
            const groupsVisited = configuration?.interactionState?.groupsVisited;
            return groupsVisited ? groupsVisited[id] : false;
        })
            .filter((visited) => !visited).length === 0);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdG9yLnNlbGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3Byb2R1Y3QtY29uZmlndXJhdG9yL3J1bGViYXNlZC9jb3JlL3N0YXRlL3NlbGVjdG9ycy9jb25maWd1cmF0b3Iuc2VsZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsY0FBYyxHQUVmLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU3QyxPQUFPLEVBRUwsb0JBQW9CLEdBRXJCLE1BQU0sdUJBQXVCLENBQUM7QUFFL0IsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBRy9CLHFCQUFxQixDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBRW5FLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUc5QixjQUFjLENBQ2hCLHNCQUFzQixFQUN0QixDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQ25ELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBRyxDQUN2RCxJQUFZLEVBSVosRUFBRTtJQUNGLE9BQU8sY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDdkQsVUFBVSxDQUFDLGtDQUFrQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FDN0QsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQy9CLElBQVksRUFDc0MsRUFBRTtJQUNwRCxPQUFPLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQ3ZELFVBQVUsQ0FBQyxpQ0FBaUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQzVELENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUNyQyxJQUFZLEVBQ3lELEVBQUU7SUFDdkUsT0FBTyxjQUFjLENBQ25CLHlDQUF5QyxDQUFDLElBQUksQ0FBQyxFQUMvQyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsQ0FDM0UsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUM3QixRQUFnQixFQUM2QyxFQUFFO0lBQy9ELE9BQU8sY0FBYyxDQUNuQix1QkFBdUIsQ0FBQyxRQUFRLENBQUMsRUFDakMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLENBQ2pFLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FDNUIsUUFBZ0IsRUFDaEIsT0FBZSxFQUNtQyxFQUFFO0lBQ3BELE9BQU8sY0FBYyxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEVBQUU7UUFDekUsTUFBTSxhQUFhLEdBQUcsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsQ0FBQztRQUNyRSxPQUFPLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDeEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUM5QixRQUFnQixFQUNoQixRQUFrQixFQUNnQyxFQUFFO0lBQ3BELE9BQU8sY0FBYyxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEVBQUU7UUFDekUsT0FBTyxDQUNMLFFBQVE7YUFDTCxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUNWLE1BQU0sYUFBYSxHQUFHLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLENBQUM7WUFDckUsT0FBTyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ25ELENBQUMsQ0FBQzthQUNELE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUM5QyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMiBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge1xuICBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsXG4gIGNyZWF0ZVNlbGVjdG9yLFxuICBNZW1vaXplZFNlbGVjdG9yLFxufSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBTdGF0ZVV0aWxzIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IENvbmZpZ3VyYXRvciB9IGZyb20gJy4uLy4uL21vZGVsL2NvbmZpZ3VyYXRvci5tb2RlbCc7XG5pbXBvcnQge1xuICBDb25maWd1cmF0b3JTdGF0ZSxcbiAgQ09ORklHVVJBVE9SX0ZFQVRVUkUsXG4gIFN0YXRlV2l0aENvbmZpZ3VyYXRvcixcbn0gZnJvbSAnLi4vY29uZmlndXJhdG9yLXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IGdldENvbmZpZ3VyYXRpb25zU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENvbmZpZ3VyYXRvcixcbiAgQ29uZmlndXJhdG9yU3RhdGVcbj4gPSBjcmVhdGVGZWF0dXJlU2VsZWN0b3I8Q29uZmlndXJhdG9yU3RhdGU+KENPTkZJR1VSQVRPUl9GRUFUVVJFKTtcblxuZXhwb3J0IGNvbnN0IGdldENvbmZpZ3VyYXRpb25TdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ29uZmlndXJhdG9yLFxuICBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uPlxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDb25maWd1cmF0aW9uc1N0YXRlLFxuICAoc3RhdGU6IENvbmZpZ3VyYXRvclN0YXRlKSA9PiBzdGF0ZS5jb25maWd1cmF0aW9uc1xuKTtcblxuZXhwb3J0IGNvbnN0IGdldENvbmZpZ3VyYXRpb25Qcm9jZXNzTG9hZGVyU3RhdGVGYWN0b3J5ID0gKFxuICBjb2RlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENvbmZpZ3VyYXRvcixcbiAgU3RhdGVVdGlscy5Qcm9jZXNzZXNMb2FkZXJTdGF0ZTxDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbj5cbj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoZ2V0Q29uZmlndXJhdGlvblN0YXRlLCAoZGV0YWlscykgPT5cbiAgICBTdGF0ZVV0aWxzLmVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlU2VsZWN0b3IoZGV0YWlscywgY29kZSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBoYXNQZW5kaW5nQ2hhbmdlcyA9IChcbiAgY29kZTogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENvbmZpZ3VyYXRvciwgYm9vbGVhbj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoZ2V0Q29uZmlndXJhdGlvblN0YXRlLCAoZGV0YWlscykgPT5cbiAgICBTdGF0ZVV0aWxzLmVudGl0eUhhc1BlbmRpbmdQcm9jZXNzZXNTZWxlY3RvcihkZXRhaWxzLCBjb2RlKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvbmZpZ3VyYXRpb25GYWN0b3J5ID0gKFxuICBjb2RlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ29uZmlndXJhdG9yLCBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0Q29uZmlndXJhdGlvblByb2Nlc3NMb2FkZXJTdGF0ZUZhY3RvcnkoY29kZSksXG4gICAgKGNvbmZpZ3VyYXRpb25TdGF0ZSkgPT4gU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKGNvbmZpZ3VyYXRpb25TdGF0ZSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50R3JvdXAgPSAoXG4gIG93bmVyS2V5OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ29uZmlndXJhdG9yLCBzdHJpbmcgfCB1bmRlZmluZWQ+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldENvbmZpZ3VyYXRpb25GYWN0b3J5KG93bmVyS2V5KSxcbiAgICAoY29uZmlndXJhdGlvbikgPT4gY29uZmlndXJhdGlvbj8uaW50ZXJhY3Rpb25TdGF0ZT8uY3VycmVudEdyb3VwXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNHcm91cFZpc2l0ZWQgPSAoXG4gIG93bmVyS2V5OiBzdHJpbmcsXG4gIGdyb3VwSWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDb25maWd1cmF0b3IsIGJvb2xlYW4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldENvbmZpZ3VyYXRpb25GYWN0b3J5KG93bmVyS2V5KSwgKGNvbmZpZ3VyYXRpb24pID0+IHtcbiAgICBjb25zdCBncm91cHNWaXNpdGVkID0gY29uZmlndXJhdGlvbj8uaW50ZXJhY3Rpb25TdGF0ZT8uZ3JvdXBzVmlzaXRlZDtcbiAgICByZXR1cm4gZ3JvdXBzVmlzaXRlZCA/IGdyb3Vwc1Zpc2l0ZWRbZ3JvdXBJZF0gOiBmYWxzZTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgYXJlR3JvdXBzVmlzaXRlZCA9IChcbiAgb3duZXJLZXk6IHN0cmluZyxcbiAgZ3JvdXBJZHM6IHN0cmluZ1tdXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENvbmZpZ3VyYXRvciwgYm9vbGVhbj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoZ2V0Q29uZmlndXJhdGlvbkZhY3Rvcnkob3duZXJLZXkpLCAoY29uZmlndXJhdGlvbikgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICBncm91cElkc1xuICAgICAgICAubWFwKChpZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGdyb3Vwc1Zpc2l0ZWQgPSBjb25maWd1cmF0aW9uPy5pbnRlcmFjdGlvblN0YXRlPy5ncm91cHNWaXNpdGVkO1xuICAgICAgICAgIHJldHVybiBncm91cHNWaXNpdGVkID8gZ3JvdXBzVmlzaXRlZFtpZF0gOiBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbHRlcigodmlzaXRlZCkgPT4gIXZpc2l0ZWQpLmxlbmd0aCA9PT0gMFxuICAgICk7XG4gIH0pO1xufTtcbiJdfQ==