/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { Configurator } from '@spartacus/product-configurator/rulebased';
import { take } from 'rxjs/operators';
import { Cpq } from '../cpq.models';
import * as i0 from "@angular/core";
import * as i1 from "./cpq-configurator-normalizer-utils.service";
import * as i2 from "@spartacus/core";
const INITIAL_OV_VALUE_ATTRIBUTE_NAME = '';
export class CpqConfiguratorOverviewNormalizer {
    constructor(cpqConfiguratorNormalizerUtilsService, translation) {
        this.cpqConfiguratorNormalizerUtilsService = cpqConfiguratorNormalizerUtilsService;
        this.translation = translation;
        this.NO_OPTION_SELECTED = 0;
    }
    convert(source, target) {
        const resultTarget = {
            ...target,
            configId: '',
            productCode: source.productSystemId,
            priceSummary: this.cpqConfiguratorNormalizerUtilsService.convertPriceSummary(source),
            groups: source.tabs
                ?.flatMap((tab) => this.convertTab(tab, source.currencyISOCode))
                .filter((tab) => tab.attributes && tab.attributes.length > 0),
            totalNumberOfIssues: this.calculateTotalNumberOfIssues(source),
        };
        return resultTarget;
    }
    convertTab(tab, currency) {
        let ovAttributes = [];
        tab.attributes?.forEach((attr) => {
            ovAttributes = ovAttributes.concat(this.convertAttribute(attr, currency));
        });
        const groupOverview = {
            id: tab.id.toString(),
            groupDescription: tab.displayName,
            attributes: ovAttributes,
        };
        if (groupOverview.id === '0') {
            this.translation
                .translate('configurator.group.general')
                .pipe(take(1))
                .subscribe((generalText) => (groupOverview.groupDescription = generalText));
        }
        return groupOverview;
    }
    convertAttribute(attr, currency) {
        const attributeOverviewType = attr?.values &&
            this.cpqConfiguratorNormalizerUtilsService.hasAnyProducts(attr?.values)
            ? Configurator.AttributeOverviewType.BUNDLE
            : Configurator.AttributeOverviewType.GENERAL;
        const ovAttr = [];
        this.convertAttributeValue(attr, currency).forEach((ovValue) => {
            ovAttr.push({
                ...ovValue,
                type: attributeOverviewType,
                attribute: this.cpqConfiguratorNormalizerUtilsService.convertAttributeLabel(attr),
                attributeId: attr.stdAttrCode.toString(),
            });
        });
        return ovAttr;
    }
    convertAttributeValue(attr, currency) {
        const ovValues = [];
        switch (attr.displayAs) {
            case Cpq.DisplayAs.INPUT:
                if (attr?.dataType === Cpq.DataType.INPUT_STRING) {
                    if (attr.userInput && attr.userInput.length > 0) {
                        ovValues.push(this.extractValueUserInput(attr, currency));
                    }
                }
                else {
                    ovValues.push({
                        attribute: INITIAL_OV_VALUE_ATTRIBUTE_NAME,
                        value: 'NOT_IMPLEMENTED',
                    });
                }
                break;
            case Cpq.DisplayAs.RADIO_BUTTON:
            case Cpq.DisplayAs.DROPDOWN:
                const selectedValue = attr.values?.find((val) => val.selected && val.paV_ID !== this.NO_OPTION_SELECTED);
                if (selectedValue) {
                    ovValues.push(this.extractValue(selectedValue, attr, currency));
                }
                break;
            case Cpq.DisplayAs.CHECK_BOX:
                attr.values
                    ?.filter((val) => val.selected)
                    ?.forEach((valueSelected) => {
                    ovValues.push(this.extractValue(valueSelected, attr, currency));
                });
                break;
            default:
                ovValues.push({
                    attribute: INITIAL_OV_VALUE_ATTRIBUTE_NAME,
                    value: 'NOT_IMPLEMENTED',
                });
        }
        return ovValues;
    }
    extractValue(valueSelected, attr, currency) {
        const ovValue = {
            attribute: INITIAL_OV_VALUE_ATTRIBUTE_NAME,
            value: valueSelected.valueDisplay ?? valueSelected.paV_ID.toString(),
            valueId: valueSelected.paV_ID.toString(),
            productCode: valueSelected.productSystemId,
            quantity: this.cpqConfiguratorNormalizerUtilsService.convertQuantity(valueSelected, attr),
            valuePrice: this.cpqConfiguratorNormalizerUtilsService.convertValuePrice(valueSelected, currency),
        };
        ovValue.valuePriceTotal =
            this.cpqConfiguratorNormalizerUtilsService.calculateValuePriceTotal(ovValue.quantity ?? 1, ovValue.valuePrice);
        return ovValue;
    }
    extractValueUserInput(attr, currency) {
        const value = attr.values ? attr.values[0] : undefined;
        const ovValue = {
            attribute: INITIAL_OV_VALUE_ATTRIBUTE_NAME,
            value: attr.userInput ?? attr.stdAttrCode.toString(),
            valueId: value?.paV_ID.toString(),
            quantity: 1,
        };
        if (value) {
            ovValue.valuePrice =
                this.cpqConfiguratorNormalizerUtilsService.convertValuePrice(value, currency);
            ovValue.valuePriceTotal =
                this.cpqConfiguratorNormalizerUtilsService.calculateValuePriceTotal(ovValue.quantity ?? 1, ovValue.valuePrice);
        }
        return ovValue;
    }
    calculateTotalNumberOfIssues(source) {
        let numberOfIssues = (source.incompleteAttributes?.length ?? 0) +
            (source.incompleteMessages?.length ?? 0) +
            (source.invalidMessages?.length ?? 0) +
            (source.failedValidations?.length ?? 0) +
            (source.errorMessages?.length ?? 0);
        return numberOfIssues;
    }
}
CpqConfiguratorOverviewNormalizer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CpqConfiguratorOverviewNormalizer, deps: [{ token: i1.CpqConfiguratorNormalizerUtilsService }, { token: i2.TranslationService }], target: i0.ɵɵFactoryTarget.Injectable });
CpqConfiguratorOverviewNormalizer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CpqConfiguratorOverviewNormalizer });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CpqConfiguratorOverviewNormalizer, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CpqConfiguratorNormalizerUtilsService }, { type: i2.TranslationService }]; } });
//# sourceMappingURL=data:application/json;base64,