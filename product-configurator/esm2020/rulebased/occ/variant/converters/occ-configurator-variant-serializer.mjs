/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { OccConfigurator } from '../variant-configurator-occ.models';
import { Configurator } from './../../../core/model/configurator.model';
import * as i0 from "@angular/core";
export class OccConfiguratorVariantSerializer {
    convert(source, target) {
        const resultGroups = [];
        source.groups.forEach((group) => this.convertGroup(group, resultGroups));
        const resultTarget = {
            ...target,
            configId: source.configId,
            rootProduct: source.productCode,
            complete: source.complete,
            groups: resultGroups,
        };
        return resultTarget;
    }
    convertGroup(source, occGroups) {
        const resultSubGroups = [];
        const resultAttributes = [];
        if (source.attributes) {
            source.attributes.forEach((attribute) => this.convertAttribute(attribute, resultAttributes));
        }
        if (source.subGroups) {
            source.subGroups.forEach((subGroup) => this.convertGroup(subGroup, resultSubGroups));
        }
        const group = {
            name: source.name,
            id: source.id,
            configurable: source.configurable,
            groupType: this.convertGroupType(source.groupType ?? Configurator.GroupType.ATTRIBUTE_GROUP),
            description: source.description,
            attributes: resultAttributes,
            subGroups: resultSubGroups,
        };
        occGroups.push(group);
    }
    isRetractValue(attribute) {
        return (attribute.selectedSingleValue ===
            OccConfiguratorVariantSerializer.RETRACT_VALUE_CODE);
    }
    getRetractedValue(attribute) {
        return attribute.values?.find((value) => value.selected)?.valueCode;
    }
    retractValue(attribute, targetAttribute) {
        if (!this.isRetractValue(attribute)) {
            targetAttribute.value = attribute.selectedSingleValue;
        }
        else {
            targetAttribute.value = this.getRetractedValue(attribute);
            targetAttribute.retractTriggered = true;
        }
    }
    convertAttribute(attribute, occAttributes) {
        const targetAttribute = {
            key: attribute.name,
            name: attribute.name,
            langDepName: attribute.label,
            required: attribute.required,
            retractTriggered: attribute.retractTriggered,
            type: this.convertCharacteristicType(attribute.uiType ?? Configurator.UiType.NOT_IMPLEMENTED),
        };
        if (attribute.uiType === Configurator.UiType.DROPDOWN ||
            attribute.uiType === Configurator.UiType.DROPDOWN_ADDITIONAL_INPUT ||
            attribute.uiType === Configurator.UiType.RADIOBUTTON ||
            attribute.uiType === Configurator.UiType.RADIOBUTTON_ADDITIONAL_INPUT ||
            attribute.uiType === Configurator.UiType.SINGLE_SELECTION_IMAGE) {
            this.retractValue(attribute, targetAttribute);
        }
        else if (attribute.uiType === Configurator.UiType.STRING) {
            targetAttribute.value = attribute.userInput;
        }
        else if (attribute.uiType === Configurator.UiType.NUMERIC) {
            targetAttribute.formattedValue = attribute.userInput;
        }
        else if (attribute.uiType === Configurator.UiType.CHECKBOXLIST ||
            attribute.uiType === Configurator.UiType.CHECKBOX ||
            attribute.uiType === Configurator.UiType.MULTI_SELECTION_IMAGE) {
            const domainValues = [];
            if (attribute.values) {
                attribute.values.forEach((value) => {
                    this.convertValue(value, domainValues);
                });
            }
            targetAttribute.domainValues = domainValues;
        }
        occAttributes.push(targetAttribute);
    }
    convertValue(value, values) {
        values.push({
            key: value.valueCode,
            langDepName: value.valueDisplay,
            name: value.name,
            selected: value.selected,
        });
    }
    convertCharacteristicType(type) {
        let uiType;
        switch (type) {
            case Configurator.UiType.RADIOBUTTON: {
                uiType = OccConfigurator.UiType.RADIO_BUTTON;
                break;
            }
            case Configurator.UiType.RADIOBUTTON_ADDITIONAL_INPUT: {
                uiType = OccConfigurator.UiType.RADIO_BUTTON_ADDITIONAL_INPUT;
                break;
            }
            case Configurator.UiType.DROPDOWN: {
                uiType = OccConfigurator.UiType.DROPDOWN;
                break;
            }
            case Configurator.UiType.DROPDOWN_ADDITIONAL_INPUT: {
                uiType = OccConfigurator.UiType.DROPDOWN_ADDITIONAL_INPUT;
                break;
            }
            case Configurator.UiType.STRING: {
                uiType = OccConfigurator.UiType.STRING;
                break;
            }
            case Configurator.UiType.NUMERIC: {
                uiType = OccConfigurator.UiType.NUMERIC;
                break;
            }
            case Configurator.UiType.CHECKBOX: {
                uiType = OccConfigurator.UiType.CHECK_BOX;
                break;
            }
            case Configurator.UiType.CHECKBOXLIST: {
                uiType = OccConfigurator.UiType.CHECK_BOX_LIST;
                break;
            }
            case Configurator.UiType.MULTI_SELECTION_IMAGE: {
                uiType = OccConfigurator.UiType.MULTI_SELECTION_IMAGE;
                break;
            }
            case Configurator.UiType.SINGLE_SELECTION_IMAGE: {
                uiType = OccConfigurator.UiType.SINGLE_SELECTION_IMAGE;
                break;
            }
            default: {
                uiType = OccConfigurator.UiType.NOT_IMPLEMENTED;
            }
        }
        return uiType;
    }
    convertGroupType(groupType) {
        switch (groupType) {
            case Configurator.GroupType.ATTRIBUTE_GROUP:
                return OccConfigurator.GroupType.CSTIC_GROUP;
            case Configurator.GroupType.SUB_ITEM_GROUP:
                return OccConfigurator.GroupType.INSTANCE;
            case Configurator.GroupType.CONFLICT_GROUP:
                return OccConfigurator.GroupType.CONFLICT;
            case Configurator.GroupType.CONFLICT_HEADER_GROUP:
                return OccConfigurator.GroupType.CONFLICT_HEADER;
        }
    }
}
OccConfiguratorVariantSerializer.RETRACT_VALUE_CODE = '###RETRACT_VALUE_CODE###';
OccConfiguratorVariantSerializer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OccConfiguratorVariantSerializer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
OccConfiguratorVariantSerializer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OccConfiguratorVariantSerializer, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OccConfiguratorVariantSerializer, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,