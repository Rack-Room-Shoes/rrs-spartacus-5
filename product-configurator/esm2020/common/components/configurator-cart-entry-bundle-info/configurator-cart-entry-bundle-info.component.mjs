/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, Optional } from '@angular/core';
import { BREAKPOINT } from '@spartacus/storefront';
import { EMPTY } from 'rxjs';
import { map, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/utils/common-configurator-utils.service";
import * as i2 from "./configurator-cart-entry-bundle-info.service";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@spartacus/core";
import * as i5 from "@spartacus/cart/base/root";
import * as i6 from "@angular/common";
import * as i7 from "../configure-cart-entry/configure-cart-entry.component";
/**
 * Requires default change detection strategy, as the disabled state of the quantity from control may change,
 * which would not be proper detected with onPush strategy.
 */
export class ConfiguratorCartEntryBundleInfoComponent {
    constructor(commonConfigUtilsService, configCartEntryBundleInfoService, breakpointService, translation, cartItemContext) {
        this.commonConfigUtilsService = commonConfigUtilsService;
        this.configCartEntryBundleInfoService = configCartEntryBundleInfoService;
        this.breakpointService = breakpointService;
        this.translation = translation;
        this.cartItemContext = cartItemContext;
        this.orderEntry$ = this.cartItemContext?.item$ ?? EMPTY;
        this.quantityControl$ = this.cartItemContext?.quantityControl$ ?? EMPTY;
        this.readonly$ = this.cartItemContext?.readonly$ ?? EMPTY;
        this.hideItems = true;
        this.lineItems$ = this.orderEntry$.pipe(map((entry) => this.configCartEntryBundleInfoService.retrieveLineItems(entry)));
        this.numberOfLineItems$ = this.lineItems$.pipe(map((items) => items.length));
        // TODO: remove the logic below when configurable products support "Saved Cart" and "Save For Later"
        this.shouldShowButton$ = this.commonConfigUtilsService.isActiveCartContext(this.cartItemContext);
    }
    /**
     * Toggles the state of the items list.
     */
    toggleItems() {
        this.hideItems = !this.hideItems;
    }
    /**
     * Verifies whether the configurator type is a bundle based one.
     *
     * @param {OrderEntry} entry - Order entry
     * @returns {boolean} - 'true' if the expected configurator type, otherwise 'false'
     */
    isBundleBasedConfigurator(entry) {
        const configInfos = entry.configurationInfos;
        return configInfos
            ? this.commonConfigUtilsService.isBundleBasedConfigurator(configInfos[0]?.configuratorType)
            : false;
    }
    /**
     * Verifies whether the current screen size equals or is larger than breakpoint `BREAKPOINT.md`.
     *
     * @deprecated since 5.0 - method not used anymore
     * @returns {Observable<boolean>} - If the given breakpoint equals or is larger than`BREAKPOINT.md` returns `true`, otherwise `false`.
     */
    isDesktop() {
        return this.breakpointService.isUp(BREAKPOINT.md);
    }
    getButtonText(translatedText) {
        if (!translatedText) {
            translatedText = '';
        }
        if (this.hideItems) {
            this.translation
                .translate('configurator.header.show')
                .pipe(take(1))
                .subscribe((text) => (translatedText += text));
        }
        else {
            this.translation
                .translate('configurator.header.hide')
                .pipe(take(1))
                .subscribe((text) => (translatedText += text));
        }
        return translatedText;
    }
    getItemsMsg(items) {
        let translatedText = '';
        this.translation
            .translate('configurator.a11y.cartEntryBundleInfo', { items: items })
            .pipe(take(1))
            .subscribe((text) => (translatedText = text));
        return this.getButtonText(translatedText);
    }
    getHiddenItemInfo(item) {
        let translatedText = '';
        if (item.name && item.formattedPrice && item.formattedQuantity) {
            this.translation
                .translate('configurator.a11y.cartEntryBundle', {
                name: item.name,
                price: item.formattedPrice,
                quantity: item.formattedQuantity,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        else if (item.name && item.formattedPrice) {
            this.translation
                .translate('configurator.a11y.cartEntryBundleNameWithPrice', {
                name: item.name,
                price: item.formattedPrice,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        else if (item.name && item.formattedQuantity) {
            this.translation
                .translate('configurator.a11y.cartEntryBundleNameWithQuantity', {
                name: item.name,
                quantity: item.formattedQuantity,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        else {
            this.translation
                .translate('configurator.a11y.cartEntryBundleName', {
                name: item.name,
            })
                .pipe(take(1))
                .subscribe((text) => (translatedText = text));
        }
        return translatedText;
    }
    getHiddenItemInfoId(index) {
        return 'cx-item-hidden-info-' + index.toString();
    }
}
ConfiguratorCartEntryBundleInfoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorCartEntryBundleInfoComponent, deps: [{ token: i1.CommonConfiguratorUtilsService }, { token: i2.ConfiguratorCartEntryBundleInfoService }, { token: i3.BreakpointService }, { token: i4.TranslationService }, { token: i5.CartItemContext, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorCartEntryBundleInfoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: ConfiguratorCartEntryBundleInfoComponent, selector: "cx-configurator-cart-entry-bundle-info", ngImport: i0, template: "<ng-container *ngIf=\"orderEntry$ | async as orderEntry\">\n  <ng-container *ngIf=\"isBundleBasedConfigurator(orderEntry)\">\n    <ng-container *ngIf=\"numberOfLineItems$ | async as numberOfItems\">\n      <div class=\"cx-number-items\">\n        {{\n          'configurator.header.items' | cxTranslate: { count: numberOfItems }\n        }}\n      </div>\n      <button\n        (click)=\"toggleItems()\"\n        [attr.aria-expanded]=\"!this.hideItems\"\n        [attr.aria-label]=\"getItemsMsg(numberOfItems)\"\n      >\n        <div class=\"cx-toggle-hide-items\">\n          {{ getButtonText() }}\n        </div>\n      </button>\n\n      <div class=\"cx-item-infos\" [class.open]=\"!hideItems\">\n        <div\n          *ngFor=\"let lineItem of lineItems$ | async; let i = index\"\n          class=\"cx-item-info\"\n          attr.aria-describedby=\"{{ getHiddenItemInfoId(i) }}\"\n        >\n          <span id=\"{{ getHiddenItemInfoId(i) }}\" class=\"cx-visually-hidden\">\n            {{ getHiddenItemInfo(lineItem) }}\n          </span>\n          <div class=\"cx-item-name\" aria-hidden=\"true\">\n            {{ lineItem?.name }}\n          </div>\n          <div class=\"cx-item-quantity\" aria-hidden=\"true\">\n            <ng-container *ngIf=\"lineItem?.formattedQuantity\">\n              <span class=\"cx-identifier\">{{\n                'configurator.attribute.quantity' | cxTranslate\n              }}</span>\n              <span class=\"cx-item\">{{\n                lineItem?.formattedQuantity | cxNumeric\n              }}</span>\n            </ng-container>\n          </div>\n          <div class=\"cx-item-price\" aria-hidden=\"true\">\n            <ng-container *ngIf=\"lineItem?.formattedPrice\">\n              <span class=\"cx-identifier\">{{\n                'configurator.overviewForm.itemPrice' | cxTranslate\n              }}</span>\n              <span class=\"cx-item\">{{ lineItem?.formattedPrice }}</span>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n    <cx-configure-cart-entry\n      *ngIf=\"\n        (shouldShowButton$ | async) &&\n          orderEntry?.product?.configurable &&\n          quantityControl$ | async as quantityControl\n      \"\n      [cartEntry]=\"orderEntry\"\n      [readOnly]=\"readonly$ | async\"\n      [msgBanner]=\"false\"\n      [disabled]=\"quantityControl.disabled\"\n    ></cx-configure-cart-entry>\n  </ng-container>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i7.ConfigureCartEntryComponent, selector: "cx-configure-cart-entry", inputs: ["cartEntry", "readOnly", "msgBanner", "disabled"] }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "cxTranslate" }, { kind: "pipe", type: i4.CxNumericPipe, name: "cxNumeric" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorCartEntryBundleInfoComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-cart-entry-bundle-info', template: "<ng-container *ngIf=\"orderEntry$ | async as orderEntry\">\n  <ng-container *ngIf=\"isBundleBasedConfigurator(orderEntry)\">\n    <ng-container *ngIf=\"numberOfLineItems$ | async as numberOfItems\">\n      <div class=\"cx-number-items\">\n        {{\n          'configurator.header.items' | cxTranslate: { count: numberOfItems }\n        }}\n      </div>\n      <button\n        (click)=\"toggleItems()\"\n        [attr.aria-expanded]=\"!this.hideItems\"\n        [attr.aria-label]=\"getItemsMsg(numberOfItems)\"\n      >\n        <div class=\"cx-toggle-hide-items\">\n          {{ getButtonText() }}\n        </div>\n      </button>\n\n      <div class=\"cx-item-infos\" [class.open]=\"!hideItems\">\n        <div\n          *ngFor=\"let lineItem of lineItems$ | async; let i = index\"\n          class=\"cx-item-info\"\n          attr.aria-describedby=\"{{ getHiddenItemInfoId(i) }}\"\n        >\n          <span id=\"{{ getHiddenItemInfoId(i) }}\" class=\"cx-visually-hidden\">\n            {{ getHiddenItemInfo(lineItem) }}\n          </span>\n          <div class=\"cx-item-name\" aria-hidden=\"true\">\n            {{ lineItem?.name }}\n          </div>\n          <div class=\"cx-item-quantity\" aria-hidden=\"true\">\n            <ng-container *ngIf=\"lineItem?.formattedQuantity\">\n              <span class=\"cx-identifier\">{{\n                'configurator.attribute.quantity' | cxTranslate\n              }}</span>\n              <span class=\"cx-item\">{{\n                lineItem?.formattedQuantity | cxNumeric\n              }}</span>\n            </ng-container>\n          </div>\n          <div class=\"cx-item-price\" aria-hidden=\"true\">\n            <ng-container *ngIf=\"lineItem?.formattedPrice\">\n              <span class=\"cx-identifier\">{{\n                'configurator.overviewForm.itemPrice' | cxTranslate\n              }}</span>\n              <span class=\"cx-item\">{{ lineItem?.formattedPrice }}</span>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n    <cx-configure-cart-entry\n      *ngIf=\"\n        (shouldShowButton$ | async) &&\n          orderEntry?.product?.configurable &&\n          quantityControl$ | async as quantityControl\n      \"\n      [cartEntry]=\"orderEntry\"\n      [readOnly]=\"readonly$ | async\"\n      [msgBanner]=\"false\"\n      [disabled]=\"quantityControl.disabled\"\n    ></cx-configure-cart-entry>\n  </ng-container>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CommonConfiguratorUtilsService }, { type: i2.ConfiguratorCartEntryBundleInfoService }, { type: i3.BreakpointService }, { type: i4.TranslationService }, { type: i5.CartItemContext, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,