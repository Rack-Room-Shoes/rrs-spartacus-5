/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { StateUtils } from '@spartacus/core';
import { CONFIGURATION_TEXTFIELD_DATA } from '../configuration-textfield-state';
export const CREATE_CONFIGURATION = '[Configurator] Create Configuration Textfield';
export const CREATE_CONFIGURATION_FAIL = '[Configurator] Create Configuration Textfield Fail';
export const CREATE_CONFIGURATION_SUCCESS = '[Configurator] Create Configuration Textfield Success';
export const UPDATE_CONFIGURATION = '[Configurator] Update Configuration Textfield';
export const ADD_TO_CART = '[Configurator] Add to cart Textfield';
export const ADD_TO_CART_FAIL = '[Configurator] Add to cart Textfield Fail';
export const READ_CART_ENTRY_CONFIGURATION = '[Configurator] Read cart entry configuration Textfield';
export const READ_CART_ENTRY_CONFIGURATION_FAIL = '[Configurator] Read cart entry configuration Textfield Fail';
export const READ_CART_ENTRY_CONFIGURATION_SUCCESS = '[Configurator] Read cart entry configuration Textfield Success';
export const READ_ORDER_ENTRY_CONFIGURATION = '[Configurator] Read order entry configuration textfield';
export const READ_ORDER_ENTRY_CONFIGURATION_FAIL = '[Configurator] Read order entry configuration textfield Fail';
export const READ_ORDER_ENTRY_CONFIGURATION_SUCCESS = '[Configurator] Read order entry configuration textfield Success';
export const UPDATE_CART_ENTRY_CONFIGURATION = '[Configurator] Update cart entry configuration Textfield';
export const UPDATE_CART_ENTRY_CONFIGURATION_FAIL = '[Configurator] Update cart entry configuration Textfield Fail';
export const REMOVE_CONFIGURATION = '[Configurator] Remove Configuration Textfield';
export class CreateConfiguration extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.payload = payload;
        this.type = CREATE_CONFIGURATION;
    }
}
export class CreateConfigurationFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA, payload);
        this.payload = payload;
        this.type = CREATE_CONFIGURATION_FAIL;
    }
}
export class CreateConfigurationSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.payload = payload;
        this.type = CREATE_CONFIGURATION_SUCCESS;
    }
}
export class UpdateConfiguration extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.payload = payload;
        this.type = UPDATE_CONFIGURATION;
    }
}
export class AddToCart extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.payload = payload;
        this.type = ADD_TO_CART;
    }
}
export class AddToCartFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA, payload);
        this.payload = payload;
        this.type = ADD_TO_CART_FAIL;
    }
}
export class UpdateCartEntryConfiguration extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.payload = payload;
        this.type = UPDATE_CART_ENTRY_CONFIGURATION;
    }
}
export class UpdateCartEntryConfigurationFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA, payload);
        this.payload = payload;
        this.type = UPDATE_CART_ENTRY_CONFIGURATION_FAIL;
    }
}
export class ReadCartEntryConfiguration extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.payload = payload;
        this.type = READ_CART_ENTRY_CONFIGURATION;
    }
}
export class ReadCartEntryConfigurationSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.payload = payload;
        this.type = READ_CART_ENTRY_CONFIGURATION_SUCCESS;
    }
}
export class ReadCartEntryConfigurationFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA, payload);
        this.payload = payload;
        this.type = READ_CART_ENTRY_CONFIGURATION_FAIL;
    }
}
export class ReadOrderEntryConfiguration extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.payload = payload;
        this.type = READ_ORDER_ENTRY_CONFIGURATION;
    }
}
export class ReadOrderEntryConfigurationSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.payload = payload;
        this.type = READ_ORDER_ENTRY_CONFIGURATION_SUCCESS;
    }
}
export class ReadOrderEntryConfigurationFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(CONFIGURATION_TEXTFIELD_DATA, payload);
        this.payload = payload;
        this.type = READ_ORDER_ENTRY_CONFIGURATION_FAIL;
    }
}
export class RemoveConfiguration extends StateUtils.LoaderResetAction {
    constructor() {
        super(CONFIGURATION_TEXTFIELD_DATA);
        this.type = REMOVE_CONFIGURATION;
    }
}
//# sourceMappingURL=data:application/json;base64,