/*
 * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { CartActions } from '@spartacus/cart/base/core';
import { normalizeHttpError } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { ConfiguratorTextfieldActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/configurator-textfield.connector";
export class ConfiguratorTextfieldEffects {
    constructor(actions$, configuratorTextfieldConnector) {
        this.actions$ = actions$;
        this.configuratorTextfieldConnector = configuratorTextfieldConnector;
        this.createConfiguration$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorTextfieldActions.CREATE_CONFIGURATION), map((action) => action.payload), switchMap((payload) => {
            return this.configuratorTextfieldConnector
                .createConfiguration(payload.productCode, payload.owner)
                .pipe(switchMap((configuration) => {
                return [
                    new ConfiguratorTextfieldActions.CreateConfigurationSuccess(configuration),
                ];
            }), catchError((error) => of(new ConfiguratorTextfieldActions.CreateConfigurationFail(normalizeHttpError(error)))));
        })));
        this.addToCart$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorTextfieldActions.ADD_TO_CART), map((action) => action.payload), switchMap((payload) => {
            return this.configuratorTextfieldConnector.addToCart(payload).pipe(switchMap(() => {
                return [
                    new ConfiguratorTextfieldActions.RemoveConfiguration(),
                    new CartActions.LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                ];
            }), catchError((error) => of(new ConfiguratorTextfieldActions.AddToCartFail(normalizeHttpError(error)))));
        })));
        this.updateCartEntry$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorTextfieldActions.UPDATE_CART_ENTRY_CONFIGURATION), map((action) => action.payload), switchMap((payload) => {
            return this.configuratorTextfieldConnector
                .updateConfigurationForCartEntry(payload)
                .pipe(switchMap(() => {
                return [
                    new ConfiguratorTextfieldActions.RemoveConfiguration(),
                    new CartActions.LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                ];
            }), catchError((error) => of(new ConfiguratorTextfieldActions.UpdateCartEntryConfigurationFail(normalizeHttpError(error)))));
        })));
        this.readConfigurationForCartEntry$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorTextfieldActions.READ_CART_ENTRY_CONFIGURATION), switchMap((action) => {
            const parameters = action.payload;
            return this.configuratorTextfieldConnector
                .readConfigurationForCartEntry(parameters)
                .pipe(switchMap((result) => [
                new ConfiguratorTextfieldActions.ReadCartEntryConfigurationSuccess(result),
            ]), catchError((error) => [
                new ConfiguratorTextfieldActions.ReadCartEntryConfigurationFail(normalizeHttpError(error)),
            ]));
        })));
        this.readConfigurationForOrderEntry$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorTextfieldActions.READ_ORDER_ENTRY_CONFIGURATION), switchMap((action) => {
            const parameters = action.payload;
            return this.configuratorTextfieldConnector
                .readConfigurationForOrderEntry(parameters)
                .pipe(switchMap((result) => [
                new ConfiguratorTextfieldActions.ReadOrderEntryConfigurationSuccess(result),
            ]), catchError((error) => [
                new ConfiguratorTextfieldActions.ReadOrderEntryConfigurationFail(normalizeHttpError(error)),
            ]));
        })));
    }
}
ConfiguratorTextfieldEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorTextfieldEffects, deps: [{ token: i1.Actions }, { token: i2.ConfiguratorTextfieldConnector }], target: i0.ɵɵFactoryTarget.Injectable });
ConfiguratorTextfieldEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorTextfieldEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: ConfiguratorTextfieldEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.ConfiguratorTextfieldConnector }]; } });
//# sourceMappingURL=data:application/json;base64,