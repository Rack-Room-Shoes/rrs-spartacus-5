import { Injectable } from '@angular/core';
import { CART_MODIFICATION_NORMALIZER, } from '@spartacus/cart/base/root';
import { map } from 'rxjs/operators';
import { CONFIGURATION_TEXTFIELD_ADD_TO_CART_SERIALIZER, CONFIGURATION_TEXTFIELD_NORMALIZER, CONFIGURATION_TEXTFIELD_UPDATE_CART_ENTRY_SERIALIZER, } from '../core/connectors/converters';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccConfiguratorTextfieldAdapter {
    constructor(http, occEndpointsService, converterService) {
        this.http = http;
        this.occEndpointsService = occEndpointsService;
        this.converterService = converterService;
    }
    createConfiguration(productCode, owner) {
        return this.http
            .get(this.occEndpointsService.buildUrl('createTextfieldConfiguration', {
            urlParams: {
                productCode,
            },
        }))
            .pipe(this.converterService.pipeable(CONFIGURATION_TEXTFIELD_NORMALIZER), map((resultConfiguration) => {
            return {
                ...resultConfiguration,
                owner: owner,
            };
        }));
    }
    addToCart(parameters) {
        const url = this.occEndpointsService.buildUrl('addTextfieldConfigurationToCart', {
            urlParams: {
                userId: parameters.userId,
                cartId: parameters.cartId,
            },
        });
        const occAddToCartParameters = this.converterService.convert(parameters, CONFIGURATION_TEXTFIELD_ADD_TO_CART_SERIALIZER);
        return this.http
            .post(url, occAddToCartParameters)
            .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
    }
    readConfigurationForCartEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('readTextfieldConfigurationForCartEntry', {
            urlParams: {
                userId: parameters.userId,
                cartId: parameters.cartId,
                cartEntryNumber: parameters.cartEntryNumber,
            },
        });
        return this.http.get(url).pipe(this.converterService.pipeable(CONFIGURATION_TEXTFIELD_NORMALIZER), map((resultConfiguration) => {
            return {
                ...resultConfiguration,
                owner: {
                    ...parameters.owner,
                },
            };
        }));
    }
    readConfigurationForOrderEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('readTextfieldConfigurationForOrderEntry', {
            urlParams: {
                userId: parameters.userId,
                orderId: parameters.orderId,
                orderEntryNumber: parameters.orderEntryNumber,
            },
        });
        return this.http.get(url).pipe(this.converterService.pipeable(CONFIGURATION_TEXTFIELD_NORMALIZER), map((resultConfiguration) => {
            return {
                ...resultConfiguration,
                owner: {
                    ...parameters.owner,
                },
            };
        }));
    }
    updateConfigurationForCartEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('updateTextfieldConfigurationForCartEntry', {
            urlParams: {
                userId: parameters.userId,
                cartId: parameters.cartId,
                cartEntryNumber: parameters.cartEntryNumber,
            },
        });
        const occUpdateCartEntryParameters = this.converterService.convert(parameters, CONFIGURATION_TEXTFIELD_UPDATE_CART_ENTRY_SERIALIZER);
        return this.http
            .post(url, occUpdateCartEntryParameters)
            .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
    }
}
OccConfiguratorTextfieldAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OccConfiguratorTextfieldAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccConfiguratorTextfieldAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OccConfiguratorTextfieldAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: OccConfiguratorTextfieldAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,